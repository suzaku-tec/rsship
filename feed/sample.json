{
  "items": [
    {
      "title": "【参加報告】JJUG CCC 2021 Spring",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/05/23/220750",
      "pubDate": "Sun, 23 May 2021 22:07:50 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>イベント内容</h1>\n\n<p><a href=\"https://jjug.doorkeeper.jp/events/120427\">&#x3010;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x3011; JJUG CCC 2021 Spring - &#x65E5;&#x672C;Java&#x30E6;&#x30FC;&#x30B6;&#x30FC;&#x30B0;&#x30EB;&#x30FC;&#x30D7;/Japan Java User Group | Doorkeeper</a></p>\n\n<p>全部見ることはできなかったけど、興味関心あるものは見れた。</p>\n\n<h1>参加セッション感想＋メモ</h1>\n\n<h2>フロントエンド・バックエンド分離の道のり</h2>\n\n<ul>\n<li>昔ながらの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MVC\">MVC</a>\n\n<ul>\n<li>責務が多い</li>\n<li>コードがトレースしにくい</li>\n<li>並行開発が困難</li>\n</ul>\n</li>\n</ul>\n\n\n<p>技術的境界をまたぐ必要が多い＝責務が多い＝やるべきことがおおい＝知識が多い＝辛たん</p>\n\n<ul>\n<li><p>独自FWが醸成されやすい環境</p>\n\n<ul>\n<li>処理が共<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD\">通化</a>されやすい</li>\n<li>時間が経つと\n\n<ul>\n<li>コードが読みづらい</li>\n<li>FWを知っている人間がいなくなると問題対応が難しくなる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSP\">JSP</a></p>\n\n<ul>\n<li>カスタムタグの理解がむずい</li>\n</ul>\n</li>\n<li><p>JS</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>の進化に追いついてイケてない</li>\n<li>DOM操作の複雑化</li>\n</ul>\n</li>\n</ul>\n\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>エンジニアが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSP\">JSP</a>/JSを扱うのは辛い</h3>\n\n<ul>\n<li><p>問題を解決するには</p>\n\n<ul>\n<li>技術境界をなくす</li>\n<li>並列化開発可能にする</li>\n</ul>\n</li>\n<li><p>解決方法を実践する方法</p>\n\n<ul>\n<li>サーバーサイドを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>化</li>\n<li>フロントはサーバーとは別FWを利用</li>\n</ul>\n</li>\n</ul>\n\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>化のメリット</h3>\n\n<ul>\n<li>テストしやすい</li>\n<li>表示の考慮がいらなくなる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSP\">JSP</a>書かなくていい</li>\n<li>再利用性が高くなった</li>\n</ul>\n\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>化のデメリット</h3>\n\n<ul>\n<li>フロントが完成しないと画面の確認できない（疎通的な意味）</li>\n<li>画面表示して気づくミスが残る</li>\n<li>フロントとバックが結合部分になり、バグが混在しやすくなった</li>\n<li>中途半端な棲み分けは、複雑さを残す</li>\n<li>フロント・バックエンドで作業が分かれる\n\n<ul>\n<li>情報連携、重要</li>\n<li>連携ミスがあると結合時にバグになって時間がかかるため、情報連携の手順を整備をする必要がある</li>\n<li>事前にノウハウがないと教育コストが高い</li>\n</ul>\n</li>\n</ul>\n\n\n<h3>感想</h3>\n\n<p>技術境界は変えられない壁なんだな～と見ていて思った。<br />\n分断したときの問題点は、やはり結合部分に集約されるのだと感じた。</p>\n\n<h2>あなたの勘と経験は本当に合っていると断言できますか？　プロダクション環境での計測のススメ</h2>\n\n<ul>\n<li><p>プロファイリングの意味</p>\n\n<ul>\n<li>思い込みの改善をなくすため</li>\n<li>データに基づかないものは、オカルト</li>\n</ul>\n</li>\n<li><p>プロファイリングしないことのデメリット</p>\n\n<ul>\n<li>性能が分からない</li>\n<li>対応が後手になる</li>\n<li>再現できない</li>\n<li>平常時と非常時の差がわからない</li>\n</ul>\n</li>\n</ul>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8\">カバレッジ</a>ツールの導入→人への技術的依存を消せる。</p>\n\n<h3>感想</h3>\n\n<p>jacocoは、知ってた。<br />\n一時期、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8\">カバレッジ</a>の計測のため、ローカル環境で使っていた記憶がある。<br />\n使っていたときは、デバック実行でテストしていたときに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8\">カバレッジ</a>図るのに使っていた気がする。</p>\n\n<p>メソッドorクラスが死ぬまでのフローは、初めて見た気がする。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8\">カバレッジ</a>の利用法として、コードの生死判断にも使っているわけね。</p>\n\n<p>@Deprecatedに行くことはほとんどないかと思ったが、思い返すと、たぶん、ほとんど@Deprecatedに行く気がする。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CD%AD%BC%B1%BC%D4\">有識者</a>だから確実ってことのほうが少ないと思う。<br />\nそもそも、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8\">カバレッジ</a>で利用箇所が少ないところを見ているのだから、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CD%AD%BC%B1%BC%D4\">有識者</a>でも知らないのは当然な気がする。</p>\n\n<h2>ソフトウェア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>の選び方</h2>\n\n<p>ソフトウェア<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>が必要になるとき＝長く運用するとき</p>\n\n<p>将来は予測不可能。ワンタイムではないサービスを作る場合、一定の期間以上のサービスを作る際に、考慮の余地がある。</p>\n\n<p>ソフトウェアの品質と開発効率の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C2%BB%B1%D7%CA%AC%B4%F4%C5%C0\">損益分岐点</a>＝1ヶ月</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>の目的・達成したいこと\n\n<ul>\n<li>抽象化\n\n<ul>\n<li>抽象度の粒度を合わせる</li>\n</ul>\n</li>\n<li>問題の分割\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%C1%A5%BF%A5%B9%A5%AF\">マルチタスク</a>の軽減</li>\n</ul>\n</li>\n<li>シンプル化\n\n<ul>\n<li>コード間の結合を複雑化しないようにする</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>の種類</h3>\n\n<ul>\n<li>レイヤード<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></li>\n<li>ヘキサゴナル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></li>\n<li>オニオン<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></li>\n<li>クリーン<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></li>\n</ul>\n\n\n<h1>オンラインイベントの感想</h1>\n\n<p>アンカンファレンスの様子を見ようと思ったが、操作がイマイチ分からなくて断念した。。。<br />\nなんかAmong Usのゲーム画面みたいだな～とは見ていて思った。<br />\nキルされそうだから、あんまり長い時間は滞在しなかった。</p>\n\n<p>自宅で見えるから、快適に視聴できた。<br />\nデュアルモニタで見ながら検索したりできるのは楽だった。<br />\nあと、部屋に人数制限がないから、見れないことがないのも良かった。</p>\n\n<p>今回は、Java16のアップデート内容があんまりないから、事例紹介が多かった印象。<br />\n今の現場で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>は使ってないけど、内容的にはついていけるから問題なし。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>駆動系のセッションが多かった気がする。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>駆動は、何回で雰囲気で聞き流しちゃうけど、どっかでちゃんと勉強はしたいとは思うが、座学だけだと理解するのは無理な気がする。。。</p>\n",
      "contentSnippet": "イベント内容\n【オンライン】 JJUG CCC 2021 Spring - 日本Javaユーザーグループ/Japan Java User Group | Doorkeeper\n全部見ることはできなかったけど、興味関心あるものは見れた。\n参加セッション感想＋メモ\nフロントエンド・バックエンド分離の道のり\n昔ながらのMVC\n\n\n責務が多い\nコードがトレースしにくい\n並行開発が困難\n技術的境界をまたぐ必要が多い＝責務が多い＝やるべきことがおおい＝知識が多い＝辛たん\n独自FWが醸成されやすい環境\n処理が共通化されやすい\n時間が経つと\n\n\nコードが読みづらい\nFWを知っている人間がいなくなると問題対応が難しくなる\nJSP\nカスタムタグの理解がむずい\nJS\njavascriptの進化に追いついてイケてない\nDOM操作の複雑化\nJavaエンジニアがJSP/JSを扱うのは辛い\n問題を解決するには\n技術境界をなくす\n並列化開発可能にする\n解決方法を実践する方法\nサーバーサイドをAPI化\nフロントはサーバーとは別FWを利用\nAPI化のメリット\nテストしやすい\n表示の考慮がいらなくなる\nJSP書かなくていい\n再利用性が高くなった\nAPI化のデメリット\nフロントが完成しないと画面の確認できない（疎通的な意味）\n画面表示して気づくミスが残る\nフロントとバックが結合部分になり、バグが混在しやすくなった\n中途半端な棲み分けは、複雑さを残す\nフロント・バックエンドで作業が分かれる\n\n\n情報連携、重要\n連携ミスがあると結合時にバグになって時間がかかるため、情報連携の手順を整備をする必要がある\n事前にノウハウがないと教育コストが高い\n感想\n技術境界は変えられない壁なんだな～と見ていて思った。\nあなたの勘と経験は本当に合っていると断言できますか？　プロダクション環境での計測のススメ\nプロファイリングの意味\n思い込みの改善をなくすため\nデータに基づかないものは、オカルト\nプロファイリングしないことのデメリット\n性能が分からない\n対応が後手になる\n再現できない\n平常時と非常時の差がわからない\nカバレッジツールの導入→人への技術的依存を消せる。\n感想\njacocoは、知ってた。\nカバレッジの計測のため、ローカル環境で使っていた記憶がある。\nカバレッジ図るのに使っていた気がする。\nメソッドorクラスが死ぬまでのフローは、初めて見た気がする。\nカバレッジの利用法として、コードの生死判断にも使っているわけね。\n@Deprecatedに行くことはほとんどないかと思ったが、思い返すと、たぶん、ほとんど@Deprecatedに行く気がする。。。\n有識者だから確実ってことのほうが少ないと思う。\nカバレッジで利用箇所が少ないところを見ているのだから、有識者でも知らないのは当然な気がする。\nソフトウェアアーキテクチャの選び方\nソフトウェアアーキテクチャが必要になるとき＝長く運用するとき\n将来は予測不可能。ワンタイムではないサービスを作る場合、一定の期間以上のサービスを作る際に、考慮の余地がある。\nソフトウェアの品質と開発効率の損益分岐点＝1ヶ月\nアーキテクチャの目的・達成したいこと\n\n\n抽象化\n\n\n抽象度の粒度を合わせる\n問題の分割\n\n\nマルチタスクの軽減\nシンプル化\n\n\nコード間の結合を複雑化しないようにする\nアーキテクチャの種類\nレイヤードアーキテクチャ\nヘキサゴナルアーキテクチャ\nオニオンアーキテクチャ\nクリーンアーキテクチャ\nオンラインイベントの感想\nアンカンファレンスの様子を見ようと思ったが、操作がイマイチ分からなくて断念した。。。\n自宅で見えるから、快適に視聴できた。\n今回は、Java16のアップデート内容があんまりないから、事例紹介が多かった印象。\nJavaは使ってないけど、内容的にはついていけるから問題なし。\nドメイン駆動系のセッションが多かった気がする。\nドメイン駆動は、何回で雰囲気で聞き流しちゃうけど、どっかでちゃんと勉強はしたいとは思うが、座学だけだと理解するのは無理な気がする。。。",
      "guid": "hatenablog://entry/26006613767252953",
      "categories": [
        "Java",
        "性能",
        "アーキテクチャ",
        "プログラミング",
        "学習"
      ],
      "isoDate": "2021-05-23T13:07:50.000Z",
      "isRead": true
    },
    {
      "title": "2021/05/17週 気づきと振り返り はーやくこいこいボーナス日",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/05/23/213055",
      "pubDate": "Sun, 23 May 2021 21:30:55 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>c</h2>\n\n<h3>テスト用のプログラムを実行したい</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>をほとんどやったことがなかったので、この実装はイケるのか？って思うことがたまにある。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のときは、クラスを適当に作って試してたけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>のビルドプロセスが分からなかったので、どうやればいいんだろうと思って調べた。</p>\n\n<p>やることは<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>と同じで、ビルド→実行。<br />\nビルドして出来上がるのがexeってのが、違和感あったけど、とくに問題はなかった。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/csc\">csc</a>で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>してできたexeを叩いて、コンソール出力内容とかで試してた。<br />\n自分で作ったexeだから問題ないはずだけど、なんかやましい気持ちになる。</p>\n\n<h3>拡張メソッド</h3>\n\n<p>既存の型やクラスに、元の型の変更や継承をすることなく、新たなメソッドを追加できる仕組み。</p>\n\n<p>頭では理解しているが、どういったデメリットがあるか、考えが及ばなかった。。。</p>\n\n<p>提供されている利用頻度が高いクラスに対して拡張メソッドを追加してしまった。。。<br />\nその結果、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C9%D4%CB%DC%B0%D5\">不本意</a>なところからも呼び出せるようになったりすることを後で知った。<br />\nしかも、定義場所がクラスから離れた場所にできるので、可読性を著しく下げるなってのを感じた。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>にない機能に触れるときは、その機能がもつ本質部分の見極めをちゃんとしたほうがいいなと感じましたとさ。</p>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9\">エンコード</a></h3>\n\n<p>デフォルト設定は辞めて、なるべく書く。<br />\n明示することで設計と実装の差異をなくしたほうがいい。</p>\n\n<p>あと、最初に気をつけようねって話しても、知らぬ間にバグとして入り込んでくるから、恐ろしい存在だなと思った。。。</p>\n\n<h2>チーム</h2>\n\n<h3>情報伝達</h3>\n\n<p>やりとりで、意思が伝わってない場合がある。<br />\nその場合は中間に入れるように動くと円滑に意思伝達できる</p>\n\n<h3>チーム雰囲気大事</h3>\n\n<p>中が悪いと、意思疎通ができてないときに誰も合いの手を入れてくれないので時間がかかる。<br />\n圧倒的当事者意識をなくす要因になるので、チーム雰囲気ってのは大切だなと思う。</p>\n\n<p>強権を発動したり、相手を罵倒するのは、人間的にもどうかと思ってしまうな。。。</p>\n\n<h1>その他雑記</h1>\n\n<h2>料理</h2>\n\n<p>今週は、これといって優勝作品は作れなかったが、牛丼に初めてチャレンジした。<br />\nやっぱり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%C8%CC%EE%B2%C8\">吉野家</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%BE%B2%B0\">松屋</a>は、すごいんだなって思った。<br />\n作れるには作れたんだが、肉に味が思ったよりつかなかった。。。<br />\n玉ねぎや汁は、無茶苦茶美味いんだけど、肉が思ったほどではなかった。<br />\n何かコツがあるのだろうか？</p>\n\n<p>そう言えば、もらったギフト券でミキサーを買った。<br />\nミキサーでバナナスムー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC\">ジー</a>を作ったのだが、そもそもスムー<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC\">ジー</a>を飲んだことがないので、成功しているのか失敗しているのかよく分かってないんだよね。。。<br />\nとりあえず、飲めるレベルのものはできている。</p>\n\n<h2>オンラインイベント</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JJUG\">JJUG</a>のオンラインイベント出たのだが、他にもやってるのあるのだろうか？<br />\nオンラインイベントの検索サイトって、どこかにあるのかな？</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%F3%A5%D7%A5%E9\">ガンプラ</a></h2>\n\n<p>最近、また<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%F3%A5%D7%A5%E9\">ガンプラ</a>作るようになったのだが、塗装環境を作ろうか悩み中。<br />\n一人暮らしだけど、どうしても塗装ブースが欲しいんだよね。<br />\nムラなく塗れるって、そうとうすごいことだと思うんだよね。<br />\nとりあえず、ボーナスの使いみちは気まった。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nc\n\nテスト用のプログラムを実行したい\nC#をほとんどやったことがなかったので、この実装はイケるのか？って思うことがたまにある。\nJavaのときは、クラスを適当に作って試してたけど、C#のビルドプロセスが分からなかったので、どうやればいいんだろうと思って調べた。\nやることはjavaと同じで、ビルド→実行。\ncscでコンパイルしてできたexeを叩いて、コンソール出力内容とかで試してた。\n拡張メソッド\n既存の型やクラスに、元の型の変更や継承をすることなく、新たなメソッドを追加できる仕組み。\n頭では理解しているが、どういったデメリットがあるか、考えが及ばなかった。。。\n提供されている利用頻度が高いクラスに対して拡張メソッドを追加してしまった。。。\n不本意なところからも呼び出せるようになったりすることを後で知った。\nJavaにない機能に触れるときは、その機能がもつ本質部分の見極めをちゃんとしたほうがいいなと感じましたとさ。\nエンコード\nデフォルト設定は辞めて、なるべく書く。\nあと、最初に気をつけようねって話しても、知らぬ間にバグとして入り込んでくるから、恐ろしい存在だなと思った。。。\nチーム\n情報伝達\nやりとりで、意思が伝わってない場合がある。\nチーム雰囲気大事\n中が悪いと、意思疎通ができてないときに誰も合いの手を入れてくれないので時間がかかる。\n強権を発動したり、相手を罵倒するのは、人間的にもどうかと思ってしまうな。。。\nその他雑記\n料理\n今週は、これといって優勝作品は作れなかったが、牛丼に初めてチャレンジした。\n吉野家や松屋は、すごいんだなって思った。\nそう言えば、もらったギフト券でミキサーを買った。\nジーを作ったのだが、そもそもスムージーを飲んだことがないので、成功しているのか失敗しているのかよく分かってないんだよね。。。\nオンラインイベント\nJJUGのオンラインイベント出たのだが、他にもやってるのあるのだろうか？\nガンプラ\n最近、またガンプラ作るようになったのだが、塗装環境を作ろうか悩み中。\n一人暮らしだけど、どうしても塗装ブースが欲しいんだよね。\nムラなく塗れるって、そうとうすごいことだと思うんだよね。\nとりあえず、ボーナスの使いみちは気まった。",
      "guid": "hatenablog://entry/26006613764802086",
      "categories": [
        "C#",
        "プログラミング",
        "メンタル",
        "チーム",
        "開発環境",
        "思ひ出",
        "学習"
      ],
      "isoDate": "2021-05-23T12:30:55.000Z"
    },
    {
      "title": "2021/05/10週 気づきと振り返り 広い作業スペースはサイコー",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/05/16/225837",
      "pubDate": "Sun, 16 May 2021 22:58:37 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/dos\">dos</a>バッチ</h2>\n\n<p>ちょっとしたものを作りたくなって、調査した。<br />\n結局、ネットワーク超えが問題になってきたので、バッチファイルの作成は辞めたが、とりあえずメモったのを乗せる。</p>\n\n<h3>echoオフ</h3>\n\n<p>やり方としては、下記がある。\n1. コマンド前に@につける\n2. echo off</p>\n\n<p>個人的な感想としては、コマンド単位でやれる@を付けたほうが、誤削除によるソース紛失の可能性が低くなるのではないかと感じた。</p>\n\n<h3>ネットワーク越しのコピーは不可</h3>\n\n<p>ネットワーク越しにファイルをコピーしてこようとしたら、パスがあってるはずなのに、コピーできなかった。<br />\n理由は、許容してないから。<br />\nどう対応すればいいかというと、ネットワークドライブでアクセスできるようにすれば、大丈夫らしい。</p>\n\n<p>調査して原因が分かって、さらにそこからネットワークドライブの設定がいることに萎えて、やるのを辞めた。</p>\n\n<h2>C</h2>\n\n<h3>namespaceでクラスが競合</h3>\n\n<p>namespaceで同じクラスがあって競合問題が発生していた。</p>\n\n<p>gitでブランチ開発しているのだが、別々のブランチで、同じnamespace・同じクラス名なやつがあって、開発ブランチに両方入れたときにビルドエラーとなった。。。</p>\n\n<p>どっちも自分がレビューしていたけど、気づかねぇよ。。。<br />\nローカルの開発環境でビルドエラーがないから、問題ないと思うじゃん？</p>\n\n<p>クラス構成レベルで、そういうのを考えないといけないな～と個人的に思った。</p>\n\n<h2>その他</h2>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/dell\">dell</a>ノートPCでファンクションロック</h3>\n\n<p>fn+escでファンクション固定化できる。<br />\nF2やF5、F7あたりをよく使うので、毎回fn押さずに押下して、毎回イラツイていたが、少しは軽減できそう。</p>\n\n<p>ファンクションロックしてないときのエクセル操作は、かなり苦痛だった。。。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/sql\">sql</a></h2>\n\n<h3>with句</h3>\n\n<p>いまいち、使い方が分からん。<br />\nサブクエリと一緒な気がするが。。。<br />\nサブクエリの使い方を間違わなければ、基本使わなくてもいい気がしている。<br />\n何度も使えるってのは理解しているが、いかんせん、慣れてないせいか読みづらい。。。<br />\nあんまり使ってこなかったので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3\">アンチパターン</a>をよく分かってないんだよね。。。</p>\n\n<p>どこかのタイミングで、調査して内容まとめた方がいいのかも知れない。</p>\n\n<h1>料理</h1>\n\n<p>今週も、結構な頻度で料理した。<br />\n麻婆豆腐は、もうレギュラー化しつつある。<br />\nあとは、卵で閉じるのって、すごく簡単だなって思った。<br />\n高校のときに、家庭科で親子丼の作り方を覚えたが、あれの流用が簡単すぎてやばい。<br />\n卵で閉じてしまえば、そんなに大崩することはないなって思った。<br />\n今週は、豚肉、カキフライを閉じて丼ものにしていた。<br />\nあと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%CB\">カニ</a>玉とかも作った。</p>\n\n<h2>今週の優勝</h2>\n\n<p>自炊した中で、一番良くできたのは、きゅうりの塩漬け。<br />\n簡単だけど、むちゃくちゃ美味かった。<br />\n塩で揉み込んで１日置いたんだが、かなり美味しく仕上がった。<br />\n米が進むのと、酒のつまみにしたりして食べてた。<br />\n普段、酒は飲まないのだが、作ったのを味見して食べたら、無性に飲みたくなった。<br />\n久々に酒を飲んだ気がする。<br />\n飲んだのは、軽いチューハイだけど、たまに飲むのもいいものだと思った。</p>\n\n<p>今まで、市販の浅漬の素とか買ってたけど、調味料があるなら、自家製の方がうまいなって思った。</p>\n\n<h1>自宅の作業環境</h1>\n\n<p>かなり変えた。<br />\nまず、テーブルを座卓からＬ字テーブルに切り替えた。<br />\n以前から、作業スペースの狭さが気になっていたので変えたが、ものすごく快適<br />\nリモート勤務なんで、ノートPC配布されているのだが、今までだと自分のPCと一緒にテーブルに置くことができなかった。<br />\nしかし、Ｌ時になったので、簡単におけるし、作業を切り替えられるのがとてもいい。<br />\n椅子も、それに合わせて変えた。<br />\n現場で使うような回転椅子に変えた。肘掛けは、壊しやすいので、強度がありそうなやつを使っている。<br />\n前の座椅子は、安物だったせいか、首がやたらと疲れるのだが、今は、そういったことはなく、椅子の上で寝られるくらい快適</p>\n\n<p>安く作業環境を済ませようとしていたが、PCの作業環境は、スペースを確保するのが重要だと思った。<br />\n狭い範囲では、かなり苦痛を感じる。</p>\n\n<h1>直近の目標</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> SE 11 Goldの試験対策本が出てたので、8月 or 11月目標で 8→11に乗り換えたい</p>\n\n<h1>参考サイト</h1>\n\n<p><a href=\"https://www.javadrive.jp/command/bat/index2.html\">&#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x30D7;&#x30ED;&#x30F3;&#x30D7;&#x30C8; | &#x30A8;&#x30B3;&#x30FC;&#x6A5F;&#x80FD;&#x306E;ON/OFF&#x3092;&#x5207;&#x308A;&#x66FF;&#x3048;&#x308B;(ECHO)</a></p>\n\n<p><a href=\"https://www.pc-jozu.com/trouble/function-key-change/\">DELL&#x306E;&#x30CE;&#x30FC;&#x30C8;&#x30D1;&#x30BD;&#x30B3;&#x30F3;&#x3067;&#x30D5;&#x30A1;&#x30F3;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x30AD;&#x30FC;&#x304C;&#x4F7F;&#x3048;&#x306A;&#x3044;&#x6642;&#x306E;&#x5BFE;&#x51E6;&#x6CD5; &#xFF5C; PC&#x4E0A;&#x624B;</a></p>\n\n<p><a href=\"https://qiita.com/tetocha/items/cb10996b90dcc7aabe25\">SQL&#x306E;WITH&#x53E5;&#x306E;&#x4F7F;&#x3044;&#x65B9;&#x3084;&#x611F;&#x60F3; - Qiita</a></p>\n\n<p><a href=\"https://zukucode.com/2017/09/sql-with.html\">SQL WITH&#x53E5;&#x3067;&#x540C;&#x3058;SQL&#x3092;&#xFF11;&#x3064;&#x306E;SQL&#x306B;&#x5171;&#x901A;&#x5316;&#x3059;&#x308B;</a></p>\n",
      "contentSnippet": "業務こなしての問題・気づき\ndosバッチ\nちょっとしたものを作りたくなって、調査した。\nechoオフ\nやり方としては、下記がある。\n1. コマンド前に@につける\n2. echo off\n個人的な感想としては、コマンド単位でやれる@を付けたほうが、誤削除によるソース紛失の可能性が低くなるのではないかと感じた。\nネットワーク越しのコピーは不可\nネットワーク越しにファイルをコピーしてこようとしたら、パスがあってるはずなのに、コピーできなかった。\n調査して原因が分かって、さらにそこからネットワークドライブの設定がいることに萎えて、やるのを辞めた。\nC\n\nnamespaceでクラスが競合\nnamespaceで同じクラスがあって競合問題が発生していた。\ngitでブランチ開発しているのだが、別々のブランチで、同じnamespace・同じクラス名なやつがあって、開発ブランチに両方入れたときにビルドエラーとなった。。。\nどっちも自分がレビューしていたけど、気づかねぇよ。。。\nクラス構成レベルで、そういうのを考えないといけないな～と個人的に思った。\nその他\ndellノートPCでファンクションロック\nfn+escでファンクション固定化できる。\nファンクションロックしてないときのエクセル操作は、かなり苦痛だった。。。\nsql\nwith句\nいまいち、使い方が分からん。\nアンチパターンをよく分かってないんだよね。。。\nどこかのタイミングで、調査して内容まとめた方がいいのかも知れない。\n料理\n今週も、結構な頻度で料理した。\nカニ玉とかも作った。\n今週の優勝\n自炊した中で、一番良くできたのは、きゅうりの塩漬け。\n今まで、市販の浅漬の素とか買ってたけど、調味料があるなら、自家製の方がうまいなって思った。\n自宅の作業環境\nかなり変えた。\n安く作業環境を済ませようとしていたが、PCの作業環境は、スペースを確保するのが重要だと思った。\n直近の目標\nJava SE 11 Goldの試験対策本が出てたので、8月 or 11月目標で 8→11に乗り換えたい\n参考サイト\nコマンドプロンプト | エコー機能のON/OFFを切り替える(ECHO)\nDELLのノートパソコンでファンクションキーが使えない時の対処法 ｜ PC上手\nSQLのWITH句の使い方や感想 - Qiita\nSQL WITH句で同じSQLを１つのSQLに共通化する",
      "guid": "hatenablog://entry/26006613762320315",
      "categories": [
        "C#",
        "体調管理",
        "日記",
        "料理",
        "恥晒し",
        "思ひ出",
        "学習",
        "試験"
      ],
      "isoDate": "2021-05-16T13:58:37.000Z"
    },
    {
      "title": "2021/04/26週+5/3週 気づきと振り返り GW明けは休み疲れがひどかった。。。",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/05/08/103607",
      "pubDate": "Sat, 08 May 2021 10:36:07 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a></h2>\n\n<p>やったことがないのだが、なぜかレビューアにされてしまった。。。</p>\n\n<h3>using</h3>\n\n<p>用途がいろいろあって、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>のimportと同じ認識でいると、たまに戸惑うことがあった。</p>\n\n<p>使い方としては、下記がある。</p>\n\n<ul>\n<li>usingディレクティブ\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>のimportと同義</li>\n</ul>\n</li>\n<li>using<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9\">エイリアス</a>ディレクティブ\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>のimportとほぼ同義。usingディレクティブとの違いが分かりにくいが、別名をつけられるってのがミソ</li>\n<li>typescriptのimport／<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>のrequireに近い感覚で使える</li>\n</ul>\n</li>\n<li>using静的ディレクティブ\n\n<ul>\n<li>usingディレクティブの静的メソッド・静的フィールドと同じ\n\n<ul>\n<li>なんか、静的（せいてき）ってタイピングしてると、やましい気持ちになる</li>\n</ul>\n</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>のstatic importみたいな感じ？</li>\n</ul>\n</li>\n<li>using<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8\">ステートメント</a>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>のtry-with-resourceと同じ</li>\n</ul>\n</li>\n</ul>\n\n\n<p>こうやって書き出してみると、using<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8\">ステートメント</a>が厄介。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>エンジニアからすると、try-with-resourceの感覚があるので、「なんでここでusing使えるんだ？？」ってなる。</p>\n\n<p>イメージとしては、typescriptのimport／<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>のrequrireに近い。<br />\nusing<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8\">ステートメント</a>が、いままでやってきた言語と違う。</p>\n\n<p>実際にコードを書いているor見ているのだが、利用用途としては、usingディレクティブ／using<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%C6%A1%BC%A5%C8%A5%E1%A5%F3%A5%C8\">ステートメント</a>が多め。（ほぼusingディレクティブ）</p>\n\n<h3>namespace</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>だとpackageの認識。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>だと、package=<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リ構成で、一致してないと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになるのであまり気にしてなかったが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>でファイル移動した際、namespaceとフォルダ構成が一致しなくなってもビルドが問題なかったので、気づかなかった。。。</p>\n\n<p>namespaceを考慮しないで実装すると、無秩序になってファイル重複が頻発しそうなので、ファイル移動する場合は、namespaceを考慮する必要があるなと感じた。</p>\n\n<p>ビルドの定義で、検出できたりしないのだろうか？</p>\n\n<h2>レビューアとしての学び</h2>\n\n<p>コードレビューをしているのだが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>ほとんどやったことない人がコードレビューやって大丈夫なんですかね。。。？</p>\n\n<h3>初期化場所と利用箇所は近いほうがいい</h3>\n\n<ul>\n<li>初期化を重複してやってしまう可能性が高い\n\n<ul>\n<li>すべきではない理由\n\n<ul>\n<li>メモリを無駄に使う</li>\n<li>初期化コストが膨れると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF\">ボトルネック</a>になる</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>作っていく過程で、利用しなくなっても変数だけ残るリスクを減らせる</li>\n</ul>\n\n\n<p>レビューしていて、初期化の場所が離れていると上の現象がよく発生した気がする。<br />\n特に、後者は気づきにくいから厄介だった。。。</p>\n\n<h3>仕様の認識</h3>\n\n<p>たまに、設計書に書いてあることをそのまま実装して出してくる人がいるのだが、明らかに書いてあるまま実装してると、仕様で満たしたいことが実現できていないor矛盾があるのに気づかない状態でくることがある。<br />\nそういうのは、後続のテスト工程に流さないようにしたいので、注意してみている。（テストで発覚したときの戻り<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4\">工数</a>が大きいので、レビューで取れると<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4\">工数</a>削減効果が大きいから）</p>\n\n<p>上の問題が出てくるのは、仕方ないが、出てくる人は、たいてい、経歴が短い人が多い。<br />\nおそらく、仕様がなんであるのか、把握しきれていないのが問題だと思う。<br />\nもしくは、実装した結果の想像ができていないとか。<br />\n仕様→実装の落とし込みとは別に、実装した結果、どういう仕様になっているかが想像できないと発生する気がする。<br />\nこれは、実装→テストを反復してやって、経験値を持つことが重要な気がする。</p>\n\n<p>レビューアとして活動しているときは、上記指摘をする場合、あるべき仕様・現在の実装した結果できあがる仕様を明示して、伝えるようにしている。<br />\n理由としては、「実装→テストの反復」を、頭の中で反復してやってもらうため。<br />\n成果が出てくるかは、まだ分からない。<br />\n今のプロジェクト終わるころにどうなっているかで、レビューの効果測定しようと思う。</p>\n\n<p>頭の中で終わらせるのって、化学だと「思考実験」って言うんだっけ？<br />\nコードレビューでは、いかにレビューイに思考テストをやってもらうかが重要だと思いました。</p>\n\n<h3>if文志向は危険！！（迫真）</h3>\n\n<p>結構、if文を使いたがる開発者が多いんだなって、コードレビューしていて感じる。</p>\n\n<p>個人的に、if文を回避するようにしたほうがいいと思ってる。<br />\n理由としては、テストのしやすさがに関わってくるから。</p>\n\n<p>if文がいたるところにあると、それをテストする必要性が出てくる。<br />\nケース網羅してくださいって言われると死んじゃうから、なるべくif文を書かない手法を取るようにしている。<br />\n条件網羅でもキツイので、なるべくif文は辞めたい。</p>\n\n<p>まだテスターだったころ、if文が大量にあるプログラムのテストをしたことがあるのだが、テストケースと予定に無理があるぜよ。。。<br />\nグロッキー状態になったことがあるので、if文を減らせるなら、なるべく減らせる方向でレビューしている。</p>\n\n<p>回避手法としては、定義で紐付けさせておくとか、普遍的なものは何かを見出して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>適用するようにしている。<br />\n適用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>は、StateやStorategyなど振る舞いに関するパターンを適用するとif文が減らせるので、多用している。</p>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>は設計者でも必要</h3>\n\n<p>今のプロジェクトは、レビューアとして活動しているので、設計者と実装者の間に入っていることが多い。<br />\n特に仕様の認識を実装者に噛み砕いて説明したり、逆に、設計→実装するにあたって、実装問題があれば、設計者に要点を説明して問題を把握してもらうように動くことが多い。<br />\nだいたい前者が大半だけど、後者は、発生するといがいと面倒なんだよね。。。<br />\n認識の違いをすり合わせるってのが、むちゃくちゃ時間がかかる。</p>\n\n<p>話がそれたが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>の知識は、設計者にも必要だと感じる理由下記の通り\n- 実装コストに関わるから。<br />\n- 必要な情報が散見されるのが防げると思うから。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>の性質上、再利用に重点を置いているので、知っていると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>を適用するために必要な情報が集約され、結果的に実装しやすく、意図が伝わりやすい設計書になると思う。</p>\n\n<p>ただ、問題として、過度に適用した結果、ワケワカメ状態になる危険もある。<br />\n用法用量を守るってのが大切だと考えている。<br />\n実装でも、たまに過度に適用しすぎて、かえって複雑になっているケースがたまにある。<br />\nここらへんの感覚を磨きたいのだが、何かいい方法がないか、模索中</p>\n\n<h1>料理</h1>\n\n<h2>今週の優勝</h2>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%DC%A4%E2%A4%E2%C6%F9\">鶏もも肉</a>の照焼</h3>\n\n<p>いままで美味くできなかったが、料理動画を数本見て勉強した結果、パリ皮で噛むと肉汁が溢れ出てくるものが作れた。<br />\n包丁で切ったら肉汁が大量に出てきたときは、かなりビビった。</p>\n\n<p>肉の下処理がちゃんとできてなかったから、皮が縮まって、美味く火が通らず、ムラがでてたことが、今までできなかったところだな。<br />\n肉系は、下処理がやる／やらないで味がたいぶ変わる。</p>\n\n<p>マジで、店で出せるレベルのものができてしまって、「天才か」って思った。<br />\nあまりにできが良かったので、もしかすると、もう、このレベルのものはできないのかも知れない。。。</p>\n\n<p>食べたときの幸福度がダンチだった。</p>\n\n<h2>反省点</h2>\n\n<h3>ホットサンド</h3>\n\n<p>キャベツを使う場合、千切りにしたほうがいい。<br />\nなぜなら、食べたときにちぎりにくいので、キャベツがベロっと出てきてしまい、口周りを火傷したり、汚す可能性がでてくる。。。</p>\n\n<h3>盛り付け</h3>\n\n<p>なんか美味くできないんだよね。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%DC%A4%E2%A4%E2%C6%F9\">鶏もも肉</a>の照り焼きは、すごく美味くできたんだけど、盛り付けが映えない感じになってしまって、残念だった。。。</p>\n\n<h1>雑記</h1>\n\n<h2>生活習慣</h2>\n\n<p>GWが終わったが、休み明けの作業がものすごくしんどかった。。。<br />\n就寝サイクルが壊れかけたのが、まずかったな。。。</p>\n\n<p>次の長期休暇は、就寝サイクルを壊さないように気をつけよう。。。</p>\n\n<h2>自宅が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%BA%BF%C0%A4%C8%BB%FE%A4%CE%C9%F4%B2%B0\">精神と時の部屋</a></h2>\n\n<p>最近、部屋にこもりっきりで、時間の感覚が壊れてる。<br />\n日の光があんまり入ってこないので、時間感覚がおかしいときがある。<br />\n気づいたら実は夕方とか、気づいたらてっぺん過ぎてるとかザラにある。<br />\nだから、生活習慣が壊れるわけなのだが。。。<br />\nもう、俺の部屋が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%BA%BF%C0%A4%C8%BB%FE%A4%CE%C9%F4%B2%B0\">精神と時の部屋</a>状態。</p>\n\n<p>でも、精神がおかしくなることはない。<br />\n料理したり、部屋を掃除してからは、むしろ自粛を楽しんている。<br />\n１日中部屋に居てもなんとも感じないのだが、これで苦痛を感じている人がいるってことが信じられない。<br />\nむしろ、以前よりメンタル面が安定した気もする。</p>\n\n<p>あらためて、自分は創作活動が好きなんだと感じた。<br />\n最近は料理だったが、今度は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AC%A5%F3%A5%D7%A5%E9\">ガンプラ</a>に手を出したい状態になってきた。<br />\nボーナスも近いし、作業環境整えたいのが、直近の夢<br />\n少なくとも、塗装環境は作りたい</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nC#\nやったことがないのだが、なぜかレビューアにされてしまった。。。\nusing\n用途がいろいろあって、javaのimportと同じ認識でいると、たまに戸惑うことがあった。\n使い方としては、下記がある。\nusingディレクティブ\n\n\njavaのimportと同義\nusingエイリアスディレクティブ\n\n\njavaのimportとほぼ同義。usingディレクティブとの違いが分かりにくいが、別名をつけられるってのがミソ\ntypescriptのimport／javascriptのrequireに近い感覚で使える\nusing静的ディレクティブ\n\n\nusingディレクティブの静的メソッド・静的フィールドと同じ\n\n\nなんか、静的（せいてき）ってタイピングしてると、やましい気持ちになる\njavaのstatic importみたいな感じ？\nusingステートメント\n\n\njavaのtry-with-resourceと同じ\nこうやって書き出してみると、usingステートメントが厄介。\nJavaエンジニアからすると、try-with-resourceの感覚があるので、「なんでここでusing使えるんだ？？」ってなる。\nイメージとしては、typescriptのimport／javascriptのrequrireに近い。\nステートメントが、いままでやってきた言語と違う。\n実際にコードを書いているor見ているのだが、利用用途としては、usingディレクティブ／usingステートメントが多め。（ほぼusingディレクティブ）\nnamespace\njavaだとpackageの認識。\njavaだと、package=ディレクトリ構成で、一致してないとコンパイルエラーになるのであまり気にしてなかったが、C#でファイル移動した際、namespaceとフォルダ構成が一致しなくなってもビルドが問題なかったので、気づかなかった。。。\nnamespaceを考慮しないで実装すると、無秩序になってファイル重複が頻発しそうなので、ファイル移動する場合は、namespaceを考慮する必要があるなと感じた。\nビルドの定義で、検出できたりしないのだろうか？\nレビューアとしての学び\nコードレビューをしているのだが、C#ほとんどやったことない人がコードレビューやって大丈夫なんですかね。。。？\n初期化場所と利用箇所は近いほうがいい\n初期化を重複してやってしまう可能性が高い\n\n\nすべきではない理由\n\n\nメモリを無駄に使う\n初期化コストが膨れると、ボトルネックになる\n作っていく過程で、利用しなくなっても変数だけ残るリスクを減らせる\nレビューしていて、初期化の場所が離れていると上の現象がよく発生した気がする。\n仕様の認識\nたまに、設計書に書いてあることをそのまま実装して出してくる人がいるのだが、明らかに書いてあるまま実装してると、仕様で満たしたいことが実現できていないor矛盾があるのに気づかない状態でくることがある。\n工数が大きいので、レビューで取れると工数削減効果が大きいから）\n上の問題が出てくるのは、仕方ないが、出てくる人は、たいてい、経歴が短い人が多い。\nレビューアとして活動しているときは、上記指摘をする場合、あるべき仕様・現在の実装した結果できあがる仕様を明示して、伝えるようにしている。\n頭の中で終わらせるのって、化学だと「思考実験」って言うんだっけ？\nif文志向は危険！！（迫真）\n結構、if文を使いたがる開発者が多いんだなって、コードレビューしていて感じる。\n個人的に、if文を回避するようにしたほうがいいと思ってる。\nif文がいたるところにあると、それをテストする必要性が出てくる。\nまだテスターだったころ、if文が大量にあるプログラムのテストをしたことがあるのだが、テストケースと予定に無理があるぜよ。。。\n回避手法としては、定義で紐付けさせておくとか、普遍的なものは何かを見出してデザインパターン適用するようにしている。\nデザインパターンは、StateやStorategyなど振る舞いに関するパターンを適用するとif文が減らせるので、多用している。\nデザインパターンは設計者でも必要\n今のプロジェクトは、レビューアとして活動しているので、設計者と実装者の間に入っていることが多い。\n話がそれたが、デザインパターンの知識は、設計者にも必要だと感じる理由下記の通り\n- 実装コストに関わるから。\nデザインパターンの性質上、再利用に重点を置いているので、知っていると、デザインパターンを適用するために必要な情報が集約され、結果的に実装しやすく、意図が伝わりやすい設計書になると思う。\nただ、問題として、過度に適用した結果、ワケワカメ状態になる危険もある。\n料理\n今週の優勝\n鶏もも肉の照焼\nいままで美味くできなかったが、料理動画を数本見て勉強した結果、パリ皮で噛むと肉汁が溢れ出てくるものが作れた。\n肉の下処理がちゃんとできてなかったから、皮が縮まって、美味く火が通らず、ムラがでてたことが、今までできなかったところだな。\nマジで、店で出せるレベルのものができてしまって、「天才か」って思った。\n食べたときの幸福度がダンチだった。\n反省点\nホットサンド\nキャベツを使う場合、千切りにしたほうがいい。\n盛り付け\nなんか美味くできないんだよね。。。\n鶏もも肉の照り焼きは、すごく美味くできたんだけど、盛り付けが映えない感じになってしまって、残念だった。。。\n雑記\n生活習慣\nGWが終わったが、休み明けの作業がものすごくしんどかった。。。\n次の長期休暇は、就寝サイクルを壊さないように気をつけよう。。。\n自宅が精神と時の部屋\n最近、部屋にこもりっきりで、時間の感覚が壊れてる。\n精神と時の部屋状態。\nでも、精神がおかしくなることはない。\nあらためて、自分は創作活動が好きなんだと感じた。\nガンプラに手を出したい状態になってきた。\nボーナスも近いし、作業環境整えたいのが、直近の夢\n少なくとも、塗装環境は作りたい",
      "guid": "hatenablog://entry/26006613722463818",
      "categories": [
        "C#",
        "プログラミング",
        "日記",
        "恥晒し",
        "学習",
        "料理",
        "レビュー",
        "デザインパターン",
        "ドキュメント",
        "メンタル",
        "体調管理",
        "情報収集",
        "開発環境"
      ],
      "isoDate": "2021-05-08T01:36:07.000Z"
    },
    {
      "title": "windowsでnpmの更新に失敗していたので解消して優勝する",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/04/29/151537",
      "pubDate": "Thu, 29 Apr 2021 15:15:37 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<ul class=\"table-of-contents\">\n    <li><a href=\"#発端\">発端</a></li>\n    <li><a href=\"#環境\">環境</a></li>\n    <li><a href=\"#問題\">問題</a></li>\n    <li><a href=\"#解決方法\">解決方法</a><ul>\n            <li><a href=\"#npm-updateで失敗\">npm updateで失敗</a></li>\n            <li><a href=\"#nodistで最新バージョンを挿れて優勝していく\">nodistで最新バージョンを挿れて優勝していく</a><ul>\n                    <li><a href=\"#nodeのバージョン確認\">nodeのバージョン確認</a></li>\n                    <li><a href=\"#使えるnodeのバージョンを調査\">使えるnodeのバージョンを調査</a></li>\n                    <li><a href=\"#nodeをインストール\">nodeをインストール</a></li>\n                    <li><a href=\"#npmをnodeに合わせる\">npmをnodeに合わせる</a></li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li><a href=\"#雑記\">雑記</a></li>\n    <li><a href=\"#参考サイト\">参考サイト</a></li>\n</ul>\n\n<h1 id=\"発端\">発端</h1>\n\n<p>久々にnpmで何か作ろうとして、<code>npm init -y</code> したら、以下のメッセージが出てきた。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>   ╭────────────────────────────────────────────────────────────────╮\n   │                                                                │\n   │      New major version of npm available! 6.14.5 -&gt; 7.11.1      │\n   │   Changelog: https://github.com/npm/cli/releases/tag/v7.11.1   │\n   │               Run npm install -g npm to update!                │\n   │                                                                │\n   ╰────────────────────────────────────────────────────────────────╯</pre>\n\n\n<p>言われた通りにアップデートしようとしたら、若干ハマったので、記録に残す。<br />\nなんか、タイトルが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%CE%A5%D9\">ラノベ</a>並みに長くなってしまったな。。。</p>\n\n<h1 id=\"環境\">環境</h1>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ npm -v\n6.14.5</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>の内容貼り付け</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>バージョン: 1.55.2 (system setup)\nコミット: 3c4e3df9e89829dce27b7b5c24508306b151f30d\n日付: 2021-04-13T09:35:57.887Z\nElectron: 11.3.0\nChrome: 87.0.4280.141\nNode.js: 12.18.3\nV8: 8.7.220.31-electron.0\nOS: Windows_NT x64 10.0.19041</pre>\n\n\n<h1 id=\"問題\">問題</h1>\n\n<p>言われたとおり、<code>npm install -g npm</code> したんだが、下記のエラーが。。。。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ npm install -g npm\nnpm ERR! code EEXIST\nnpm ERR! path C:\\Program Files (x86)\\Nodist\\bin\\node_modules\\npm\\bin\\npm-cli.js\nnpm ERR! dest C:\\Program Files (x86)\\Nodist\\bin\\npm.cmd\nnpm ERR! EEXIST: file already exists, cmd shim &#39;C:\\Program Files (x86)\\Nodist\\bin\\node_modules\\npm\\bin\\npm-cli.js&#39; -&gt; &#39;C:\\Program Files (x86)\\Nodist\\bin\\npm.cmd&#39;\nnpm ERR! File exists: C:\\Program Files (x86)\\Nodist\\bin\\npm.cmd\nnpm ERR! Remove the existing file and try again, or run npm\nnpm ERR! with --force to overwrite files recklessly.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\XXXXXX\\AppData\\Roaming\\npm-cache\\_logs\\2021-04-29T05_27_15_503Z-debug.log</pre>\n\n\n<p>※XXXXXXは、伏字</p>\n\n<p>なんで、言われた通りにしたらエラーが？？？</p>\n\n<h1 id=\"解決方法\">解決方法</h1>\n\n<h2 id=\"npm-updateで失敗\">npm updateで失敗</h2>\n\n<p>調べた結果、下記のコマンドでアップデートできると知って、ウッキウキでコマンドを実行</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>npm update -g npm</pre>\n\n\n<p>そして、バージョン確認</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ npm -v\n6.14.5</pre>\n\n\n<p>なんで？？？ <br />\n・・・思考がとまること１分・・・<br />\nよくよく考えたら、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/windows\">windows</a>環境だと、nodistでnodeとnpmのバージョン管理していたことを思い出した。</p>\n\n<h2 id=\"nodistで最新バージョンを挿れて優勝していく\">nodistで最新バージョンを挿れて優勝していく</h2>\n\n<p>nodistがバージョンアップを止めてそうだったので、nodistからアップデートを行うようにする。</p>\n\n<p>やることは、下記の通り</p>\n\n<ol>\n<li>nodeのバージョン確認</li>\n<li>使えるnodeのバージョンを調査</li>\n<li>使うnodeをインストール</li>\n<li>npmをnodeに合わせる</li>\n</ol>\n\n\n<p>順番に説明する。</p>\n\n<h3 id=\"nodeのバージョン確認\">nodeのバージョン確認</h3>\n\n<p>「敵を知り己を知れば百戦危うからず」と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C2%B9%BB%D2\">孫子</a>の兵法でも言ってるので、まずは、どういう状況に置かれているのか調べる。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ node -v\nv14.5.0</pre>\n\n\n<p>まずは、今のバージョン把握ＯＫ。</p>\n\n<h3 id=\"使えるnodeのバージョンを調査\">使えるnodeのバージョンを調査</h3>\n\n<p>使えるnodeのバージョンを調査する。セキュリティやパフォーマンスの観点から、最新版を利用したい。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ nodist dist\n～中略～\n  15.13.0\n  15.14.0\n  16.0.0</pre>\n\n\n<p>16.0.0が最新のLTSっぽいので、16.0.0をインストールすることに決定。</p>\n\n<h3 id=\"nodeをインストール\">nodeをインストール</h3>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>nodist use v7.2.0</pre>\n\n\n<p>なんか、インストールはいろんな文法があるみたいだけど、上記の文法が個人的には理解しやすかったので、上記コマンドでインストールする。</p>\n\n<p>終わったら、インストールできているか確認</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ node -v\nv16.0.0</pre>\n\n\n<p>大丈夫だね。</p>\n\n<h3 id=\"npmをnodeに合わせる\">npmをnodeに合わせる</h3>\n\n<p>npmとnodeは組み合わせが決まっているので、nodistを使って、最新nodeで使えるnpmを挿れて優勝していく。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ nodist npm match</pre>\n\n\n<p>上記が終わると、nodeに合致するnpmが使える状態になっているはず。<br />\n個人的には、7.11.xxxになっていて欲しい</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ npm -v\n7.10.0</pre>\n\n\n<p>ちょっと古いみたいだけど、ま、いっか。。。<br />\n準優勝くらいは、できたと思う。</p>\n\n<h1 id=\"雑記\">雑記</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/windows\">windows</a>だと、nodistで管理していたことを忘れる。。。<br />\nもう、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/windows\">windows</a>標準でライブラリ管理提供したほうがいいのではなかろうか？</p>\n\n<p>もしくは、<code>npm update</code>したときにnodistが何かメッセージ吐いてくれれば、あんまり悩まないのになぁ～とは思った。</p>\n\n<h1 id=\"参考サイト\">参考サイト</h1>\n\n<p><a href=\"https://qiita.com/yuch_i/items/3d5f562ac49e81705010\">&#x3088;&#x304F;&#x4F7F;&#x3046;npm&#x30B3;&#x30DE;&#x30F3;&#x30C9; - Qiita</a></p>\n\n<p><a href=\"https://qiita.com/ksh-fthr/items/fc8b015a066a36a40dc2\">[Node.js] Node.js &#x306E;&#x5C0E;&#x5165;(Windows&#x7DE8;) - Qiita</a></p>\n\n<p><a href=\"https://qiita.com/akkey2475/items/e0ea878a6b955efd9fba\">nodist&#x306E;&#x57FA;&#x672C;&#x64CD;&#x4F5C; - Qiita</a></p>\n",
      "contentSnippet": "発端\n環境\n問題\n解決方法\nnpm updateで失敗\nnodistで最新バージョンを挿れて優勝していく\nnodeのバージョン確認\n使えるnodeのバージョンを調査\nnodeをインストール\nnpmをnodeに合わせる\n雑記\n参考サイト\n発端\n久々にnpmで何か作ろうとして、npm init -y したら、以下のメッセージが出てきた。\n   ╭────────────────────────────────────────────────────────────────╮\n   │                                                                │\n   │      New major version of npm available! 6.14.5 -> 7.11.1      │\n   │   Changelog: https://github.com/npm/cli/releases/tag/v7.11.1   │\n   │               Run npm install -g npm to update!                │\n   │                                                                │\n   ╰────────────────────────────────────────────────────────────────╯\n言われた通りにアップデートしようとしたら、若干ハマったので、記録に残す。\nラノベ並みに長くなってしまったな。。。\n環境\n$ npm -v\n6.14.5\nvscodeの内容貼り付け\nバージョン: 1.55.2 (system setup)\nコミット: 3c4e3df9e89829dce27b7b5c24508306b151f30d\n日付: 2021-04-13T09:35:57.887Z\nElectron: 11.3.0\nChrome: 87.0.4280.141\nNode.js: 12.18.3\nV8: 8.7.220.31-electron.0\nOS: Windows_NT x64 10.0.19041\n問題\n言われたとおり、npm install -g npm したんだが、下記のエラーが。。。。\n$ npm install -g npm\nnpm ERR! code EEXIST\nnpm ERR! path C:\\Program Files (x86)\\Nodist\\bin\\node_modules\\npm\\bin\\npm-cli.js\nnpm ERR! dest C:\\Program Files (x86)\\Nodist\\bin\\npm.cmd\nnpm ERR! EEXIST: file already exists, cmd shim 'C:\\Program Files (x86)\\Nodist\\bin\\node_modules\\npm\\bin\\npm-cli.js' -> 'C:\\Program Files (x86)\\Nodist\\bin\\npm.cmd'\nnpm ERR! File exists: C:\\Program Files (x86)\\Nodist\\bin\\npm.cmd\nnpm ERR! Remove the existing file and try again, or run npm\nnpm ERR! with --force to overwrite files recklessly.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\XXXXXX\\AppData\\Roaming\\npm-cache\\_logs\\2021-04-29T05_27_15_503Z-debug.log\n※XXXXXXは、伏字\nなんで、言われた通りにしたらエラーが？？？\n解決方法\nnpm updateで失敗\n調べた結果、下記のコマンドでアップデートできると知って、ウッキウキでコマンドを実行\nnpm update -g npm\nそして、バージョン確認\n$ npm -v\n6.14.5\nなんで？？？ \nwindows環境だと、nodistでnodeとnpmのバージョン管理していたことを思い出した。\nnodistで最新バージョンを挿れて優勝していく\nnodistがバージョンアップを止めてそうだったので、nodistからアップデートを行うようにする。\nやることは、下記の通り\nnodeのバージョン確認\n使えるnodeのバージョンを調査\n使うnodeをインストール\nnpmをnodeに合わせる\n順番に説明する。\nnodeのバージョン確認\n「敵を知り己を知れば百戦危うからず」と孫子の兵法でも言ってるので、まずは、どういう状況に置かれているのか調べる。\n$ node -v\nv14.5.0\nまずは、今のバージョン把握ＯＫ。\n使えるnodeのバージョンを調査\n使えるnodeのバージョンを調査する。セキュリティやパフォーマンスの観点から、最新版を利用したい。\n$ nodist dist\n～中略～\n  15.13.0\n  15.14.0\n  16.0.0\n16.0.0が最新のLTSっぽいので、16.0.0をインストールすることに決定。\nnodeをインストール\nnodist use v7.2.0\nなんか、インストールはいろんな文法があるみたいだけど、上記の文法が個人的には理解しやすかったので、上記コマンドでインストールする。\n終わったら、インストールできているか確認\n$ node -v\nv16.0.0\n大丈夫だね。\nnpmをnodeに合わせる\nnpmとnodeは組み合わせが決まっているので、nodistを使って、最新nodeで使えるnpmを挿れて優勝していく。\n$ nodist npm match\n上記が終わると、nodeに合致するnpmが使える状態になっているはず。\n$ npm -v\n7.10.0\nちょっと古いみたいだけど、ま、いっか。。。\n雑記\nwindowsだと、nodistで管理していたことを忘れる。。。\nwindows標準でライブラリ管理提供したほうがいいのではなかろうか？\nもしくは、npm updateしたときにnodistが何かメッセージ吐いてくれれば、あんまり悩まないのになぁ～とは思った。\n参考サイト\nよく使うnpmコマンド - Qiita\n[Node.js] Node.js の導入(Windows編) - Qiita\nnodistの基本操作 - Qiita",
      "guid": "hatenablog://entry/26006613722164130",
      "categories": [
        "開発環境",
        "恥晒し",
        "学習",
        "ライブラリ",
        "日記",
        "JavaScript",
        "npm"
      ],
      "isoDate": "2021-04-29T06:15:37.000Z"
    },
    {
      "title": "2021/04/12週 気づきと振り返り Azure Functionsは怖くない",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/04/20/005534",
      "pubDate": "Tue, 20 Apr 2021 00:55:34 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>.NET</h2>\n\n<p>何か知らんけど、なぜか.NET案件に入ってしまった。。。</p>\n\n<h3>ライブラリ管理</h3>\n\n<p>どうやるのが普通なんだろうか？<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>だとgradleとか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/maven\">maven</a>とかでやるけど、.NET系は何でしているのか分からん。</p>\n\n<p>案の定、環境構築でミスって時間がかかってしまったよ。。。<br />\n手動でライブラリ配置とかは、無理がある。<br />\nライブラリ数は両手じゃ数えられないくらいに増えているし、企業が扱うものとなると、大規模になるから、管理系のライブラリが１つはないと難しい。</p>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/eclipse\">eclipse</a>後遺症</h3>\n\n<p>ショートカットを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/eclipse\">eclipse</a>と同じコマンドでやろうとして、何で動かないんだ？って一瞬焦る。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/IDE\">IDE</a>が違うと、よく起こるよね。。。<br />\n設定で似せたりできるのなら、合わせた方が無難な気がする。<br />\nオジサンの頭じゃ、新しいことになれるまで時間がかかる。</p>\n\n<h3><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/LINQ\">LINQ</a>式</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%E0%A5%C0%BC%B0\">ラムダ式</a>だから、特に違和感なく使えてる。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のストリームと比べると、使いづらく感じる。<br />\n俺が使いこなせてないだけかも知れないが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>でできることが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%23\">C#</a>でできないのに憤りを覚える。</p>\n\n<p>あと、for文で書かないと実現できないことが多すぎる気もする。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ASP.NET\">ASP.NET</a></h2>\n\n<p>初めて触るけど、HTMLベースなのはいいが、デザイナーとの共存は無理そうだな。。。<br />\n必ず、エンジニアが大幅に手を入れる必要性がある。<br />\nHTMLヘルパーをよく使うが、それをデザイナーに求めるのは無理そう。</p>\n\n<p>個人的には、あんまり使いたくはないな。。。</p>\n\n<h3>async/awaitで悩んだ</h3>\n\n<p>web <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/api\">api</a>を作ったので、当然のように、webサイトから叩く機能も作った。</p>\n\n<p>async/awaitは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>と同じような感覚で使ったのだが、デットロックが発生してかなり悩んだ。。。<br />\n下記の資料を見て解決はしたけど、未だに納得はしてない。</p>\n\n<p><iframe src=\"https://www.slideshare.net/slideshow/embed_code/key/lkyj3RoGf60hJc\" width=\"427\" height=\"356\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\" style=\"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;\" allowfullscreen> </iframe> <div style=\"margin-bottom:5px\"> <strong> <a href=\"https://www.slideshare.net/neuecc/httpclient\" title=\"HttpClient詳解、或いは非同期の落とし穴について\" target=\"_blank\">HttpClient詳解、或いは非同期の落とし穴について</a> </strong> from <strong><a href=\"https://www.slideshare.net/neuecc\" target=\"_blank\">Yoshifumi Kawai</a></strong> </div>  <cite class=\"hatena-citation\"><a href=\"https://www.slideshare.net/neuecc/httpclient\">www.slideshare.net</a></cite></p>\n\n<p>闇が深そうな予感がするので、深入りはしないが、いろんな人が.NETの開発で悩まされる場所なんだということは理解できた。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>と同じ感覚で使うのは、危険だというのが今回の教訓。</p>\n\n<h2>Azure Functions</h2>\n\n<p>使ってみたけど、web <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を作るのとほぼ変わらない。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9\">クラウド</a>ってワードで、何か得体の知れないものってイメージがあるみたいだが、Web <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を何度か作って来たものとしては、それほど何度の高いものではなかった。</p>\n\n<p>HTTPの知識と、セキュリティ絡みの知識があれば、難なく作れそうな感じがする。</p>\n\n<p>あとは、仮想環境がイメージできれば、基本的にWebアプリの開発と変わらない。<br />\n参画する前に、かなりビビらされたが、それほど身構えなくても良かったなとは思った。</p>\n\n<h1>その他</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%F0%CA%F3%BD%E8%CD%FD%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3\">情報処理技術者試験</a></h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CD%A5%C3%A5%C8%A5%EF%A1%BC%A5%AF%A5%B9%A5%DA%A5%B7%A5%E3%A5%EA%A5%B9%A5%C8\">ネットワークスペシャリスト</a>を受けた。<br />\nほとんど勉強することができなかったが、ある程度は書けたと自負しております。<br />\nでも、合格しているとは思えないんだよな。。。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/visual%20studio\">visual studio</a>での開発</h2>\n\n<p>動作は、思ったより軽快だった。<br />\nただ、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/eclipse\">eclipse</a>を長く使ってきたので、いろいろと迷いはする。</p>\n\n<h2>料理に凝りだした</h2>\n\n<p>在宅も１年近くになろうかという今になって、料理に凝るようになってきた。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/youtube\">youtube</a>で料理動画とかよく見る。<br />\nざっくり下味の付け方とかをよく見る。大さじ一杯とか細かい分量言われても、覚えられないので、感覚的に覚えて、あとは実践しながら分量を好みで入れることが多い。</p>\n\n<p>肉料理は、下味をちゃんとつけられるかどうかで旨さが全然違うと感じた。<br />\n意外と、外食並の味だったら、下味さえちゃんとすれば再現できるんだなとは思った。</p>\n\n<h2>子ども・動物系の動画</h2>\n\n<p>最近、 子ども・動物系の動画もよく見る。<br />\n単純に、行動が予想できないから、面白い。<br />\n芸人のありきたりなネタを見るより、癒やされるし笑ってしまう。</p>\n\n<p>幼稚園児の動画を見てると、俺はどうだったのか思い出しちゃうね。<br />\n少なくとも、サンタは信じてなかったし、お遊戯会がものすごく嫌いだった。<br />\n大人の自己満足に付き合ってあげるのが、面倒だな～と思っていたフシがある。<br />\nサンタがいい例。サンタがいないことはとっくに分かっているのだが、大人が子どもに求めてるリアクションをしなければならないのが、無性に嫌だった。<br />\n家族は、サンタに会うのを恥ずかしがってると思っていたらしいが、やりたくもないことをやるから恥ずかしかったのだよ。。。 <br />\nお遊戯会も同じ。クソダサ踊りを公衆の面前でやらなければならないことが苦痛。<br />\n保育園のときは、お昼寝の時間とかあったけど、寝たことはなかったな。<br />\nそもそも、昼寝は時間を無駄にしているという価値観だった。<br />\n保育園の頃のお昼寝の時間は、天井のシミを見て、何かを空想していた記憶がある。<br />\n今考えると、相当面倒臭い子どもだとは思う。。。</p>\n\n<p>そう考えると、動画に写ってる子は、純粋だな～と感心してしまう。</p>\n\n<p>たまに、ひねくれた子どもも見てみたいな～とは思う。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nC#.NET\n何か知らんけど、なぜか.NET案件に入ってしまった。。。\nライブラリ管理\nどうやるのが普通なんだろうか？\nJavaだとgradleとかmavenとかでやるけど、.NET系は何でしているのか分からん。\n案の定、環境構築でミスって時間がかかってしまったよ。。。\neclipse後遺症\nショートカットをeclipseと同じコマンドでやろうとして、何で動かないんだ？って一瞬焦る。\nIDEが違うと、よく起こるよね。。。\nLINQ式\nラムダ式だから、特に違和感なく使えてる。\nJavaのストリームと比べると、使いづらく感じる。\nJavaでできることがC#でできないのに憤りを覚える。\nあと、for文で書かないと実現できないことが多すぎる気もする。\nASP.NET\n初めて触るけど、HTMLベースなのはいいが、デザイナーとの共存は無理そうだな。。。\n個人的には、あんまり使いたくはないな。。。\nasync/awaitで悩んだ\nweb apiを作ったので、当然のように、webサイトから叩く機能も作った。\nasync/awaitは、javascriptと同じような感覚で使ったのだが、デットロックが発生してかなり悩んだ。。。\n  \n  HttpClient詳解、或いは非同期の落とし穴について  from Yoshifumi Kawai \n  www.slideshare.net\n闇が深そうな予感がするので、深入りはしないが、いろんな人が.NETの開発で悩まされる場所なんだということは理解できた。\njavascriptと同じ感覚で使うのは、危険だというのが今回の教訓。\nAzure Functions\n使ってみたけど、web APIを作るのとほぼ変わらない。\nクラウドってワードで、何か得体の知れないものってイメージがあるみたいだが、Web APIを何度か作って来たものとしては、それほど何度の高いものではなかった。\nHTTPの知識と、セキュリティ絡みの知識があれば、難なく作れそうな感じがする。\nあとは、仮想環境がイメージできれば、基本的にWebアプリの開発と変わらない。\nその他\n情報処理技術者試験\nネットワークスペシャリストを受けた。\nvisual studioでの開発\n動作は、思ったより軽快だった。\neclipseを長く使ってきたので、いろいろと迷いはする。\n料理に凝りだした\n在宅も１年近くになろうかという今になって、料理に凝るようになってきた。\nyoutubeで料理動画とかよく見る。\n肉料理は、下味をちゃんとつけられるかどうかで旨さが全然違うと感じた。\n子ども・動物系の動画\n最近、 子ども・動物系の動画もよく見る。\n幼稚園児の動画を見てると、俺はどうだったのか思い出しちゃうね。\nそう考えると、動画に写ってる子は、純粋だな～と感心してしまう。\nたまに、ひねくれた子どもも見てみたいな～とは思う。",
      "guid": "hatenablog://entry/26006613718400460",
      "categories": [
        "C#",
        "クラウド",
        "プログラミング",
        "開発環境",
        "試験",
        "日記",
        "愚痴",
        "体調管理",
        "思ひ出",
        "恥晒し"
      ],
      "isoDate": "2021-04-19T15:55:34.000Z"
    },
    {
      "title": "【Java】Java16先取り調査 環境構築編",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/03/13/084846",
      "pubDate": "Sat, 13 Mar 2021 08:48:46 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>検証環境</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Visual%20Studio%20Code\">Visual Studio Code</a>のバージョン情報そのまま貼り付け。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>バージョン: 1.53.2 (system setup)\nコミット: 622cb03f7e070a9670c94bae1a45d78d7181fbd4\n日付: 2021-02-11T11:48:04.245Z\nElectron: 11.2.1\nChrome: 87.0.4280.141\nNode.js: 12.18.3\nV8: 8.7.220.31-electron.0\nOS: Windows_NT x64 10.0.19041</pre>\n\n\n<h1>環境構築</h1>\n\n<p>sdkmanがインストール済みで話を進める。<br />\nsdkmanのインストールやら使い方は、過去の記事参照</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2018%2F12%2F08%2F115159\" title=\"SDKMAN調査・まとめ - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2018/12/08/115159\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h2>Java16のインストール</h2>\n\n<p>インストールするバージョン情報を確認する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sdk list java</pre>\n\n\n<p>結果</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>================================================================================\nAvailable Java Versions\n================================================================================\n Vendor        | Use | Version      | Dist    | Status     | Identifier\n--------------------------------------------------------------------------------\n AdoptOpenJDK  |     | 15.0.2.j9    | adpt    |            | 15.0.2.j9-adpt\n               |     | 15.0.2.hs    | adpt    |            | 15.0.2.hs-adpt\n               |     | 11.0.10.j9   | adpt    |            | 11.0.10.j9-adpt\n               |     | 11.0.10.hs   | adpt    |            | 11.0.10.hs-adpt\n               |     | 11.0.9.open  | adpt    |            | 11.0.9.open-adpt    \n               |     | 11.0.5.hs    | adpt    | local only | 11.0.5.hs-adpt\n               |     | 8.0.282.j9   | adpt    |            | 8.0.282.j9-adpt\n               |     | 8.0.282.hs   | adpt    |            | 8.0.282.hs-adpt\n               |     | 8.0.275.open | adpt    |            | 8.0.275.open-adpt\n Alibaba       |     | 11.0.9.4     | albba   |            | 11.0.9.4-albba\n Amazon        |     | 15.0.2.7.1   | amzn    |            | 15.0.2.7.1-amzn\n               |     | 11.0.10.9.1  | amzn    |            | 11.0.10.9.1-amzn\n               |     | 8.282.08.1   | amzn    |            | 8.282.08.1-amzn\n Azul Zulu     |     | 15.0.2       | zulu    |            | 15.0.2-zulu\n               |     | 15.0.2.fx    | zulu    |            | 15.0.2.fx-zulu\n               |     | 11.0.10      | zulu    |            | 11.0.10-zulu\n               |     | 11.0.10.fx   | zulu    |            | 11.0.10.fx-zulu\n               |     | 8.0.282      | zulu    |            | 8.0.282-zulu\n               |     | 8.0.282.fx   | zulu    |            | 8.0.282.fx-zulu\n               |     | 6.0.119      | zulu    |            | 6.0.119-zulu\n BellSoft      |     | 15.0.2.fx    | librca  |            | 15.0.2.fx-librca\n               |     | 15.0.2       | librca  |            | 15.0.2-librca\n               |     | 11.0.10.fx   | librca  |            | 11.0.10.fx-librca\n               |     | 11.0.10      | librca  |            | 11.0.10-librca\n               |     | 8.0.282.fx   | librca  |            | 8.0.282.fx-librca\n               |     | 8.0.282      | librca  |            | 8.0.282-librca\n GraalVM       |     | 21.0.0.2.r11 | grl     |            | 21.0.0.2.r11-grl\n               |     | 21.0.0.2.r8  | grl     |            | 21.0.0.2.r8-grl\n               |     | 20.3.1.2.r11 | grl     |            | 20.3.1.2.r11-grl\n               |     | 20.3.1.2.r8  | grl     |            | 20.3.1.2.r8-grl\n               |     | 19.3.5.r11   | grl     |            | 19.3.5.r11-grl\n               |     | 19.3.5.r8    | grl     |            | 19.3.5.r8-grl\n               |     | 19.1.0       | grl     |            | 19.1.0-grl\n Java.net      |     | 17.ea.13     | open    |            | 17.ea.13-open\n               |     | 17.ea.2.pma  | open    |            | 17.ea.2.pma-open\n               |     | 17.ea.2.lm   | open    |            | 17.ea.2.lm-open\n               |     | 16.ea.36     | open    |            | 16.ea.36-open\n               |     | 15.ea.36     | open    | local only | 15.ea.36-open\n               |     | 15.0.2       | open    |            | 15.0.2-open\n               | &gt;&gt;&gt; | 15.0.1       | open    | local only | 15.0.1-open\n               |     | 14.ea.36     | open    | local only | 14.ea.36-open\n               |     | 14.ea.24     | open    | local only | 14.ea.24-open\n               |     | 11.0.10      | open    |            | 11.0.10-open\n               |     | 11.0.2       | open    |            | 11.0.2-open\n               |     | 8.0.282      | open    |            | 8.0.282-open\n               |     | 8.0.265      | open    |            | 8.0.265-open\n Mandrel       |     | 21.0.0.0     | mandrel |            | 21.0.0.0-mandrel\n               |     | 20.3.1.2     | mandrel |            | 20.3.1.2-mandrel\n SAP           |     | 15.0.2       | sapmchn |            | 15.0.2-sapmchn\n               |     | 11.0.10      | sapmchn |            | 11.0.10-sapmchn\n TravaOpenJDK  |     | 11.0.9       | trava   |            | 11.0.9-trava\n================================================================================\nUse the Identifier for installation:\n\n    $ sdk install java 11.0.3.hs-adpt\n================================================================================</pre>\n\n\n<p>欲しいのは、Java16なので、下記のコマンドで<code>16.ea.36</code>をインストール。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sdk install java 16.ea.36-open</pre>\n\n\n<p>インストールできたかバージョン確認。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ java -version\nopenjdk version &#34;16&#34; 2021-03-16\nOpenJDK Runtime Environment (build 16+36-2231)\nOpenJDK 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)\n\n$ javac -version\njavac 16</pre>\n\n\n<p>ちゃんと変わったので、環境構築終了</p>\n",
      "contentSnippet": "検証環境\nVisual Studio Codeのバージョン情報そのまま貼り付け。\nバージョン: 1.53.2 (system setup)\nコミット: 622cb03f7e070a9670c94bae1a45d78d7181fbd4\n日付: 2021-02-11T11:48:04.245Z\nElectron: 11.2.1\nChrome: 87.0.4280.141\nNode.js: 12.18.3\nV8: 8.7.220.31-electron.0\nOS: Windows_NT x64 10.0.19041\n環境構築\nsdkmanがインストール済みで話を進める。\nsuzaku-tec.hatenadiary.jp\nJava16のインストール\nインストールするバージョン情報を確認する。\n$ sdk list java\n結果\n================================================================================\nAvailable Java Versions\n================================================================================\n Vendor        | Use | Version      | Dist    | Status     | Identifier\n--------------------------------------------------------------------------------\n AdoptOpenJDK  |     | 15.0.2.j9    | adpt    |            | 15.0.2.j9-adpt\n               |     | 15.0.2.hs    | adpt    |            | 15.0.2.hs-adpt\n               |     | 11.0.10.j9   | adpt    |            | 11.0.10.j9-adpt\n               |     | 11.0.10.hs   | adpt    |            | 11.0.10.hs-adpt\n               |     | 11.0.9.open  | adpt    |            | 11.0.9.open-adpt    \n               |     | 11.0.5.hs    | adpt    | local only | 11.0.5.hs-adpt\n               |     | 8.0.282.j9   | adpt    |            | 8.0.282.j9-adpt\n               |     | 8.0.282.hs   | adpt    |            | 8.0.282.hs-adpt\n               |     | 8.0.275.open | adpt    |            | 8.0.275.open-adpt\n Alibaba       |     | 11.0.9.4     | albba   |            | 11.0.9.4-albba\n Amazon        |     | 15.0.2.7.1   | amzn    |            | 15.0.2.7.1-amzn\n               |     | 11.0.10.9.1  | amzn    |            | 11.0.10.9.1-amzn\n               |     | 8.282.08.1   | amzn    |            | 8.282.08.1-amzn\n Azul Zulu     |     | 15.0.2       | zulu    |            | 15.0.2-zulu\n               |     | 15.0.2.fx    | zulu    |            | 15.0.2.fx-zulu\n               |     | 11.0.10      | zulu    |            | 11.0.10-zulu\n               |     | 11.0.10.fx   | zulu    |            | 11.0.10.fx-zulu\n               |     | 8.0.282      | zulu    |            | 8.0.282-zulu\n               |     | 8.0.282.fx   | zulu    |            | 8.0.282.fx-zulu\n               |     | 6.0.119      | zulu    |            | 6.0.119-zulu\n BellSoft      |     | 15.0.2.fx    | librca  |            | 15.0.2.fx-librca\n               |     | 15.0.2       | librca  |            | 15.0.2-librca\n               |     | 11.0.10.fx   | librca  |            | 11.0.10.fx-librca\n               |     | 11.0.10      | librca  |            | 11.0.10-librca\n               |     | 8.0.282.fx   | librca  |            | 8.0.282.fx-librca\n               |     | 8.0.282      | librca  |            | 8.0.282-librca\n GraalVM       |     | 21.0.0.2.r11 | grl     |            | 21.0.0.2.r11-grl\n               |     | 21.0.0.2.r8  | grl     |            | 21.0.0.2.r8-grl\n               |     | 20.3.1.2.r11 | grl     |            | 20.3.1.2.r11-grl\n               |     | 20.3.1.2.r8  | grl     |            | 20.3.1.2.r8-grl\n               |     | 19.3.5.r11   | grl     |            | 19.3.5.r11-grl\n               |     | 19.3.5.r8    | grl     |            | 19.3.5.r8-grl\n               |     | 19.1.0       | grl     |            | 19.1.0-grl\n Java.net      |     | 17.ea.13     | open    |            | 17.ea.13-open\n               |     | 17.ea.2.pma  | open    |            | 17.ea.2.pma-open\n               |     | 17.ea.2.lm   | open    |            | 17.ea.2.lm-open\n               |     | 16.ea.36     | open    |            | 16.ea.36-open\n               |     | 15.ea.36     | open    | local only | 15.ea.36-open\n               |     | 15.0.2       | open    |            | 15.0.2-open\n               | >>> | 15.0.1       | open    | local only | 15.0.1-open\n               |     | 14.ea.36     | open    | local only | 14.ea.36-open\n               |     | 14.ea.24     | open    | local only | 14.ea.24-open\n               |     | 11.0.10      | open    |            | 11.0.10-open\n               |     | 11.0.2       | open    |            | 11.0.2-open\n               |     | 8.0.282      | open    |            | 8.0.282-open\n               |     | 8.0.265      | open    |            | 8.0.265-open\n Mandrel       |     | 21.0.0.0     | mandrel |            | 21.0.0.0-mandrel\n               |     | 20.3.1.2     | mandrel |            | 20.3.1.2-mandrel\n SAP           |     | 15.0.2       | sapmchn |            | 15.0.2-sapmchn\n               |     | 11.0.10      | sapmchn |            | 11.0.10-sapmchn\n TravaOpenJDK  |     | 11.0.9       | trava   |            | 11.0.9-trava\n================================================================================\nUse the Identifier for installation:\n\n    $ sdk install java 11.0.3.hs-adpt\n================================================================================\n欲しいのは、Java16なので、下記のコマンドで16.ea.36をインストール。\n$ sdk install java 16.ea.36-open\nインストールできたかバージョン確認。\n$ java -version\nopenjdk version \"16\" 2021-03-16\nOpenJDK Runtime Environment (build 16+36-2231)\nOpenJDK 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)\n\n$ javac -version\njavac 16\nちゃんと変わったので、環境構築終了",
      "guid": "hatenablog://entry/26006613702644336",
      "categories": [
        "Java",
        "開発環境"
      ],
      "isoDate": "2021-03-12T23:48:46.000Z"
    },
    {
      "title": "2021/02/01週 気づきと振り返り 「辛い」しか思いつかない",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/02/10/001234",
      "pubDate": "Wed, 10 Feb 2021 00:12:34 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>画面に詰め込み過ぎは良くない</h2>\n\n<p>画面に大量に項目があるのだが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%EB%B9%E7%A5%C6%A5%B9%A5%C8\">結合テスト</a>がキツイ。。。<br />\n打鍵ミスも多いし、頭がパンクしそう。。。</p>\n\n<p>期限もあるし、かなり焦る。<br />\n正直、データ準備するだけで億劫になるのが辛い。</p>\n\n<h2>業務がわからない状態での<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B7%EB%B9%E7%A5%C6%A5%B9%A5%C8\">結合テスト</a></h2>\n\n<p>テストになってるのかよく分からない。。。<br />\n業務がわからないから、データ準備もかなり苦戦する。</p>\n\n<p>聞いたら、若干キレ気味に答えられるし、苦痛が半端ないですわ。。。</p>\n\n<h1>はじめての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BF%B4%CE%C5%C6%E2%B2%CA\">心療内科</a></h1>\n\n<p>案外あっさり終わった。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D2%A5%A2%A5%EA\">ヒアリ</a>ングして薬だった。</p>\n\n<p>なんか、もっとこう掘り下げられるのかと思ったが、そんなものなのだろうか？</p>\n\n<p>軽めの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BF%E7%CC%B2%CC%F4\">睡眠薬</a>と気分高揚の薬をもらった。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\n画面に詰め込み過ぎは良くない\n画面に大量に項目があるのだが、結合テストがキツイ。。。\n期限もあるし、かなり焦る。\n業務がわからない状態での結合テスト\nテストになってるのかよく分からない。。。\n聞いたら、若干キレ気味に答えられるし、苦痛が半端ないですわ。。。\nはじめての心療内科\n案外あっさり終わった。\nヒアリングして薬だった。\nなんか、もっとこう掘り下げられるのかと思ったが、そんなものなのだろうか？\n軽めの睡眠薬と気分高揚の薬をもらった。",
      "guid": "hatenablog://entry/26006613685790604",
      "categories": [
        "メンタル",
        "テスト"
      ],
      "isoDate": "2021-02-09T15:12:34.000Z"
    },
    {
      "title": "【書評】コンピュータアーキテクチャのエッセンス",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/01/30/134121",
      "pubDate": "Sat, 30 Jan 2021 13:41:21 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>読むに至ったきっかけ</h1>\n\n<p>『<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2\">翔泳社</a>ブックアンバサダー』に応募した結果、当選したので読むに至る。<br />\nいくつか候補があったが、一番興味を引いたので選んだ。</p>\n\n<h1>目次</h1>\n\n<p>第1章　序論と概要</p>\n\n<p>■第1部　基礎</p>\n\n<p>第2章　デジタル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%C0%CD%FD%B2%F3%CF%A9\">論理回路</a>の基礎<br />\n第3章　データとプログラムの表現</p>\n\n<p>■第2部　プロセッサ</p>\n\n<p>第4章　さまざまなプロセッサと計算エンジン<br />\n第5章　プロセッサの種類と命令セット<br />\n第6章　データパスと命令実行<br />\n第7章　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a>のアドレッシングと命令表現<br />\n第8章　CPU：マイクロコード、保護、プロセッサモード<br />\n第9章　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%BB%A5%F3%A5%D6%A5%EA%B8%C0%B8%EC\">アセンブリ言語</a>とプログラミング<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%E9%A5%C0%A5%A4%A5%E0\">パラダイム</a></p>\n\n<p>■第3部　メモリ</p>\n\n<p>第10章　メモリとストレージ<br />\n第11章　物理メモリと物理アドレッシング<br />\n第12章　キャッシュとキャッシング<br />\n第13章　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA\">仮想メモリ</a>技術と仮想アドレッシング</p>\n\n<p>■第4部　入出力</p>\n\n<p>第14章　入出力の概念と用語<br />\n第15章　バスとバス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a><br />\n第16章　プログラム駆動と割り込み駆動の入出力<br />\n第17章　デ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>と入出力とバッファのプログラミング</p>\n\n<p>■第5部　高度な話題</p>\n\n<p>第18章　並列処理<br />\n第19章　パイプライン処理<br />\n第20章　電力とエネルギー<br />\n第21章　性能評価<br />\n第22章　<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>のサンプルと階層構造<br />\n第23章　ハードウェアのモジュール化</p>\n\n<h1>リンク</h1>\n\n<p><a href=\"https://www.shoeisha.co.jp/book/detail/9784798167930\">&#x30B3;&#x30F3;&#x30D4;&#x30E5;&#x30FC;&#x30BF;&#x30A2;&#x30FC;&#x30AD;&#x30C6;&#x30AF;&#x30C1;&#x30E3;&#x306E;&#x30A8;&#x30C3;&#x30BB;&#x30F3;&#x30B9;&#xFF3B;&#x7B2C;2&#x7248;&#xFF3D;&#xFF08;Douglas E. Comer &#x5409;&#x5DDD; &#x90A6;&#x592B;&#xFF09;&#xFF5C;&#x7FD4;&#x6CF3;&#x793E;&#x306E;&#x672C;</a></p>\n\n<h1>感想</h1>\n\n<p>献本頂いた本なので、若干贔屓目で読んでいるかも。<br />\nまた、ＩＴエンジニアと仕事に従事しているので、そういう視点から見ての感想である点を考慮して感想を見ていただければと思う。</p>\n\n<p>ざっくり呼んだ感想としては、非情に内容が濃い本であったと思う。<br />\n１度ですべてを理解するのは不可能。何度も読み返したり、ネットで調べながらの作業になる。<br />\n実際、読むのがかなり大変だった。書いてある内容を吟味して、自分の中に落とし込むのが大変な１冊だったと思う。</p>\n\n<p>学校で習った知識の深堀り的な意味合いが強い印象だった。<br />\nデジタル回路の仕組みや理論は、読み返しても難しい。AND、OR、NANDは、電子回路で理解はしているのだが、電子回路の設計にどう役立っているのか、学生時代はよく分からなかった。<br />\n本書を呼んで、実際に電流や時間の流れを考慮してくると、ANDとかの単純なものより、XORとかの方が使いやすいという考え方が腑に落ちた。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%F0%CA%F3%BD%E8%CD%FD%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3\">情報処理技術者試験</a>とかでもXORで難解なものが出てくることがあるが、どちらかというと、実務に近い方の問題だったのかもしれない。<br />\nメモリやデータの扱いに関しては、ハードよりの記載が多く、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>エンジニアである自分には、少しハードルが高かった。学生時代に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC\">C言語</a>を少しやっていたので、ある程度の話にはついていけたが、メモリの扱いやポインタとかを使ってない言語系の人には、かなり難解かもしれない。</p>\n\n<p>本書を通して一番感じたのは、人間にとっての分かりやすさが、そのままコンピュータにとっての分かりやすさ、効率化ではないことだと感じた。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>としてハードの知識を知っていることで、効率化に活かせるような気がするが、個人的には、最適化よりも、まずは理解しやすいものを作るべきだと思っている。<br />\n人間に理解しやすいものから、どれだけハードに寄せるかは、作ったあとに考える必要があるので、ハードの知識は、そのときに必要になってくる。<br />\n本書の知識が必要になってくるのは、そういった当たり前ができるようになってからだと思う。<br />\n自分の知識レベルを吟味した上で、本書は読むべきだと思った。<br />\n※自分に対しては、早かった気がする。。。</p>\n\n<h1>まとメモ</h1>\n\n<h2>デジタル<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%C0%CD%FD%B2%F3%CF%A9\">論理回路</a>の基礎</h2>\n\n<ul>\n<li>電流の制御→<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B8%A5%B9%A5%BF\">トランジスタ</a>で実現</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B8%A5%B9%A5%BF\">トランジスタ</a>の仕事は、スイッチのON/OFFを電気制御で行っている。</li>\n<li>電子回路の特性上、NOR・NAND・XORを使ったほうが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B8%A5%B9%A5%BF\">トランジスタ</a>数を減らせる。</li>\n</ul>\n\n\n<p>学生の頃、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%C0%CD%FD%B2%F3%CF%A9\">論理回路</a>を習ったが、使う機会がどんなときなのか、よく分からなかった。<br />\nif文くらいだろって思っていたが、電子回路作る際に必須の知識になるんだね。<br />\nAND・ORとかを主軸に使うのかと思ったが、電子回路設計だと、その逆が多いのが意外だった。<br />\nプログラミングだと、可読性を挙げるために、AND条件になるようにしているのだが、電子回路だとその逆が多いのが、立場によって観点が変わってくるのが面白かった。<br />\n電子回路を設計している人は、頭を悩ませてることが多そう。。。</p>\n\n<ul>\n<li>ラッチ→状態の保持\n\n<ul>\n<li>回路上、伝送遅延がある（ミリ秒以下）</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF\">レジスタ</a>にはラッチが複数使われて構成されている</li>\n</ul>\n</li>\n</ul>\n\n\n<p>たまに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%F0%CA%F3%BD%E8%CD%FD%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3\">情報処理技術者試験</a>で出てくる意味がわからない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CF%C0%CD%FD%B2%F3%CF%A9\">論理回路</a>って、ラッチだったんだな。。。<br />\nパターン書いてたら、値変わらないやんけって思ってた。</p>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E0%A1%BC%A5%A2%A4%CE%CB%A1%C2%A7\">ムーアの法則</a>\n\n<ul>\n<li>毎年性能２倍</li>\n<li>今は18ヶ月で２倍に改定</li>\n</ul>\n</li>\n<li>IC\n\n<ul>\n<li>設計にコストがかかる</li>\n<li>製造は比較的安価</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>データとプログラムの表現</h2>\n\n<p>プログラムに重要なこと＝抽象化</p>\n\n<h3>抽象化で重要なこと</h3>\n\n<ul>\n<li>データ</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a></li>\n</ul>\n\n\n<h3>16進記法のメリット</h3>\n\n<ul>\n<li>2進より短く表現可</li>\n<li>16→2のべき乗＝比較的容易に計算可</li>\n</ul>\n\n\n<p>１文字４ビットで計算できるから、算出は比較的楽。<br />\n同じ理屈で８進表記もできるけど、表現の幅が狭い。 <br />\n３２進数が、登場しないのは、何か理由があるのだろうか？</p>\n\n<p>Ascii：1バイトでの文字表現<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Unicode\">Unicode</a>：全世界共通の文字表現を目指したもの</p>\n\n<p>アンダーフロー：表現可能な数値より小さい計算結果がでること</p>\n\n<h3>データ送信</h3>\n\n<h4>リ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%EB%A5%A8%A5%F3\">トルエン</a>ディアン</h4>\n\n<p>最下位→最上位の順で送信する。<br />\n最下位が先に決まるので、メモリ空間を小さく使うことができる（メモリを使うような言語だと分かりやすい？少なくとも<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>エンジニアでは分かりにくい。。。）</p>\n\n<h4>２進数の表現</h4>\n\n<ul>\n<li>符号＋絶対値</li>\n<li>１の補数</li>\n<li>２の補数</li>\n</ul>\n\n\n<h4>データの表現方法</h4>\n\n<p>柔軟性や速度に多大な影響が出る。</p>\n\n<p>少しの違いでも、チリ積で、最終的に差が大きく出る。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a></h2>\n\n<p>人間のわかりやすさ≠コンピュータのわかりやすさ</p>\n\n<h3>ハーバード型</h3>\n\n<p>プログラムとデータを別メモリに格納<br />\n最適化しやすいが、メモリが分割されているため、メモリ不足が発生した場合、メモリの増設が必要になってくる。</p>\n\n<h3>フォン<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CE%A5%A4%A5%DE%A5%F3\">ノイマン</a>型</h3>\n\n<p>プログラムとデータが同じメモリに格納<br />\nメモリが共有しているので、用途が変わっても対応しやすい。</p>\n\n<h3>プロセッサ</h3>\n\n<p>複数ステップの計算を行う。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5\">トレードオフ</a>でやれることが変わる。ex：機能が増える＝電力消費、処理時間増</p>\n\n<h3>命令セット</h3>\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CISC\">CISC</a>：複数の命令セット。汎用的だが遅め。</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RISC\">RISC</a>：縮小命令セット。必要最小限だが速い。</li>\n</ul>\n\n\n<p>プログラミング可能＝メモリ読みだした命令を実行できる構造が必要＝大きな計算力と柔軟性が必要</p>\n\n<h4><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a></h4>\n\n<p>演算実行に必要な値</p>\n\n<h5><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a>の選択で影響するもの</h5>\n\n<ul>\n<li>プログラミング\n\n<ul>\n<li>データの扱い</li>\n</ul>\n</li>\n<li>命令数\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a>多：命令数減、サイズ小</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a>少：命令数多、サイズ大</li>\n</ul>\n</li>\n<li>動作\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a>多：遅い</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%DA%A5%E9%A5%F3%A5%C9\">オペランド</a>少：速い</li>\n</ul>\n</li>\n</ul>\n\n\n<h3>CPU</h3>\n\n<p>複雑</p>\n\n<h4>複雑さの要因</h4>\n\n<ul>\n<li>マルチコア</li>\n<li>役割多</li>\n<li>保護と特権の管理</li>\n<li>ハードウェアの優先度管理</li>\n</ul>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a></h2>\n\n<p>役割が違うので、適材適所が必要</p>\n\n<h3>高水準</h3>\n\n<ul>\n<li>１分で複数の命令実行可</li>\n<li>ハードに依存しない</li>\n<li>アプリ指向</li>\n<li>強力な抽象化</li>\n</ul>\n\n\n<h3>低水準</h3>\n\n<ul>\n<li>１文１命令</li>\n<li>ハード依存</li>\n<li>システム指向</li>\n</ul>\n\n\n<h2>メモリ</h2>\n\n<p>利用されているテク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED\">ノロ</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC\">ジー</a>との構成が重要</p>\n\n<h3>主となるテク<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CE%A5%ED\">ノロ</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B8%A1%BC\">ジー</a>要素</h3>\n\n<ul>\n<li>揮発性</li>\n<li>アクセス</li>\n<li>永続性</li>\n</ul>\n\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA\">仮想メモリ</a></h2>\n\n<p>抽象化メモリ。物理メモリの実態を隠す</p>\n\n<h3>使う理由</h3>\n\n<ul>\n<li>ハードの統合</li>\n<li>プログラミングの容易可</li>\n<li>プログラムとデータの保護</li>\n</ul>\n\n\n<h2>バス</h2>\n\n<p>各種機器を接続するための機構</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%A4%A5%B9%A5%C9%A5%E9%A5%A4%A5%D0\">デバイスドライバ</a></h2>\n\n<p>デ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>の実装を隠蔽、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%D7%A5%BB%A5%EB%B2%BD\">カプセル化</a></p>\n\n<p>デ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9\">バイス</a>固有の実装を利用者が理解しなくてもいい</p>\n\n<h2>並列処理</h2>\n\n<p>ミクロとマクロの考えがある。</p>\n\n<p>ミクロ：ハードに対する並列化<br />\nマクロ：システムに対する並列化</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%E0%A5%C0%A1%BC%A5%EB%A4%CE%CB%A1%C2%A7\">アムダールの法則</a></h2>\n\n<p>頻繁に使う処理を重点的に最適化</p>\n",
      "contentSnippet": "読むに至ったきっかけ\n『翔泳社ブックアンバサダー』に応募した結果、当選したので読むに至る。\n目次\n第1章　序論と概要\n■第1部　基礎\n第2章　デジタル論理回路の基礎\n■第2部　プロセッサ\n第4章　さまざまなプロセッサと計算エンジン\nオペランドのアドレッシングと命令表現\nアセンブリ言語とプログラミングパラダイム\n■第3部　メモリ\n第10章　メモリとストレージ\n仮想メモリ技術と仮想アドレッシング\n■第4部　入出力\n第14章　入出力の概念と用語\nアーキテクチャ\nバイスと入出力とバッファのプログラミング\n■第5部　高度な話題\n第18章　並列処理\nアーキテクチャのサンプルと階層構造\nリンク\nコンピュータアーキテクチャのエッセンス［第2版］（Douglas E. Comer 吉川 邦夫）｜翔泳社の本\n感想\n献本頂いた本なので、若干贔屓目で読んでいるかも。\nざっくり呼んだ感想としては、非情に内容が濃い本であったと思う。\n学校で習った知識の深堀り的な意味合いが強い印象だった。\n情報処理技術者試験とかでもXORで難解なものが出てくることがあるが、どちらかというと、実務に近い方の問題だったのかもしれない。\nJavaエンジニアである自分には、少しハードルが高かった。学生時代にC言語を少しやっていたので、ある程度の話にはついていけたが、メモリの扱いやポインタとかを使ってない言語系の人には、かなり難解かもしれない。\n本書を通して一番感じたのは、人間にとっての分かりやすさが、そのままコンピュータにとっての分かりやすさ、効率化ではないことだと感じた。\nプログラマーとしてハードの知識を知っていることで、効率化に活かせるような気がするが、個人的には、最適化よりも、まずは理解しやすいものを作るべきだと思っている。\nまとメモ\nデジタル論理回路の基礎\n電流の制御→トランジスタで実現\nトランジスタの仕事は、スイッチのON/OFFを電気制御で行っている。\n電子回路の特性上、NOR・NAND・XORを使ったほうが、トランジスタ数を減らせる。\n学生の頃、論理回路を習ったが、使う機会がどんなときなのか、よく分からなかった。\nラッチ→状態の保持\n\n\n回路上、伝送遅延がある（ミリ秒以下）\nレジスタにはラッチが複数使われて構成されている\nたまに情報処理技術者試験で出てくる意味がわからない論理回路って、ラッチだったんだな。。。\nムーアの法則\n\n\n毎年性能２倍\n今は18ヶ月で２倍に改定\nIC\n\n\n設計にコストがかかる\n製造は比較的安価\nデータとプログラムの表現\nプログラムに重要なこと＝抽象化\n抽象化で重要なこと\nデータ\nアルゴリズム\n16進記法のメリット\n2進より短く表現可\n16→2のべき乗＝比較的容易に計算可\n１文字４ビットで計算できるから、算出は比較的楽。\nAscii：1バイトでの文字表現\nUnicode：全世界共通の文字表現を目指したもの\nアンダーフロー：表現可能な数値より小さい計算結果がでること\nデータ送信\nリトルエンディアン\n最下位→最上位の順で送信する。\nJavaエンジニアでは分かりにくい。。。）\n２進数の表現\n符号＋絶対値\n１の補数\n２の補数\nデータの表現方法\n柔軟性や速度に多大な影響が出る。\n少しの違いでも、チリ積で、最終的に差が大きく出る。\nアーキテクチャ\n人間のわかりやすさ≠コンピュータのわかりやすさ\nハーバード型\nプログラムとデータを別メモリに格納\nフォンノイマン型\nプログラムとデータが同じメモリに格納\nプロセッサ\n複数ステップの計算を行う。\nトレードオフでやれることが変わる。ex：機能が増える＝電力消費、処理時間増\n命令セット\nCISC：複数の命令セット。汎用的だが遅め。\nRISC：縮小命令セット。必要最小限だが速い。\nプログラミング可能＝メモリ読みだした命令を実行できる構造が必要＝大きな計算力と柔軟性が必要\nオペランド\n演算実行に必要な値\nオペランドの選択で影響するもの\nプログラミング\n\n\nデータの扱い\n命令数\n\n\nオペランド多：命令数減、サイズ小\nオペランド少：命令数多、サイズ大\n動作\n\n\nオペランド多：遅い\nオペランド少：速い\nCPU\n複雑\n複雑さの要因\nマルチコア\n役割多\n保護と特権の管理\nハードウェアの優先度管理\nプログラミング言語\n役割が違うので、適材適所が必要\n高水準\n１分で複数の命令実行可\nハードに依存しない\nアプリ指向\n強力な抽象化\n低水準\n１文１命令\nハード依存\nシステム指向\nメモリ\n利用されているテクノロジーとの構成が重要\n主となるテクノロジー要素\n揮発性\nアクセス\n永続性\n仮想メモリ\n抽象化メモリ。物理メモリの実態を隠す\n使う理由\nハードの統合\nプログラミングの容易可\nプログラムとデータの保護\nバス\n各種機器を接続するための機構\nデバイスドライバ\nデバイスの実装を隠蔽、カプセル化\nデバイス固有の実装を利用者が理解しなくてもいい\n並列処理\nミクロとマクロの考えがある。\nミクロ：ハードに対する並列化\nアムダールの法則\n頻繁に使う処理を重点的に最適化",
      "guid": "hatenablog://entry/26006613660797978",
      "categories": [
        "学習",
        "書評"
      ],
      "isoDate": "2021-01-30T04:41:21.000Z"
    },
    {
      "title": "2021/01/18週 気づきと振り返り",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/01/30/120736",
      "pubDate": "Sat, 30 Jan 2021 12:07:36 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<ul class=\"table-of-contents\">\n    <li><a href=\"#業務こなしての問題気づき\">業務こなしての問題・気づき</a><ul>\n            <li><a href=\"#スケジュール大事\">スケジュール大事</a></li>\n        </ul>\n    </li>\n</ul>\n\n<h1 id=\"業務こなしての問題気づき\">業務こなしての問題・気づき</h1>\n\n<h2 id=\"スケジュール大事\">スケジュール大事</h2>\n\n<p>胃が痛むようなプロジェクトに入っているのだが、スケジュールがあることの大事さを痛烈に感じてる。</p>\n\n<p>スケジュールがないと、頑張るラインが判断できず、真面目な僕は死ぬまで頑張るを選択してしまうのです。。。</p>\n\n<p>スケジュール感が分からないのは、精神的プレッシャーを感じる。<br />\nスケジュールは、立てておかないと、チーム開発では致命的だと思った。</p>\n\n<p>見当違いでも、スケジュールはあるべきだと思う。<br />\n見当違いのスケジュールは、立てた人が責任を負えばいいので、とりあえずスケジュール立てて欲しい。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nスケジュール大事\n業務こなしての問題・気づき\nスケジュール大事\n胃が痛むようなプロジェクトに入っているのだが、スケジュールがあることの大事さを痛烈に感じてる。\nスケジュールがないと、頑張るラインが判断できず、真面目な僕は死ぬまで頑張るを選択してしまうのです。。。\nスケジュール感が分からないのは、精神的プレッシャーを感じる。\n見当違いでも、スケジュールはあるべきだと思う。\n見当違いのスケジュールは、立てた人が責任を負えばいいので、とりあえずスケジュール立てて欲しい。",
      "guid": "hatenablog://entry/26006613681596747",
      "categories": [
        "メンタル",
        "開発環境",
        "チーム",
        "愚痴",
        "日記"
      ],
      "isoDate": "2021-01-30T03:07:36.000Z"
    },
    {
      "title": "VSCodeのterminal起動時に`Cannot read property ‘length‘ of null`",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2021/01/30/120703",
      "pubDate": "Sat, 30 Jan 2021 12:07:03 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>きっかけ</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mac%20OS\">mac OS</a>のバージョンアップして、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>開いたときにterminalが開かなかったので、メモ</p>\n\n<h1>対処</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/bash\">bash</a>→<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/zsh\">zsh</a>に変更</h2>\n\n<p>terminalの設定を<code>/bin/zsh</code>に変える。</p>\n\n<h2>settings.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>を設定</h2>\n\n<p>settings.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>に、下記を設定する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>&#34;terminal.integrated.localEchoStyle&#34;: &#34;#ffffff&#34;,</pre>\n\n\n<p>workspaceのsettings.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>に追記したけど、既定の設定の方のsettings.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>に追記しても大丈夫な気がする。</p>\n\n<h1>原因（おそらく）</h1>\n\n<p>.<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>のフォルダができなかったのが原因な気がする。<br />\n「lengthがnullになってる」みたいなメッセージだったけど、なんでこの設定で直るのかは、よく分からなかった。。。</p>\n\n<h1>参考サイト</h1>\n\n<p><a href=\"https://blog.csdn.net/u013468614/article/details/111152976\">Cannot read property &lsquo;length&lsquo; of null while opening vscode terminal_&#x6614;&#x98CE;&#x4E0D;&#x8D77;&#xFF0C;&#x552F;&#x6709;&#x52AA;&#x529B;&#x751F;&#x5B58;&#xFF01;-CSDN&#x535A;&#x5BA2;</a><br />\n※なんかポップアップが大量に出てきたから、リンクを開くときは注意して。</p>\n\n<p><a href=\"https://news.mynavi.jp/article/osxhack-241/\">Catalina&#x3067;&#x30C7;&#x30D5;&#x30A9;&#x30EB;&#x30C8;&#x30B7;&#x30A7;&#x30EB;&#x304C;&#x300C;zsh&#x300D;&#x306B;&#x5909;&#x308F;&#x308B;&#x3001;bash&#x3068;&#x306E;&#x9055;&#x3044;&#x306F;? - &#x65B0;&#x30FB;OS X &#x30CF;&#x30C3;&#x30AD;&#x30F3;&#x30B0;!(241) | &#x30DE;&#x30A4;&#x30CA;&#x30D3;&#x30CB;&#x30E5;&#x30FC;&#x30B9;</a></p>\n",
      "contentSnippet": "きっかけ\nmac OSのバージョンアップして、vscode開いたときにterminalが開かなかったので、メモ\n対処\nbash→zshに変更\nterminalの設定を/bin/zshに変える。\nsettings.jsonを設定\nsettings.jsonに、下記を設定する。\n\"terminal.integrated.localEchoStyle\": \"#ffffff\",\nworkspaceのsettings.jsonに追記したけど、既定の設定の方のsettings.jsonに追記しても大丈夫な気がする。\n原因（おそらく）\n.vscodeのフォルダができなかったのが原因な気がする。\n参考サイト\nCannot read property ‘length‘ of null while opening vscode terminal_昔风不起，唯有努力生存！-CSDN博客\nCatalinaでデフォルトシェルが「zsh」に変わる、bashとの違いは? - 新・OS X ハッキング!(241) | マイナビニュース",
      "guid": "hatenablog://entry/26006613683456214",
      "categories": [
        "恥晒し",
        "開発環境"
      ],
      "isoDate": "2021-01-30T03:07:03.000Z"
    },
    {
      "title": "闇の魔術に対する防衛術 Advent Calendar 2020 まとメモ",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/12/29/224635",
      "pubDate": "Tue, 29 Dec 2020 22:46:35 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>Advent Calendar 2020</h1>\n\n<p><a href=\"https://qiita.com/advent-calendar/2020/yaminomajutu\">&#x95C7;&#x306E;&#x9B54;&#x8853;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x9632;&#x885B;&#x8853; Advent Calendar 2020 - Qiita</a></p>\n\n<h1>書くきっかけ</h1>\n\n<p>僕は光の戦士だが、闇を知ることで戦いに勝利できると思い、各戦士たちの戦いの記録を読んで自分の力にしようと思ったから。（厨二文章です。要約すると、\"みんなの苦労を自分の力にしたいから\"です）</p>\n\n<h1>記録</h1>\n\n<h2>DEAD CODE COOKBOOK ~デッドコードの作り方と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C9%FC%B3%E8%A4%CE%BC%F6%CA%B8\">復活の呪文</a>~ の紹介</h2>\n\n<p><a href=\"https://qiita.com/j5c8k6m8/items/0f0596845b63e3b32d7d\">DEAD CODE COOKBOOK ~&#x30C7;&#x30C3;&#x30C9;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x4F5C;&#x308A;&#x65B9;&#x3068;&#x5FA9;&#x6D3B;&#x306E;&#x546A;&#x6587;~ &#x306E;&#x7D39;&#x4ECB; - Qiita</a></p>\n\n<p>dead coadよりunreachable codeの方が心が踊る。<br />\n大半は、returnで引き起こされることが多いなって印象。</p>\n\n<p>ありえない分岐に入るときは、なるべく例外投げるようにしているが、他の人はどうやって付き合っているのだろうかという疑問はある。</p>\n\n<h2>存在しない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a> ~<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>と秘密の部屋~</h2>\n\n<p><a href=\"https://qiita.com/j5c8k6m8/items/009da491fad911834c3b\">&#x5B58;&#x5728;&#x3057;&#x306A;&#x3044;&#x6B63;&#x898F;&#x8868;&#x73FE; ~&#x6B63;&#x898F;&#x8868;&#x73FE;&#x3068;&#x79D8;&#x5BC6;&#x306E;&#x90E8;&#x5C4B;~ - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>は疎いのでJSで試したが、たしかに同じ結果になる。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>が難解なのは、矛盾を作りやすいところにあるのではないかと思った。<br />\nデバックが難しいのも、拍車をかけている気がする。</p>\n\n<h2>可視化や統計でデータに『恣意的なストーリーを語らせる』16の闇の魔術【bad charts】</h2>\n\n<p><a href=\"https://qiita.com/Ringa_hyj/items/a938ec99d0fde052837e\">&#x53EF;&#x8996;&#x5316;&#x3084;&#x7D71;&#x8A08;&#x3067;&#x30C7;&#x30FC;&#x30BF;&#x306B;&#x300E;&#x6063;&#x610F;&#x7684;&#x306A;&#x30B9;&#x30C8;&#x30FC;&#x30EA;&#x30FC;&#x3092;&#x8A9E;&#x3089;&#x305B;&#x308B;&#x300F;16&#x306E;&#x95C7;&#x306E;&#x9B54;&#x8853;&#x3010;bad charts&#x3011; - Qiita</a></p>\n\n<p>見てて思うところがある。<br />\nこれって、テレビとかがよく使う図の詐欺グラフと一緒だ。。。<br />\n俺がメディア嫌いになった理由の一つとして、自分たちの主張のために、わざと錯覚させるようなグラフを作ってくることにある。</p>\n\n<p>無知でそうなることもあれば、恣意的にやることもありそうだ。<br />\nだから、表現方法として適切化どうか、グラフ作るときは慎重に考えなければいけない気がする。<br />\nむしろ、１つのグラフで情報をすべて理解したような気になるのは、かなり怪しいのかもな。。。<br />\nグラフを見たら、いろんな疑問を持つようにしたほうが良いのかもしれない。</p>\n\n<h2>642日前に日本中を震撼させた闇の魔術に対する防衛術 の授業</h2>\n\n<p><a href=\"https://qiita.com/j5c8k6m8/items/dffa2bcc55985ec8ecca\">642&#x65E5;&#x524D;&#x306B;&#x65E5;&#x672C;&#x4E2D;&#x3092;&#x9707;&#x64BC;&#x3055;&#x305B;&#x305F;&#x95C7;&#x306E;&#x9B54;&#x8853;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x9632;&#x885B;&#x8853; &#x306E;&#x6388;&#x696D; - Qiita</a></p>\n\n<p>これって、ウイルスどうこう言ってたやつだっけ？<br />\nこれはウイルスじゃなくてバグだったというオチだった気がするが、記憶にない。。。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a> Hacking ~<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GitHub\">GitHub</a>を容量無制限の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9\">クラウド</a>ストレージとして使用する試み~</h2>\n\n<p><a href=\"https://qiita.com/taptappun/items/e499dfa937cd8f04d74d\">GitHub Hacking ~GitHub&#x3092;&#x5BB9;&#x91CF;&#x7121;&#x5236;&#x9650;&#x306E;&#x30AF;&#x30E9;&#x30A6;&#x30C9;&#x30B9;&#x30C8;&#x30EC;&#x30FC;&#x30B8;&#x3068;&#x3057;&#x3066;&#x4F7F;&#x7528;&#x3059;&#x308B;&#x8A66;&#x307F;~ - Qiita</a></p>\n\n<p>容量制限の問題は、前に引っかかったことがある。<br />\nその時は、git管理を諦めたんだったかな？<br />\nストレージ逼迫させる攻撃とかのリスクはありそうだな。。。</p>\n\n<h2>よく知らないアプリケーションの性能と戦わないといけないときの防衛術（前編）</h2>\n\n<p><a href=\"https://qiita.com/nfujita55a/items/3760cd099ca890f5a4d4\">&#x3088;&#x304F;&#x77E5;&#x3089;&#x306A;&#x3044;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6027;&#x80FD;&#x3068;&#x6226;&#x308F;&#x306A;&#x3044;&#x3068;&#x3044;&#x3051;&#x306A;&#x3044;&#x3068;&#x304D;&#x306E;&#x9632;&#x885B;&#x8853;&#xFF08;&#x524D;&#x7DE8;&#xFF09; - Qiita</a></p>\n\n<p>こういうの、場数を踏まないと得られなさそう。。。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/netstat\">netstat</a>は、たまに使う。<br />\n開発で、サーバー起動しっぱなしだったけど、プロセスが分からなくなったとかに使う。</p>\n\n<p>話を聞けば分かるんだけど、いざ、実際の問題を目の前にしたら、何もできなくなりそう。。。</p>\n\n<p>こういうのを訓練できる教材って、どこかにあるものなのだろうか？<br />\nこういうのを解決できる力って、重要だと思うのだが、いかんせん、どうやって身につけられるのかが分からない。。。</p>\n\n<h2>【闇の魔術】【2020年】Qiitaの2020年に読んでおくべき闇の魔術に関する記事１００選【手動集計】</h2>\n\n<p><a href=\"https://qiita.com/j5c8k6m8/items/64d09fc5d68c79a15cf9\">&#x3010;&#x95C7;&#x306E;&#x9B54;&#x8853;&#x3011;&#x3010;2020&#x5E74;&#x3011;Qiita&#x306E;2020&#x5E74;&#x306B;&#x8AAD;&#x3093;&#x3067;&#x304A;&#x304F;&#x3079;&#x304D;&#x95C7;&#x306E;&#x9B54;&#x8853;&#x306B;&#x95A2;&#x3059;&#x308B;&#x8A18;&#x4E8B;&#xFF11;&#xFF10;&#xFF10;&#x9078;&#x3010;&#x624B;&#x52D5;&#x96C6;&#x8A08;&#x3011; - Qiita</a></p>\n\n<h2>理解されやすいコードの書き方</h2>\n\n<p><a href=\"https://qiita.com/shotta_kon/items/0e00ac57300c15f626fb\">&#x7406;&#x89E3;&#x3055;&#x308C;&#x3084;&#x3059;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#x306E;&#x66F8;&#x304D;&#x65B9; - Qiita</a></p>\n\n<p>コードの整理方法って感じだった。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/ruby\">ruby</a>は詳しくないので、サラ見だったが、なんとなく意味は伝わるものもあった。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Excel\">Excel</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VBA\">VBA</a> に対する防衛術</h2>\n\n<p><a href=\"https://qiita.com/BlueRayi/items/8628781959754f7441a9\">Excel VBA &#x306B;&#x5BFE;&#x3059;&#x308B;&#x9632;&#x885B;&#x8853; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VBA\">VBA</a>でプログラムは組むもんじゃないなと思いました（小並感）</p>\n\n<p>一般的なプログラミングの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D1%A5%E9%A5%C0%A5%A4%A5%E0\">パラダイム</a>が通用しないので、普通の感覚で実装するとハマることが多そう。<br />\nなるべく使わないor使うとしてもサポート程度に留めるのが良さそう。<br />\nシステムに組み込むと、いろいろ問題を引き起こしそうな気がする。</p>\n\n<h2>作用を「計算」できる <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> で純粋<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0\">関数プログラミング</a>しよう</h2>\n\n<p><a href=\"https://qiita.com/BlueRayi/items/bff5b808c47ed4bf1596\">&#x4F5C;&#x7528;&#x3092;&#x300C;&#x8A08;&#x7B97;&#x300D;&#x3067;&#x304D;&#x308B; Java &#x3067;&#x7D14;&#x7C8B;&#x95A2;&#x6570;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x3057;&#x3088;&#x3046; - Qiita</a></p>\n\n<p>逆に闇を見ている気がする。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>だと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0\">関数型プログラミング</a>は、整理がちゃんとできてないと、逆に可読性を落としそうな気がしないでもない。</p>\n\n<h2>echo \"hello, darkness\" ~<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9\">Webサービス</a>におけるダークモードという闇~</h2>\n\n<p><a href=\"https://qiita.com/j5c8k6m8/items/d23646454d1e38398707\">echo &quot;hello, darkness&quot; ~Web&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#x306B;&#x304A;&#x3051;&#x308B;&#x30C0;&#x30FC;&#x30AF;&#x30E2;&#x30FC;&#x30C9;&#x3068;&#x3044;&#x3046;&#x95C7;~ - Qiita</a></p>\n\n<p>ダークモード対応は、異なる領域で別個に対応があるのが、闇を読んでるんだろうなって気がする。</p>\n\n<h2>// なぜかこの行がないと動かない</h2>\n\n<p><a href=\"https://qiita.com/BlueRayi/items/996e09ac50880d8c9f53\">// &#x306A;&#x305C;&#x304B;&#x3053;&#x306E;&#x884C;&#x304C;&#x306A;&#x3044;&#x3068;&#x52D5;&#x304B;&#x306A;&#x3044; - Qiita</a></p>\n\n<p>読み物的な感じだったので、既読終了</p>\n\n<h2>【<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/FileMaker\">FileMaker</a>】リレーションシップグラフの闇に勝つために</h2>\n\n<p><a href=\"https://qiita.com/tyuma/items/14746de9252f87d1d27c\">&#x3010;FileMaker&#x3011;&#x30EA;&#x30EC;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x30B7;&#x30C3;&#x30D7;&#x30B0;&#x30E9;&#x30D5;&#x306E;&#x95C7;&#x306B;&#x52DD;&#x3064;&#x305F;&#x3081;&#x306B; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/FileMaker\">FileMaker</a>を詳しくしらんので、なんとも言えないな。。。</p>\n\n<h2>素性がよくわからない闇システムの解析方法</h2>\n\n<p><a href=\"https://qiita.com/yutaro_kamo/items/aabad0601e2a4ad3da9d\">&#x7D20;&#x6027;&#x304C;&#x3088;&#x304F;&#x308F;&#x304B;&#x3089;&#x306A;&#x3044;&#x95C7;&#x30B7;&#x30B9;&#x30C6;&#x30E0;&#x306E;&#x89E3;&#x6790;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p>読み物的な感じだったので、既読終了</p>\n\n<h2>不死鳥のOffice仕事</h2>\n\n<p><a href=\"https://bluepost69.hatenablog.com/entry/20201215/1608030230\">&#x4E0D;&#x6B7B;&#x9CE5;&#x306E;Office&#x4ED5;&#x4E8B; - &#x9752;&#x30DD;&#x30B9;&#x306E;&#x90E8;&#x5C4B;</a></p>\n\n<p>読み物的な感じだったので、既読終了</p>\n\n<h2>チェックリストの牢獄から抜け出すために</h2>\n\n<p><a href=\"https://qiita.com/pox2020/items/588ee2f1163925702825\">&#x30C1;&#x30A7;&#x30C3;&#x30AF;&#x30EA;&#x30B9;&#x30C8;&#x306E;&#x7262;&#x7344;&#x304B;&#x3089;&#x629C;&#x3051;&#x51FA;&#x3059;&#x305F;&#x3081;&#x306B; - Qiita</a></p>\n\n<p>チェックリストは、どっちかと言うと、なくして欲しい。<br />\n正直、仕様覚えたり、ロジック考えたりしてると時間的余裕がなくなり、チェックリストの実施は大雑把になる。</p>\n\n<p>また、日本語の問題になることもあるのが、やっかいなところだと思うんだよね。。。</p>\n\n<h2>アプリからのクソクエリを変更できない闇の魔術、に対する防衛術[<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/MySQL\">MySQL</a>]</h2>\n\n<p><a href=\"http://blog.kimuradb.com/?eid=877630\">&#x30A2;&#x30D7;&#x30EA;&#x304B;&#x3089;&#x306E;&#x30AF;&#x30BD;&#x30AF;&#x30A8;&#x30EA;&#x3092;&#x5909;&#x66F4;&#x3067;&#x304D;&#x306A;&#x3044;&#x95C7;&#x306E;&#x9B54;&#x8853;&#x3001;&#x306B;&#x5BFE;&#x3059;&#x308B;&#x9632;&#x885B;&#x8853;[MySQL] | &#x30AD;&#x30E0;&#x30E9;&#x30C7;&#x30FC;&#x30D3;&#x30FC;&#x30D6;&#x30ED;&#x30B0;</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/mysql\">mysql</a>は詳しくないのだが、インデックス張ってなんとか高速化しましたって認識でいいのかな？</p>\n\n<h2>「レガシーのメンテばかりは嫌だ」と言う学生さんへのマジレス</h2>\n\n<p><a href=\"https://qiita.com/e99h2121/items/4a0aa999b40f9a2b30bd\">&#x300C;&#x30EC;&#x30AC;&#x30B7;&#x30FC;&#x306E;&#x30E1;&#x30F3;&#x30C6;&#x3070;&#x304B;&#x308A;&#x306F;&#x5ACC;&#x3060;&#x300D;&#x3068;&#x8A00;&#x3046;&#x5B66;&#x751F;&#x3055;&#x3093;&#x3078;&#x306E;&#x30DE;&#x30B8;&#x30EC;&#x30B9; - Qiita</a></p>\n\n<p>学生の言う「レガシーのメンテばかりは嫌だ」は、たぶん、スキルのつかない場所で働くのは嫌だって意味な気がする。<br />\nアレじゃない？漫画の予告犯みたいな現場を予想している学生が多いんじゃないかな？って気がする。<br />\nさすがに、俺もあんな現場は嫌だよ。。。</p>\n\n<h2>リディクラス（馬鹿馬鹿しいコード）</h2>\n\n<p><a href=\"https://ultrabirdtech.hatenablog.com/entry/2020/12/19/113518\">&#x30EA;&#x30C7;&#x30A3;&#x30AF;&#x30E9;&#x30B9;&#xFF08;&#x99AC;&#x9E7F;&#x99AC;&#x9E7F;&#x3057;&#x3044;&#x30B3;&#x30FC;&#x30C9;&#xFF09; - &#x3070;&#x3041;&#x3069;&#x30FB;&#x3046;&#x3049;&#x3063;&#x3061;&#x3093;&#x3050;</a></p>\n\n<p>見て分かることをコメントに残すのは、意味がない。変数名も同じ。</p>\n\n<h2>よく知らないアプリケーションの性能と戦わないといけないときの防衛術（中編）</h2>\n\n<p><a href=\"https://qiita.com/nfujita55a/items/555350e61b73db3a2b8c\">&#x3088;&#x304F;&#x77E5;&#x3089;&#x306A;&#x3044;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6027;&#x80FD;&#x3068;&#x6226;&#x308F;&#x306A;&#x3044;&#x3068;&#x3044;&#x3051;&#x306A;&#x3044;&#x3068;&#x304D;&#x306E;&#x9632;&#x885B;&#x8853;&#xFF08;&#x4E2D;&#x7DE8;&#xFF09; - Qiita</a></p>\n\n<p>防衛術って、実態調査がメインな気がしてきた。。。<br />\n実態を明らかにするのが難しいんだよね。。。</p>\n\n<h2>検証無視は蜜の味？多くの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>が1度は手を染めたことがあるかもしれない(？)闇魔術</h2>\n\n<p><a href=\"https://qiita.com/thrzn41/items/48f7d1bb83e0f1268005\">&#x691C;&#x8A3C;&#x7121;&#x8996;&#x306F;&#x871C;&#x306E;&#x5473;&#xFF1F;&#x591A;&#x304F;&#x306E;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DE;&#x30FC;&#x304C;1&#x5EA6;&#x306F;&#x624B;&#x3092;&#x67D3;&#x3081;&#x305F;&#x3053;&#x3068;&#x304C;&#x3042;&#x308B;&#x304B;&#x3082;&#x3057;&#x308C;&#x306A;&#x3044;(&#xFF1F;)&#x95C7;&#x9B54;&#x8853; - Qiita</a></p>\n\n<p>認証の話か。。。<br />\nこういう場合は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AA%A5%EC%A5%AA%A5%EC%BE%DA%CC%C0%BD%F1\">オレオレ証明書</a>を作って乗り切れって、誰かが言ってた気がする。</p>\n\n<h2>いつかTomcat10を使用する……気になれないパッケージ名変更の闇</h2>\n\n<p><a href=\"https://qiita.com/nfujita55a/items/b335688ea2a696387deb\">&#x3044;&#x3064;&#x304B;Tomcat10&#x3092;&#x4F7F;&#x7528;&#x3059;&#x308B;&hellip;&hellip;&#x6C17;&#x306B;&#x306A;&#x308C;&#x306A;&#x3044;&#x30D1;&#x30C3;&#x30B1;&#x30FC;&#x30B8;&#x540D;&#x5909;&#x66F4;&#x306E;&#x95C7; - Qiita</a></p>\n\n<p>どこかの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のバージョンで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaEE\">JavaEE</a>が切り離された余波が、Java10で顕在化するわけか。。。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%C5%C5%C2%EE\">関数電卓</a>プログラミングの世界：闇の魔術編</h2>\n\n<p><a href=\"https://stepney141.hatenablog.com/entry/2020/12/24/235437\">&#x95A2;&#x6570;&#x96FB;&#x5353;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x306E;&#x4E16;&#x754C;&#xFF1A;&#x95C7;&#x306E;&#x9B54;&#x8853;&#x7DE8; - Project Fx 2.0</a></p>\n\n<p>話が濃すぎて追いつけそうにないので、スルーします。。。</p>\n\n<h2>【<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ruby\">Ruby</a>】🏡<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/THE%20HOUSE%20OF%20THE%20DEAD\">THE HOUSE OF THE DEAD</a> CODE</h2>\n\n<h2>よく知らないアプリケーションの性能と戦わないといけないときの防衛術（後編）</h2>\n\n<p><a href=\"https://qiita.com/nfujita55a/items/213d32f04f3cdcf7d248\">&#x3088;&#x304F;&#x77E5;&#x3089;&#x306A;&#x3044;&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x306E;&#x6027;&#x80FD;&#x3068;&#x6226;&#x308F;&#x306A;&#x3044;&#x3068;&#x3044;&#x3051;&#x306A;&#x3044;&#x3068;&#x304D;&#x306E;&#x9632;&#x885B;&#x8853;&#xFF08;&#x5F8C;&#x7DE8;&#xFF09; - Qiita</a></p>\n\n<p>もう、追いつけないところまで行ってしまったのね。。。</p>\n\n<h1>全体感想</h1>\n\n<p>話の内容が濃すぎて、追いつけないのがチラホラ。。。</p>\n\n<p>さすがに、専門外は、追いつけないな。。。<br />\nやれることを増やしていかないといけないとは思いました。</p>\n",
      "contentSnippet": "Advent Calendar 2020\n闇の魔術に対する防衛術 Advent Calendar 2020 - Qiita\n書くきっかけ\n僕は光の戦士だが、闇を知ることで戦いに勝利できると思い、各戦士たちの戦いの記録を読んで自分の力にしようと思ったから。（厨二文章です。要約すると、\"みんなの苦労を自分の力にしたいから\"です）\n記録\nDEAD CODE COOKBOOK ~デッドコードの作り方と復活の呪文~ の紹介\nDEAD CODE COOKBOOK ~デッドコードの作り方と復活の呪文~ の紹介 - Qiita\ndead coadよりunreachable codeの方が心が踊る。\nありえない分岐に入るときは、なるべく例外投げるようにしているが、他の人はどうやって付き合っているのだろうかという疑問はある。\n存在しない正規表現 ~正規表現と秘密の部屋~\n存在しない正規表現 ~正規表現と秘密の部屋~ - Qiita\nrubyは疎いのでJSで試したが、たしかに同じ結果になる。\n正規表現が難解なのは、矛盾を作りやすいところにあるのではないかと思った。\n可視化や統計でデータに『恣意的なストーリーを語らせる』16の闇の魔術【bad charts】\n可視化や統計でデータに『恣意的なストーリーを語らせる』16の闇の魔術【bad charts】 - Qiita\n見てて思うところがある。\n無知でそうなることもあれば、恣意的にやることもありそうだ。\n642日前に日本中を震撼させた闇の魔術に対する防衛術 の授業\n642日前に日本中を震撼させた闇の魔術に対する防衛術 の授業 - Qiita\nこれって、ウイルスどうこう言ってたやつだっけ？\nGitHub Hacking ~GitHubを容量無制限のクラウドストレージとして使用する試み~\nGitHub Hacking ~GitHubを容量無制限のクラウドストレージとして使用する試み~ - Qiita\n容量制限の問題は、前に引っかかったことがある。\nよく知らないアプリケーションの性能と戦わないといけないときの防衛術（前編）\nよく知らないアプリケーションの性能と戦わないといけないときの防衛術（前編） - Qiita\nこういうの、場数を踏まないと得られなさそう。。。\nnetstatは、たまに使う。\n話を聞けば分かるんだけど、いざ、実際の問題を目の前にしたら、何もできなくなりそう。。。\nこういうのを訓練できる教材って、どこかにあるものなのだろうか？\n【闇の魔術】【2020年】Qiitaの2020年に読んでおくべき闇の魔術に関する記事１００選【手動集計】\n【闇の魔術】【2020年】Qiitaの2020年に読んでおくべき闇の魔術に関する記事１００選【手動集計】 - Qiita\n理解されやすいコードの書き方\n理解されやすいコードの書き方 - Qiita\nコードの整理方法って感じだった。\nrubyは詳しくないので、サラ見だったが、なんとなく意味は伝わるものもあった。\nExcel VBA に対する防衛術\nExcel VBA に対する防衛術 - Qiita\nVBAでプログラムは組むもんじゃないなと思いました（小並感）\n一般的なプログラミングのパラダイムが通用しないので、普通の感覚で実装するとハマることが多そう。\n作用を「計算」できる Java で純粋関数プログラミングしよう\n作用を「計算」できる Java で純粋関数プログラミングしよう - Qiita\n逆に闇を見ている気がする。。。\nJavaだと、関数型プログラミングは、整理がちゃんとできてないと、逆に可読性を落としそうな気がしないでもない。\necho \"hello, darkness\" ~Webサービスにおけるダークモードという闇~\necho \"hello, darkness\" ~Webサービスにおけるダークモードという闇~ - Qiita\nダークモード対応は、異なる領域で別個に対応があるのが、闇を読んでるんだろうなって気がする。\n// なぜかこの行がないと動かない\n// なぜかこの行がないと動かない - Qiita\n読み物的な感じだったので、既読終了\n【FileMaker】リレーションシップグラフの闇に勝つために\n【FileMaker】リレーションシップグラフの闇に勝つために - Qiita\nFileMakerを詳しくしらんので、なんとも言えないな。。。\n素性がよくわからない闇システムの解析方法\n素性がよくわからない闇システムの解析方法 - Qiita\n読み物的な感じだったので、既読終了\n不死鳥のOffice仕事\n不死鳥のOffice仕事 - 青ポスの部屋\n読み物的な感じだったので、既読終了\nチェックリストの牢獄から抜け出すために\nチェックリストの牢獄から抜け出すために - Qiita\nチェックリストは、どっちかと言うと、なくして欲しい。\nまた、日本語の問題になることもあるのが、やっかいなところだと思うんだよね。。。\nアプリからのクソクエリを変更できない闇の魔術、に対する防衛術[MySQL]\nアプリからのクソクエリを変更できない闇の魔術、に対する防衛術[MySQL] | キムラデービーブログ\nmysqlは詳しくないのだが、インデックス張ってなんとか高速化しましたって認識でいいのかな？\n「レガシーのメンテばかりは嫌だ」と言う学生さんへのマジレス\n「レガシーのメンテばかりは嫌だ」と言う学生さんへのマジレス - Qiita\n学生の言う「レガシーのメンテばかりは嫌だ」は、たぶん、スキルのつかない場所で働くのは嫌だって意味な気がする。\nリディクラス（馬鹿馬鹿しいコード）\nリディクラス（馬鹿馬鹿しいコード） - ばぁど・うぉっちんぐ\n見て分かることをコメントに残すのは、意味がない。変数名も同じ。\nよく知らないアプリケーションの性能と戦わないといけないときの防衛術（中編）\nよく知らないアプリケーションの性能と戦わないといけないときの防衛術（中編） - Qiita\n防衛術って、実態調査がメインな気がしてきた。。。\n検証無視は蜜の味？多くのプログラマーが1度は手を染めたことがあるかもしれない(？)闇魔術\n検証無視は蜜の味？多くのプログラマーが1度は手を染めたことがあるかもしれない(？)闇魔術 - Qiita\n認証の話か。。。\nオレオレ証明書を作って乗り切れって、誰かが言ってた気がする。\nいつかTomcat10を使用する……気になれないパッケージ名変更の闇\nいつかTomcat10を使用する……気になれないパッケージ名変更の闇 - Qiita\nどこかのJavaのバージョンで、JavaEEが切り離された余波が、Java10で顕在化するわけか。。。\n関数電卓プログラミングの世界：闇の魔術編\n関数電卓プログラミングの世界：闇の魔術編 - Project Fx 2.0\n話が濃すぎて追いつけそうにないので、スルーします。。。\n【Ruby】🏡THE HOUSE OF THE DEAD CODE\nよく知らないアプリケーションの性能と戦わないといけないときの防衛術（後編）\nよく知らないアプリケーションの性能と戦わないといけないときの防衛術（後編） - Qiita\nもう、追いつけないところまで行ってしまったのね。。。\n全体感想\n話の内容が濃すぎて、追いつけないのがチラホラ。。。\nさすがに、専門外は、追いつけないな。。。\nやれることを増やしていかないといけないとは思いました。",
      "guid": "hatenablog://entry/26006613671488382",
      "categories": [
        "学習",
        "情報収集"
      ],
      "isoDate": "2020-12-29T13:46:35.000Z"
    },
    {
      "title": "JavaScript Advent Calendar 2020 まとメモ",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/12/29/045315",
      "pubDate": "Tue, 29 Dec 2020 04:53:15 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<ul class=\"table-of-contents\">\n    <li><a href=\"#Advent-Calendar\">Advent Calendar</a></li>\n    <li><a href=\"#きっかけ\">きっかけ</a></li>\n    <li><a href=\"#感想\">感想</a><ul>\n            <li><a href=\"#超初心者向けjavascriptとjQueryの違いは何5分で解説\">【超初心者向け】javascriptとjQueryの違いは何？5分で解説。</a></li>\n            <li><a href=\"#JavaScript-における配列コピー\">JavaScript における配列コピー</a></li>\n            <li><a href=\"#JS直書きでGoogle-DoodleのCanvasを録画してGifに\">JS直書きでGoogle DoodleのCanvasを録画してGifに</a></li>\n            <li><a href=\"#JavaScriptの非同期処理を制御する方法\">JavaScriptの非同期処理を制御する方法</a></li>\n            <li><a href=\"#プログラミング初学者の現役医師がfirebase使って診断名を管理できるLINEBOTを実装してみた\">プログラミング初学者の現役医師が、firebase使って診断名を管理できるLINEBOTを実装してみた。</a></li>\n            <li><a href=\"#Canvas2Dについてさっくり復習してみた\">Canvas2Dについてさっくり復習してみた</a></li>\n            <li><a href=\"#JavaScriptプリミティブ型とオブジェクト型を理解したい\">【JavaScript】プリミティブ型とオブジェクト型を理解したい</a></li>\n            <li><a href=\"#JavaScriptFunctionprototypebind-とthis束縛の歴史\">【JavaScript】Function.prototype.bind() とthis束縛の歴史</a></li>\n            <li><a href=\"#JavaScript非同期処理-まとめ\">【JavaScript】非同期処理 まとめ</a></li>\n            <li><a href=\"#楽天-ラッキーくじを自動化して運試しをしてみる-Tampermonkey篇\">「楽天 ラッキーくじ」を自動化して、運試しをしてみる Tampermonkey篇</a></li>\n            <li><a href=\"#JavaScript-クラスの作り方-JSやURLのアレコレについて触れながらURLを操作するクラスを作ってみよう\">[JavaScript (クラスの作り方)] JSやURLのアレコレについて触れながら、URLを操作するクラスを作ってみよう！</a></li>\n            <li><a href=\"#JavaScript作業効率を上げるためにデバックを身に付けよう\">[JavaScript]作業効率を上げるためにデバックを身に付けよう</a></li>\n            <li><a href=\"#急に難しくなったJavascript\">急に難しくなったJavascript</a></li>\n            <li><a href=\"#JavaScriptの口寄せ的な存在-callメソッド\">JavaScriptの口寄せ的な存在？ call()メソッド</a></li>\n            <li><a href=\"#JavaScriptで特定のキー入力をトリガーにしたい\">JavaScriptで特定のキー入力をトリガーにしたい</a></li>\n            <li><a href=\"#JavaScriptはthisで挫折して初めて成長する\">JavaScriptはthisで挫折して初めて成長する</a></li>\n            <li><a href=\"#JS入門-JS-初めの一歩に必要な知識を解説\">【JS入門】 JS 初めの一歩に必要な知識を解説</a></li>\n            <li><a href=\"#外部サイトへの埋め込みjsタグを作る際に気をつけていること\">外部サイトへの「埋め込みjsタグ」を作る際に気をつけていること</a></li>\n            <li><a href=\"#忙しいプログラマーのための関数型プログラミング\">忙しいプログラマーのための関数型プログラミング</a></li>\n            <li><a href=\"#動的にCSSを生成してテーブルをフィルター\">動的にCSSを生成してテーブルをフィルター</a></li>\n            <li><a href=\"#Web制作で使えるJavaScript集\">Web制作で使えるJavaScript集</a></li>\n            <li><a href=\"#input-typefileをJavaScriptで扱うときに気をつけること\">&lt;input type=\"file\"&gt;をJavaScriptで扱うときに気をつけること</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#TODO\">TODO</a></li>\n</ul>\n\n<h1 id=\"Advent-Calendar\">Advent Calendar</h1>\n\n<p><a href=\"https://qiita.com/advent-calendar/2020/javascript\">JavaScript Advent Calendar 2020 - Qiita</a></p>\n\n<h1 id=\"きっかけ\">きっかけ</h1>\n\n<p>エンジニアとして、周囲に置いていかれないように、多くの人が情報を乗せる場所で自分の知識レベルを合わせるためにまとめてみようと思ったから。</p>\n\n<h1 id=\"感想\">感想</h1>\n\n<h2 id=\"超初心者向けjavascriptとjQueryの違いは何5分で解説\">【超初心者向け】<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>と<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>の違いは何？5分で解説。</h2>\n\n<p><a href=\"https://qiita.com/7note/items/45bd8efbedd557667218\">&#x3010;&#x8D85;&#x521D;&#x5FC3;&#x8005;&#x5411;&#x3051;&#x3011;javascript&#x3068;jQuery&#x306E;&#x9055;&#x3044;&#x306F;&#x4F55;&#xFF1F;5&#x5206;&#x3067;&#x89E3;&#x8AAC;&#x3002; - Qiita</a></p>\n\n<p>最近は、あんまり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jQuery\">jQuery</a>は使わないかな。<br />\njsで楽して書くようにすることが多い。<br />\n未だに、<code>$</code>とかが意味分からなくて、結構固まる。</p>\n\n<p>jsの開発は、nodeってイメージが強い。 <br />\nというか、これって、jsとnodeの違いも、同じことが言えるよね。。。<br />\njsは、ライブラリが大量に出回っているから、素の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の実装と、ライブラリを利用している実装の見分けが、初学者にはキツイ印象がある。<br />\n実際、自分も初めて<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>やったときは、ライブラリを使った記述なのか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>標準の記述なのか迷ったことが多かった気がする。</p>\n\n<h2 id=\"JavaScript-における配列コピー\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> における配列コピー</h2>\n\n<p><a href=\"https://qiita.com/drytt/items/891d363afe3a6dffa530\">JavaScript &#x306B;&#x304A;&#x3051;&#x308B;&#x914D;&#x5217;&#x30B3;&#x30D4;&#x30FC; - Qiita</a></p>\n\n<p>個人的には、concat使っちゃう。<br />\nスプレッド構文は、パット見で固まりそう。。。<br />\n慣れればスプレッドが良いんだろうけど、配列コピーしたいシーンが、まだそんなに多くない。</p>\n\n<h2 id=\"JS直書きでGoogle-DoodleのCanvasを録画してGifに\">JS直書きで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google\">Google</a> Doodleの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Canvas\">Canvas</a>を録画してGifに</h2>\n\n<p><a href=\"https://qiita.com/jerrywdlee/items/f5fdb6587dde184236ef\">JS&#x76F4;&#x66F8;&#x304D;&#x3067;Google Doodle&#x306E;Canvas&#x3092;&#x9332;&#x753B;&#x3057;&#x3066;Gif&#x306B; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>とかのダウンロードの実装って、そうやってできるんだってのが、参考になった。<br />\njsのダウンロードの実装って、どうやってるんだろうって毎回疑問に思ってたが、aタグを使うやり方があるのね。</p>\n\n<h2 id=\"JavaScriptの非同期処理を制御する方法\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の非同期処理を制御する方法</h2>\n\n<p><a href=\"https://qiita.com/renesisu727/items/2779e4f33b3a4f754389\">JavaScript&#x306E;&#x975E;&#x540C;&#x671F;&#x51E6;&#x7406;&#x3092;&#x5236;&#x5FA1;&#x3059;&#x308B;&#x65B9;&#x6CD5; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>やるなら、必ず通る非同期処理だね。<br />\nPromiseは、知らないうちにコールバック地獄になるから、今はawaitをなるべく使うようにしている。</p>\n\n<h2 id=\"プログラミング初学者の現役医師がfirebase使って診断名を管理できるLINEBOTを実装してみた\">プログラミング初学者の現役医師が、firebase使って診断名を管理できるLINEBOTを実装してみた。</h2>\n\n<p><a href=\"https://qiita.com/Teru_3/items/56447a5cc4327d598ba7\">&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0;&#x521D;&#x5B66;&#x8005;&#x306E;&#x73FE;&#x5F79;&#x533B;&#x5E2B;&#x304C;&#x3001;firebase&#x4F7F;&#x3063;&#x3066;&#x8A3A;&#x65AD;&#x540D;&#x3092;&#x7BA1;&#x7406;&#x3067;&#x304D;&#x308B;LINEBOT&#x3092;&#x5B9F;&#x88C5;&#x3057;&#x3066;&#x307F;&#x305F;&#x3002; - Qiita</a></p>\n\n<p>初学者でも、サービス連携すれば、ある程度形になるんだって感じた。<br />\n最初は、まずサービスを作ることが重要なのかもしれない。<br />\n何か作るにしても、いろんなことが気になりすぎて、重要なことの優先順位が落ちるってことは、ありえそう。。。</p>\n\n<h2 id=\"Canvas2Dについてさっくり復習してみた\">Canvas2Dについてさっくり復習してみた</h2>\n\n<p><a href=\"https://qiita.com/ryokio0129/items/33f2d8cba1d4c09fb9d0\">Canvas2D&#x306B;&#x3064;&#x3044;&#x3066;&#x3055;&#x3063;&#x304F;&#x308A;&#x5FA9;&#x7FD2;&#x3057;&#x3066;&#x307F;&#x305F; - Qiita</a></p>\n\n<p>素のCanvas2Dは、俺も触ったことはない。<br />\n何かしらの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>で隠蔽されているものを使うことが多い。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>見たけど、素で使うのは、俺にとってはレベルが高そう。。。</p>\n\n<h2 id=\"JavaScriptプリミティブ型とオブジェクト型を理解したい\">【<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>】プリミティブ型とオブジェクト型を理解したい</h2>\n\n<p><a href=\"https://qiita.com/ta1fukumoto/items/effaa42cd296a2648d41\">&#x3010;JavaScript&#x3011;&#x30D7;&#x30EA;&#x30DF;&#x30C6;&#x30A3;&#x30D6;&#x578B;&#x3068;&#x30AA;&#x30D6;&#x30B8;&#x30A7;&#x30AF;&#x30C8;&#x578B;&#x3092;&#x7406;&#x89E3;&#x3057;&#x305F;&#x3044; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>に型がないと感じるのは、型の宣言を書くことが極端に少ないからではないかと思う。<br />\nめったに書かないから、ないと思ってしまっても仕方ないのかもしれない。</p>\n\n<h2 id=\"JavaScriptFunctionprototypebind-とthis束縛の歴史\">【<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>】Function.prototype.bind() とthis束縛の歴史</h2>\n\n<p><a href=\"https://inside.estie.co.jp/entry/javascript-bind-this\">&#x3010;JavaScript&#x3011;Function.prototype.bind() &#x3068;this&#x675F;&#x7E1B;&#x306E;&#x6B74;&#x53F2; - estie inside blog</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>のthisは、未だによくわからないのが実情。。。<br />\nとりあえず、アロー関数使っておけば、違和感なく使えるって理解くらいしかない。</p>\n\n<p>selfで回避は、昔、よくやったなぁと懐かしむばかりである。<br />\nもう、ここらへんの理詰めは、思い出せない。</p>\n\n<h2 id=\"JavaScript非同期処理-まとめ\">【<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>】非同期処理 まとめ</h2>\n\n<p><a href=\"https://zenn.dev/tentel/articles/8146043d1101b5ea873d\">&#x3010;JavaScript&#x3011;&#x975E;&#x540C;&#x671F;&#x51E6;&#x7406; &#x307E;&#x3068;&#x3081;</a></p>\n\n<p>やっぱり、promise, async/awaitで躓く人は多いんだ。。。<br />\n自分も、理解するのに結構時間がかかった。</p>\n\n<p>Promise.allSettledは、使ったことないな。<br />\nどれかがコケたら例外処理ってのが普通だから、出会ったことがなかった。<br />\nES2020から導入されたから知らんかったのだろうな。。。</p>\n\n<p>あとで試す。</p>\n\n<h2 id=\"楽天-ラッキーくじを自動化して運試しをしてみる-Tampermonkey篇\">「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B3%DA%C5%B7\">楽天</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%C3%A5%AD%A1%BC%A4%AF%A4%B8\">ラッキーくじ</a>」を自動化して、運試しをしてみる Tampermonkey篇</h2>\n\n<p><a href=\"https://qiita.com/QDM/items/2f45f1a21dc813d429e8\">&#x300C;&#x697D;&#x5929; &#x30E9;&#x30C3;&#x30AD;&#x30FC;&#x304F;&#x3058;&#x300D;&#x3092;&#x81EA;&#x52D5;&#x5316;&#x3057;&#x3066;&#x3001;&#x904B;&#x8A66;&#x3057;&#x3092;&#x3057;&#x3066;&#x307F;&#x308B; Tampermonkey&#x7BC7; - Qiita</a></p>\n\n<p>こういうのは、作ったほうが便利なんだとは思うが、なかなか腰が上がらない。。。</p>\n\n<h2 id=\"JavaScript-クラスの作り方-JSやURLのアレコレについて触れながらURLを操作するクラスを作ってみよう\">[<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> (クラスの作り方)] JSやURLのアレコレについて触れながら、URLを操作するクラスを作ってみよう！</h2>\n\n<p><a href=\"https://qiita.com/777_happ/items/2189d740139874044a5a\">[JavaScript (&#x30AF;&#x30E9;&#x30B9;&#x306E;&#x4F5C;&#x308A;&#x65B9;)] JS&#x3084;URL&#x306E;&#x30A2;&#x30EC;&#x30B3;&#x30EC;&#x306B;&#x3064;&#x3044;&#x3066;&#x89E6;&#x308C;&#x306A;&#x304C;&#x3089;&#x3001;URL&#x3092;&#x64CD;&#x4F5C;&#x3059;&#x308B;&#x30AF;&#x30E9;&#x30B9;&#x3092;&#x4F5C;&#x3063;&#x3066;&#x307F;&#x3088;&#x3046;&#xFF01; - Qiita</a></p>\n\n<p>typescriptから入ったせいか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>でも普通にclass書いちゃう。<br />\nむしろ、序盤の方が違和感が強かった。<br />\n古くから<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>やってる人は、classの記載に違和感を覚えたりするのだろうか？</p>\n\n<h2 id=\"JavaScript作業効率を上げるためにデバックを身に付けよう\">[<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>]作業効率を上げるためにデバックを身に付けよう</h2>\n\n<p><a href=\"https://qiita.com/tamakiiii/items/6255c2efb1ad97310519\">[JavaScript]&#x4F5C;&#x696D;&#x52B9;&#x7387;&#x3092;&#x4E0A;&#x3052;&#x308B;&#x305F;&#x3081;&#x306B;&#x30C7;&#x30D0;&#x30C3;&#x30AF;&#x3092;&#x8EAB;&#x306B;&#x4ED8;&#x3051;&#x3088;&#x3046; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>のデバックは、だいたいブラウザで完結できるからな。。。<br />\nただ、サーバーサイドの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>は、そうはいかない。<br />\nconsoleログを大量に使った記憶がある。<br />\nconsole.dir()は、実用性ありそう。</p>\n\n<p>console系のメソッドは、試す。</p>\n\n<h2 id=\"急に難しくなったJavascript\">急に難しくなった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Javascript\">Javascript</a></h2>\n\n<p><a href=\"https://qiita.com/hiro_matsuno2/items/1348b930f428c54dd32a\">&#x6025;&#x306B;&#x96E3;&#x3057;&#x304F;&#x306A;&#x3063;&#x305F;Javascript - Qiita</a></p>\n\n<p>昔が分からんから、なんとも言えないな。。。</p>\n\n<h2 id=\"JavaScriptの口寄せ的な存在-callメソッド\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>の口寄せ的な存在？ call()メソッド</h2>\n\n<p><a href=\"https://qiita.com/saka212/items/67415f8dbaa970487217\">JavaScript&#x306E;&#x53E3;&#x5BC4;&#x305B;&#x7684;&#x306A;&#x5B58;&#x5728;&#xFF1F; call()&#x30E1;&#x30BD;&#x30C3;&#x30C9; - Qiita</a></p>\n\n<p>callは、あんまり使ったことないな。<br />\nただでさえややこしいthisの参照先を覚えるのが嫌だから、アロー関数とかselfでなんとかすることが多かった。</p>\n\n<p>callやapplyからは、かなり嫌な臭いを感じる。<br />\n深みにハマりそうだから、ふ～ん程度で辞めときます。。。</p>\n\n<h2 id=\"JavaScriptで特定のキー入力をトリガーにしたい\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で特定のキー入力をトリガーにしたい</h2>\n\n<p><a href=\"https://qiita.com/kurachi_web/items/8f14c4ac40e35660d7bd\">JavaScript&#x3067;&#x7279;&#x5B9A;&#x306E;&#x30AD;&#x30FC;&#x5165;&#x529B;&#x3092;&#x30C8;&#x30EA;&#x30AC;&#x30FC;&#x306B;&#x3057;&#x305F;&#x3044; - Qiita</a></p>\n\n<p>特に目新しいものはなかったので、既読</p>\n\n<h2 id=\"JavaScriptはthisで挫折して初めて成長する\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>はthisで挫折して初めて成長する</h2>\n\n<p><a href=\"https://qiita.com/hikaruright/items/cf064c2e6d458a586c61\">JavaScript&#x306F;this&#x3067;&#x632B;&#x6298;&#x3057;&#x3066;&#x521D;&#x3081;&#x3066;&#x6210;&#x9577;&#x3059;&#x308B; - Qiita</a></p>\n\n<p>やっぱり、thisで挫折するのは全員共通なんだ。。。</p>\n\n<h2 id=\"JS入門-JS-初めの一歩に必要な知識を解説\">【JS入門】 JS 初めの一歩に必要な知識を解説</h2>\n\n<p><a href=\"https://qiita.com/suk1012/items/b4a893dc2140fc4e5542\">&#x3010;JS&#x5165;&#x9580;&#x3011; JS &#x521D;&#x3081;&#x306E;&#x4E00;&#x6B69;&#x306B;&#x5FC5;&#x8981;&#x306A;&#x77E5;&#x8B58;&#x3092;&#x89E3;&#x8AAC; - Qiita</a></p>\n\n<p>特に目新しいものはなかったので、既読</p>\n\n<h2 id=\"外部サイトへの埋め込みjsタグを作る際に気をつけていること\">外部サイトへの「埋め込みjsタグ」を作る際に気をつけていること</h2>\n\n<p><a href=\"https://qiita.com/matsuyoro/items/d6793ab9e5bf0228c302\">&#x5916;&#x90E8;&#x30B5;&#x30A4;&#x30C8;&#x3078;&#x306E;&#x300C;&#x57CB;&#x3081;&#x8FBC;&#x307F;js&#x30BF;&#x30B0;&#x300D;&#x3092;&#x4F5C;&#x308B;&#x969B;&#x306B;&#x6C17;&#x3092;&#x3064;&#x3051;&#x3066;&#x3044;&#x308B;&#x3053;&#x3068; - Qiita</a></p>\n\n<p>scriptタグにasyncを付けられるのを初めて知った。<br />\ndom操作系ならdeferがまるそう。<br />\nいっつも、onloadで完了後にdom操作してたが、そんなことしなくても良かったんだな。。。</p>\n\n<h2 id=\"忙しいプログラマーのための関数型プログラミング\">忙しい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>のための<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0\">関数型プログラミング</a></h2>\n\n<p><a href=\"https://kentutorialbook.github.io/fpbook-free/\">&#x5FD9;&#x3057;&#x3044;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DE;&#x30FC;&#x306E;&#x305F;&#x3081;&#x306E;&#x95A2;&#x6570;&#x578B;&#x30D7;&#x30ED;&#x30B0;&#x30E9;&#x30DF;&#x30F3;&#x30B0; Functional Programming for the Working Programmer</a></p>\n\n<ul>\n<li>メモ\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0\">関数型プログラミング</a>＝順次・分岐・反復をラムダ計算に置換すること</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0\">関数型プログラミング</a>＝文→式への置換で、置き換えられないことはない（数学的に証明されている）</li>\n</ul>\n</li>\n</ul>\n\n\n<p>UNIT1に該当する箇所を読んで、挫折しました。。。<br />\nなんとかUNIT1相当の箇所は読み込めたけど、それ以降はキツイ。。。</p>\n\n<h2 id=\"動的にCSSを生成してテーブルをフィルター\">動的に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>を生成してテーブルをフィルター</h2>\n\n<p><a href=\"https://zenn.dev/guregu/articles/7726906404ee15\">&#x52D5;&#x7684;&#x306B;CSS&#x3092;&#x751F;&#x6210;&#x3057;&#x3066;&#x30C6;&#x30FC;&#x30D6;&#x30EB;&#x3092;&#x30D5;&#x30A3;&#x30EB;&#x30BF;&#x30FC;</a></p>\n\n<p>どっちかと言うと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>がメインな気がしないでもない。</p>\n\n<h2 id=\"Web制作で使えるJavaScript集\">Web制作で使える<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>集</h2>\n\n<p><a href=\"https://qiita.com/matusda2112/items/f10d50aab1fe672241fa\">Web&#x5236;&#x4F5C;&#x3067;&#x4F7F;&#x3048;&#x308B;JavaScript&#x96C6; - Qiita</a></p>\n\n<p>List.jsは、気になった。最近、個人で開発しているのやつで、データの表記をどうするか考えているのがあったのだが、使えそうな気がしないでもない。</p>\n\n<h2 id=\"input-typefileをJavaScriptで扱うときに気をつけること\"><code>&lt;input type=\"file\"&gt;</code>を<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で扱うときに気をつけること</h2>\n\n<p><a href=\"https://www.desto.me/blog/20201225/\">&lt;input type=&quot;file&quot;&gt;&#x3092;JavaScript&#x3067;&#x6271;&#x3046;&#x3068;&#x304D;&#x306B;&#x6C17;&#x3092;&#x3064;&#x3051;&#x308B;&#x3053;&#x3068; - &#x9752;&#x8272;&#x306E;&#x7D19;&#x5207;&#x308C;</a></p>\n\n<p><code>&lt;input type=\"file\"&gt;</code>で、最近悩まされていろいろ調べたから、既知だった。</p>\n\n<h1 id=\"TODO\">TODO</h1>\n\n<ul>\n<li>Promise.allSettledを試す</li>\n<li>console系のメソッドを試す</li>\n</ul>\n\n",
      "contentSnippet": "Advent Calendar\nきっかけ\n感想\n【超初心者向け】javascriptとjQueryの違いは何？5分で解説。\nJavaScript における配列コピー\nJS直書きでGoogle DoodleのCanvasを録画してGifに\nJavaScriptの非同期処理を制御する方法\nプログラミング初学者の現役医師が、firebase使って診断名を管理できるLINEBOTを実装してみた。\nCanvas2Dについてさっくり復習してみた\n【JavaScript】プリミティブ型とオブジェクト型を理解したい\n【JavaScript】Function.prototype.bind() とthis束縛の歴史\n【JavaScript】非同期処理 まとめ\n「楽天 ラッキーくじ」を自動化して、運試しをしてみる Tampermonkey篇\n[JavaScript (クラスの作り方)] JSやURLのアレコレについて触れながら、URLを操作するクラスを作ってみよう！\n[JavaScript]作業効率を上げるためにデバックを身に付けよう\n急に難しくなったJavascript\nJavaScriptの口寄せ的な存在？ call()メソッド\nJavaScriptで特定のキー入力をトリガーにしたい\nJavaScriptはthisで挫折して初めて成長する\n【JS入門】 JS 初めの一歩に必要な知識を解説\n外部サイトへの「埋め込みjsタグ」を作る際に気をつけていること\n忙しいプログラマーのための関数型プログラミング\n動的にCSSを生成してテーブルをフィルター\nWeb制作で使えるJavaScript集\n<input type=\"file\">をJavaScriptで扱うときに気をつけること\nTODO\nAdvent Calendar\nJavaScript Advent Calendar 2020 - Qiita\nきっかけ\nエンジニアとして、周囲に置いていかれないように、多くの人が情報を乗せる場所で自分の知識レベルを合わせるためにまとめてみようと思ったから。\n感想\n【超初心者向け】javascriptとjQueryの違いは何？5分で解説。\n【超初心者向け】javascriptとjQueryの違いは何？5分で解説。 - Qiita\n最近は、あんまりjQueryは使わないかな。\n$とかが意味分からなくて、結構固まる。\njsの開発は、nodeってイメージが強い。 \nJavaScriptの実装と、ライブラリを利用している実装の見分けが、初学者にはキツイ印象がある。\nJavaScriptやったときは、ライブラリを使った記述なのか、JavaScript標準の記述なのか迷ったことが多かった気がする。\nJavaScript における配列コピー\nJavaScript における配列コピー - Qiita\n個人的には、concat使っちゃう。\nJS直書きでGoogle DoodleのCanvasを録画してGifに\nJS直書きでGoogle DoodleのCanvasを録画してGifに - Qiita\ncanvasとかのダウンロードの実装って、そうやってできるんだってのが、参考になった。\nJavaScriptの非同期処理を制御する方法\nJavaScriptの非同期処理を制御する方法 - Qiita\nJavaScriptやるなら、必ず通る非同期処理だね。\nプログラミング初学者の現役医師が、firebase使って診断名を管理できるLINEBOTを実装してみた。\nプログラミング初学者の現役医師が、firebase使って診断名を管理できるLINEBOTを実装してみた。 - Qiita\n初学者でも、サービス連携すれば、ある程度形になるんだって感じた。\nCanvas2Dについてさっくり復習してみた\nCanvas2Dについてさっくり復習してみた - Qiita\n素のCanvas2Dは、俺も触ったことはない。\nフレームワークで隠蔽されているものを使うことが多い。\nAPI見たけど、素で使うのは、俺にとってはレベルが高そう。。。\n【JavaScript】プリミティブ型とオブジェクト型を理解したい\n【JavaScript】プリミティブ型とオブジェクト型を理解したい - Qiita\nJavaScriptに型がないと感じるのは、型の宣言を書くことが極端に少ないからではないかと思う。\n【JavaScript】Function.prototype.bind() とthis束縛の歴史\n【JavaScript】Function.prototype.bind() とthis束縛の歴史 - estie inside blog\njavascriptのthisは、未だによくわからないのが実情。。。\nselfで回避は、昔、よくやったなぁと懐かしむばかりである。\n【JavaScript】非同期処理 まとめ\n【JavaScript】非同期処理 まとめ\nやっぱり、promise, async/awaitで躓く人は多いんだ。。。\nPromise.allSettledは、使ったことないな。\nあとで試す。\n「楽天 ラッキーくじ」を自動化して、運試しをしてみる Tampermonkey篇\n「楽天 ラッキーくじ」を自動化して、運試しをしてみる Tampermonkey篇 - Qiita\nこういうのは、作ったほうが便利なんだとは思うが、なかなか腰が上がらない。。。\n[JavaScript (クラスの作り方)] JSやURLのアレコレについて触れながら、URLを操作するクラスを作ってみよう！\n[JavaScript (クラスの作り方)] JSやURLのアレコレについて触れながら、URLを操作するクラスを作ってみよう！ - Qiita\ntypescriptから入ったせいか、javascriptでも普通にclass書いちゃう。\njavascriptやってる人は、classの記載に違和感を覚えたりするのだろうか？\n[JavaScript]作業効率を上げるためにデバックを身に付けよう\n[JavaScript]作業効率を上げるためにデバックを身に付けよう - Qiita\njavascriptのデバックは、だいたいブラウザで完結できるからな。。。\njavascriptは、そうはいかない。\nconsole系のメソッドは、試す。\n急に難しくなったJavascript\n急に難しくなったJavascript - Qiita\n昔が分からんから、なんとも言えないな。。。\nJavaScriptの口寄せ的な存在？ call()メソッド\nJavaScriptの口寄せ的な存在？ call()メソッド - Qiita\ncallは、あんまり使ったことないな。\ncallやapplyからは、かなり嫌な臭いを感じる。\nJavaScriptで特定のキー入力をトリガーにしたい\nJavaScriptで特定のキー入力をトリガーにしたい - Qiita\n特に目新しいものはなかったので、既読\nJavaScriptはthisで挫折して初めて成長する\nJavaScriptはthisで挫折して初めて成長する - Qiita\nやっぱり、thisで挫折するのは全員共通なんだ。。。\n【JS入門】 JS 初めの一歩に必要な知識を解説\n【JS入門】 JS 初めの一歩に必要な知識を解説 - Qiita\n特に目新しいものはなかったので、既読\n外部サイトへの「埋め込みjsタグ」を作る際に気をつけていること\n外部サイトへの「埋め込みjsタグ」を作る際に気をつけていること - Qiita\nscriptタグにasyncを付けられるのを初めて知った。\n忙しいプログラマーのための関数型プログラミング\n忙しいプログラマーのための関数型プログラミング Functional Programming for the Working Programmer\nメモ\n\n\n関数型プログラミング＝順次・分岐・反復をラムダ計算に置換すること\n関数型プログラミング＝文→式への置換で、置き換えられないことはない（数学的に証明されている）\nUNIT1に該当する箇所を読んで、挫折しました。。。\n動的にCSSを生成してテーブルをフィルター\n動的にCSSを生成してテーブルをフィルター\nどっちかと言うと、正規表現がメインな気がしないでもない。\nWeb制作で使えるJavaScript集\nWeb制作で使えるJavaScript集 - Qiita\nList.jsは、気になった。最近、個人で開発しているのやつで、データの表記をどうするか考えているのがあったのだが、使えそうな気がしないでもない。\n<input type=\"file\">をJavaScriptで扱うときに気をつけること\n<input type=\"file\">をJavaScriptで扱うときに気をつけること - 青色の紙切れ\n<input type=\"file\">で、最近悩まされていろいろ調べたから、既知だった。\nTODO\nPromise.allSettledを試す\nconsole系のメソッドを試す",
      "guid": "hatenablog://entry/26006613661845969",
      "categories": [
        "JavaScript",
        "プログラミング",
        "学習",
        "日記",
        "情報収集"
      ],
      "isoDate": "2020-12-28T19:53:15.000Z"
    },
    {
      "title": "Java Advent Calendar 2020 まとメモ",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/12/28/113924",
      "pubDate": "Mon, 28 Dec 2020 11:39:24 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>Advent Calendar</h1>\n\n<p><a href=\"https://qiita.com/advent-calendar/2020/java\">Java Advent Calendar 2020 - Qiita</a></p>\n\n<h1>きっかけ</h1>\n\n<p>周囲のエンジニアに置いていかれないよう、投稿されてる内容を把握できれば、ある程度やっていけるはず。<br />\nだから、書いてある内容には一通り目を通して、知らないことを知るようにしていこうと思い、書くに至った。</p>\n\n<h1>感想</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Jakarta\">Jakarta</a> EEをはじめよう！</h2>\n\n<p><a href=\"https://qiita.com/tkxlab/items/07083168be6400d71fd4\">Jakarta EE&#x3092;&#x306F;&#x3058;&#x3081;&#x3088;&#x3046;&#xFF01; - Qiita</a></p>\n\n<p>パット見た感じ、Springに近い印象を受けた。<br />\nweb系の開発が、Spring系から入ったから、そう見えるのかもしれない。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSF\">JSF</a>は、業務で使ったことが１度ある。<br />\n使用感的には、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSP\">JSP</a>と似ていた印象。<br />\nHTMLではないので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/web%A5%C7%A5%B6%A5%A4%A5%CA%A1%BC\">webデザイナー</a>と共同開発しにくい印象がある。<br />\n使ってたときは、デザインの取り込みが苦しかった。</p>\n\n<h2>Java8の日時<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>における期間の重複判定</h2>\n\n<p><a href=\"https://qiita.com/exotic-toybox/items/afbc2a42b53c122a3376\">Java8&#x306E;&#x65E5;&#x6642;API&#x306B;&#x304A;&#x3051;&#x308B;&#x671F;&#x9593;&#x306E;&#x91CD;&#x8907;&#x5224;&#x5B9A; - Qiita</a></p>\n\n<p>コメントにあった、ThreeTen Extraのほうが気になってしまった。。。<br />\nちょっと後で見てみる。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%E0%A5%C0%BC%B0\">ラムダ式</a>やStream <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>の可読性を向上させるテクニック</h2>\n\n<p><a href=\"https://qiita.com/yonetty/items/24d9a075bf630b1b096f\">Java&#x306E;&#x30E9;&#x30E0;&#x30C0;&#x5F0F;&#x3084;Stream API&#x306E;&#x53EF;&#x8AAD;&#x6027;&#x3092;&#x5411;&#x4E0A;&#x3055;&#x305B;&#x308B;&#x30C6;&#x30AF;&#x30CB;&#x30C3;&#x30AF; - Qiita</a></p>\n\n<p>ロジックを入れないのは、同意。<br />\nロジック入れると、それってfor文で書くのと変わらなくなるからな。<br />\nstreamを使うのなら、きちんとメソッド使って処理を意味あるまとまりでまとめる必要がある。</p>\n\n<p>static import は、なるほどと思った。<br />\nstreamを使うと、終端処理でCollectors をよく使うから、static import使うのはありかもしれない。<br />\n怖いのは名前衝突くらいかな？設計で回避できそうな気もする。</p>\n\n<p>関数型インタフェースを作るってのは、少し敷居が高いような気がする。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>だと違和感なく作れるのだが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>だと、まだ戸惑うことが多い。<br />\n言語的な特性から来ている可能性もありそう。</p>\n\n<h2>StringUtils#containsAnyメソッドの注意</h2>\n\n<p><a href=\"https://qiita.com/cyrus07424/items/2730da5a3053dbdd899c\">StringUtils#containsAny&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x6CE8;&#x610F; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/apache\">apache</a>のStringUtilsは、ごくたまに使う。<br />\nプライベートで使ったことはないが、業務で利用するくらい。</p>\n\n<p>だいたい、足りないと思ったら、Util落とすより自作しちゃうんだよね。。。</p>\n\n<h2>Proxy環境下のSpring Securityを攻略する</h2>\n\n<p><a href=\"https://qiita.com/SierSetup/items/01d689834b4afabdd878\">Proxy&#x74B0;&#x5883;&#x4E0B;&#x306E;Spring Security&#x3092;&#x653B;&#x7565;&#x3059;&#x308B; - Qiita</a></p>\n\n<p>認証系とかやってると、プロキシ周りで詰まることってあるよね。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>ではないが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/XSS\">XSS</a>回避のためにプロキシ自作するってなったことがあった。<br />\nあそこらへんは、また作れる気がしない。。。</p>\n\n<p>通信の、特にセキュリティ絡みは、非常に知識を要するのが辛いんだ。。。</p>\n\n<h2>ImageIOで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Jpeg\">Jpeg</a>の品質を上げる</h2>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fconeta.jp%2Farticle%2Fshow%2F2692\" title=\"エンジニアのための小ネタ共有サービス | Coneta.jp\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://coneta.jp/article/show/2692\">coneta.jp</a></cite></p>\n\n<p>デフォルトの品質レベルが低いのだろうか？<br />\n指定してあげないと、低レベルで出力しているような気がする。。。</p>\n\n<h2>念のためもう一度<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%EB%A5%B3%B8%EC\">トルコ語</a>（等）で起こる問題について整理する</h2>\n\n<p><a href=\"https://qiita.com/hatano/items/b5fa8ccd5d8321b35489\">&#x5FF5;&#x306E;&#x305F;&#x3081;&#x3082;&#x3046;&#x4E00;&#x5EA6;&#x30C8;&#x30EB;&#x30B3;&#x8A9E;&#xFF08;&#x7B49;&#xFF09;&#x3067;&#x8D77;&#x3053;&#x308B;&#x554F;&#x984C;&#x306B;&#x3064;&#x3044;&#x3066;&#x6574;&#x7406;&#x3059;&#x308B; - Qiita</a></p>\n\n<p>かなりややこしい問題だな。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>の問題は、表面化することはほとんどないけど、表面化するとハマりそう。。。</p>\n\n<p>教訓としては、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9\">文字コード</a>は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/UTF-8\">UTF-8</a>安定って理解でＯＫ？</p>\n\n<h2>カウント処理をしたい時</h2>\n\n<p><a href=\"https://coneta.jp/article/show/2656\">Coneta</a></p>\n\n<p>文字の出現数カウントの実装ね。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>は、こういうのがやりにくい印象がある。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/python\">python</a>は、それが楽にできるから、分析系で多用されているような気がする。<br />\nデータ操作の問題かもしれない。</p>\n\n<h2>InputStreamからStringへの変換</h2>\n\n<p><a href=\"https://coneta.jp/article/show/2649\">Coneta</a></p>\n\n<p>この実装、たまに使う。<br />\n読み込んだやつをどこかに入れてとか実装してると、長くなるし、バグ混入も増えるから、なるべくこういう実装をするようにはしてる。</p>\n\n<h2>Bukkit<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3\">プラグイン</a>開発 - コマンド処理、最適化編</h2>\n\n<p><a href=\"https://qiita.com/STSynthe/items/287869b03bef6f78418f\">Bukkit&#x30D7;&#x30E9;&#x30B0;&#x30A4;&#x30F3;&#x958B;&#x767A; - &#x30B3;&#x30DE;&#x30F3;&#x30C9;&#x51E6;&#x7406;&#x3001;&#x6700;&#x9069;&#x5316;&#x7DE8; - Qiita</a></p>\n\n<p>コマンドパターンの説明ぽかったかな？<br />\nBukkitって何？って思って調べたら、マ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A4%A5%AF%A5%E9\">イクラ</a>のサーバーみたいだね。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>でコマンドパターンはあんまり見ないけど、実装したら、そうなるよね。</p>\n\n<p>クラス図があると、理解はしやすかったかなと思う。</p>\n\n<h2>SpringBootとQuickFIX/Jで爆速でFIXサーバを実装する話 - 今日からあなたもオンラインブローカー?</h2>\n\n<p><a href=\"https://qiita.com/RyuSA/items/6ac039ab4d0050b9a668\">SpringBoot&#x3068;QuickFIX/J&#x3067;&#x7206;&#x901F;&#x3067;FIX&#x30B5;&#x30FC;&#x30D0;&#x3092;&#x5B9F;&#x88C5;&#x3059;&#x308B;&#x8A71; - &#x4ECA;&#x65E5;&#x304B;&#x3089;&#x3042;&#x306A;&#x305F;&#x3082;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x30D6;&#x30ED;&#x30FC;&#x30AB;&#x30FC;? - Qiita</a></p>\n\n<p>reactiveプログラミングみたいなものだろうか？<br />\n使われてる技術は理解したが、FXは怖くて手が出せんな。。。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>の例外処理入門</h2>\n\n<p><a href=\"https://qiita.com/yk0807/items/cca9ef463d6c3710cf41\">Java&#x306E;&#x4F8B;&#x5916;&#x51E6;&#x7406;&#x5165;&#x9580; - Qiita</a></p>\n\n<p>内容自体は、それほど目新しいものではなかったので、サラッと読んで終わり。</p>\n\n<p>例外の話になると、毎回どっちだったか分からなくなるのが、RuntimeExceptionが検査例外か非検査例外かという個人的な悩みがある。<br />\nいい覚え方ないだろうか？<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>以外は、JSをよく触るのだが、JSは、非検査例外ばかりだから、あんまり意識しないけど、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>だとどっちだったか、たまに分からなくなる。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のオートボクシングでの注意</h2>\n\n<p><a href=\"https://coneta.jp/article/show/2435\">Coneta</a></p>\n\n<p>キャッシュされない値同士の比較になるから、\"==\"での結果が変わるって認識であってるかな？<br />\n言語仕様や、他サイトの説明見てると、そのように受け取った。</p>\n\n<p>そもそも、オブジェクト同士を比較するときに\"==\"を使うのは、危険だね。<br />\nアンボクシングされるってのがあっても、同じということだな。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のプロが避ける「波かっこ」の駄目な使い方は規約によるので規約を読んでみよう</h2>\n\n<p><a href=\"https://qiita.com/e99h2121/items/c2d4e22152f27e35bb2e#%E5%85%83%E8%A8%98%E4%BA%8B%E3%81%AE%E5%86%92%E9%A0%AD\">Java&#x306E;&#x30D7;&#x30ED;&#x304C;&#x907F;&#x3051;&#x308B;&#x300C;&#x6CE2;&#x304B;&#x3063;&#x3053;&#x300D;&#x306E;&#x99C4;&#x76EE;&#x306A;&#x4F7F;&#x3044;&#x65B9;&#x306F;&#x898F;&#x7D04;&#x306B;&#x3088;&#x308B;&#x306E;&#x3067;&#x898F;&#x7D04;&#x3092;&#x8AAD;&#x3093;&#x3067;&#x307F;&#x3088;&#x3046; - Qiita</a></p>\n\n<p>その人が育ってきた環境によるかな？ってのが個人的な感想。<br />\nプロジェクトに依存するのではなかろうかと思う。<br />\n個人的には、波括弧始まりの行ができないようにするのが無難だとは思うが。。。</p>\n\n<p>コーディング規約次第ですってのが、正直なところ。<br />\n下っ端エンジニアなんで、規約には逆らえないのです。<br />\n規約には従うが、自分が作る立場なら、なるべく一般的な規約になるようにする。</p>\n\n<p>あと、脱線するけど、規約を守れって散々言われたのだが、規約が守られるような土壌を作れよって思う。<br />\nレビューで散々指摘されたけど、記憶を頼りに規約を守るのは、無理がある。<br />\n覚えたって、その現場でしか使えないじゃんって思っているので、覚える気はサラサラない。<br />\nlintなりcodestyleなりで警告出してくれないと、個人の記憶力ベースの実装になり、絶対にむらが出ると思うんだよね。<br />\nそれで生産性が～とか言い出したら、マジでキレるかもしれない。</p>\n\n<h2>SPA(Vue.js) + <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>構成でSpring Secirityで認証まで作った時に気を付けることや大事なこと</h2>\n\n<p><a href=\"https://qiita.com/szktmyk38f/items/6f770dda15750aab9d60\">SPA(Vue.js) + REST API&#x69CB;&#x6210;&#x3067;Spring Secirity&#x3067;&#x8A8D;&#x8A3C;&#x307E;&#x3067;&#x4F5C;&#x3063;&#x305F;&#x6642;&#x306B;&#x6C17;&#x3092;&#x4ED8;&#x3051;&#x308B;&#x3053;&#x3068;&#x3084;&#x5927;&#x4E8B;&#x306A;&#x3053;&#x3068; - Qiita</a></p>\n\n<p>認証って聞くと、発狂しそうになる病なので、読むのが辛かった。。。<br />\nCORS対策が必須になるのは、どこも同じだね。<br />\n自分は、JSで作ってたので、JSでCORS対策していたが、初めてやったときはプロキシ用の実装組んだりしたりして、かなり辛かった。<br />\nSPAが難しいのは、そういった対策をせねばならないところにあるのではなかろうかと思う。</p>\n\n<h2>【業務系】世の中に逆行する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のWebアプリでの画面<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>選定</h2>\n\n<p><a href=\"https://qiita.com/digdagdag/items/21f4d9978a9d3ddc9868\">&#x3010;&#x696D;&#x52D9;&#x7CFB;&#x3011;&#x4E16;&#x306E;&#x4E2D;&#x306B;&#x9006;&#x884C;&#x3059;&#x308B;Java&#x306E;Web&#x30A2;&#x30D7;&#x30EA;&#x3067;&#x306E;&#x753B;&#x9762;&#x30D5;&#x30EC;&#x30FC;&#x30E0;&#x30EF;&#x30FC;&#x30AF;&#x9078;&#x5B9A; - Qiita</a></p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSF\">JSF</a>は使ったことがあるが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JSP\">JSP</a>と対して変わらない。<br />\n画面作るときに、かなり苦労するイメージしかない。<br />\nデザイナーの仕事を殺す可能性が高いので、個人的にはあまり使いたくはない。</p>\n\n<p>Vaadin/CUBA Platformも見たが、やはり、フロントサイドはHTML/<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/CSS\">CSS</a>+JSが最適だとは思う。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>コレクション操作の基礎</h2>\n\n<p><a href=\"https://zenn.dev/yuta_saito/articles/eb083da7d5413e4228c9\">Java&#x30B3;&#x30EC;&#x30AF;&#x30B7;&#x30E7;&#x30F3;&#x64CD;&#x4F5C;&#x306E;&#x57FA;&#x790E;</a></p>\n\n<p>データ構造を理解すれば、操作はある程度直感的に分かるんじゃないのかなってのが、自分の持論。<br />\n基本的に、map/set/listの構造を抑えておけば、だいたいの業務で通用する実装はかけると思う。<br />\nやり方は、書類整理とかと一緒だから、構造さえ理解できれば、できる操作は直感的に分かるものだと信じたい。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/python\">python</a>とかは、データ構造の種類が多い印象がある。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>は、ゆるいデータ構造を使っている印象。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> の + <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>による文字列結合は、どのように処理されているのか</h2>\n\n<p><a href=\"https://qiita.com/YujiSoftware/items/62505944e49edf95fa11\">Java &#x306E; + &#x6F14;&#x7B97;&#x5B50;&#x306B;&#x3088;&#x308B;&#x6587;&#x5B57;&#x5217;&#x7D50;&#x5408;&#x306F;&#x3001;&#x3069;&#x306E;&#x3088;&#x3046;&#x306B;&#x51E6;&#x7406;&#x3055;&#x308C;&#x3066;&#x3044;&#x308B;&#x306E;&#x304B; - Qiita</a></p>\n\n<p>裏でそんなことしてるのかぁってのが正直な感想。<br />\n今まで、あまり深くは考えなかったが、読んでいて、学生の頃にCの勉強したときに文字列を文字の配列としているってのを思い出した。<br />\nその感覚で、最終的なデータとしての保持はバイトってのは、なんとなく腑には落ちる。</p>\n\n<p>裏で結構な量の処理をしているんだなって思った。\n今度から、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>で文字操作するときは、「<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>さん、ありがとう」ってお礼言うようにしようと思います。</p>\n\n<h2>null「俺が俺で無くなってゆく」</h2>\n\n<p><a href=\"https://qiita.com/dhirabayashi/items/50c4d213db6186f7b0f4\">null&#x300C;&#x4FFA;&#x304C;&#x4FFA;&#x3067;&#x7121;&#x304F;&#x306A;&#x3063;&#x3066;&#x3086;&#x304F;&#x300D; - Qiita</a></p>\n\n<p>何か厨二臭いタイトルだな。。。</p>\n\n<p>ちなみに、自分は緑茶派です。<br />\nコーヒーは、カフェイン量が多すぎて、下痢になったり頭痛がすることが多いので、あんまり飲まない。</p>\n\n<p>nullの解釈仕方って感じの記事だった。<br />\nnullで揉めるのは、どっちかと言うと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>で起きやすい印象。<br />\nundefindeとnullで論争が起きた現場を、何回か見たからね。。。</p>\n\n<h2>Java8 Optionalの逆引きレシピ</h2>\n\n<p><a href=\"https://qiita.com/n_slender/items/bab37279bd2aebaae2f0\">Java8 Optional&#x306E;&#x9006;&#x5F15;&#x304D;&#x30EC;&#x30B7;&#x30D4; - Qiita</a></p>\n\n<p>Optionalは、便利だとは思うけど、なかなか手が出せてない。<br />\nOptional#getは、俺も使わない。<br />\nなぜなら、Optionalを使ってるメリットが無くなってしまうから。<br />\n廃止にしてもいいのではないかとすら思ってる。</p>\n\n<p>ほとんどの場合は、ifPresentを使うような気がする。</p>\n\n<p>Optionalは使わない方がいいケースが参考になった。<br />\n値がないことが他の表現で可能な場合は、そちらに寄せたほうが結果的に都合がいいことが多いのだろう。</p>\n\n<h2>JFRとモニタリングの融合？ JEP 349: JFR Event Streamingを触ってみる</h2>\n\n<p><a href=\"https://zenn.dev/koduki/articles/42c98a330bf25c\">JFR&#x3068;&#x30E2;&#x30CB;&#x30BF;&#x30EA;&#x30F3;&#x30B0;&#x306E;&#x878D;&#x5408;&#xFF1F; JEP 349: JFR Event Streaming&#x3092;&#x89E6;&#x3063;&#x3066;&#x307F;&#x308B;</a></p>\n\n<p>監視の作業をあまりしてきたことがないので、何がメリットなのか、あまり理解できていない。</p>\n\n<h2>段階的に理解する <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Dependency\">Dependency</a> Injection</h2>\n\n<p><a href=\"https://qiita.com/ts7i/items/51a0b0b2c8a3b6e625f7\">&#x6BB5;&#x968E;&#x7684;&#x306B;&#x7406;&#x89E3;&#x3059;&#x308B; Dependency Injection - Qiita</a></p>\n\n<p>ServiceLocaterは、初めて効いた気がする。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8\">コンポーネント</a>スキャンに使われているのだろうか？<br />\nDIに至るまでの依存との戦いを見ているような感じだった。。。<br />\nDIと簡単に言うには、こういった経緯を知らないといけないのかもしれない。<br />\n個人でDIと合う前に開発していたときは、こういう問題をレベル４程度のことまでは考えていた気がする。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VSCode\">VSCode</a>で作る<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>開発環境＆Spring Bootアプリケーション入門</h2>\n\n<p><a href=\"https://qiita.com/takumi_links/items/fe71cfeb4dfaa76fbe31\">VSCode&#x3067;&#x4F5C;&#x308B;Java&#x958B;&#x767A;&#x74B0;&#x5883;&#xFF06;Spring Boot&#x30A2;&#x30D7;&#x30EA;&#x30B1;&#x30FC;&#x30B7;&#x30E7;&#x30F3;&#x5165;&#x9580; - Qiita</a></p>\n\n<p>自分も、inteliJか<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/eclipse\">eclipse</a>を使っていたが、最近は、ちょっとしたコードを書く場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>で書くことが多い。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/maven\">maven</a>やgradleを利用する場合は、inteliJとか使うんだろうけど、簡単なプログラムであれば、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>でやる。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/IDE\">IDE</a>は、たしかに便利だが、早期ビルドに対応しきれていない場合、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C6%A5%AD%A5%B9%A5%C8%A5%A8%A5%C7%A5%A3%A5%BF\">テキストエディタ</a>でやるほうが便利な場合もある。<br />\n大規模開発するなら<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/IDE\">IDE</a>使うけど、ちょっとしたことをやるのなら、案外<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>でも十分なのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>の早期ビルドを試すときに使ってて思う。</p>\n\n<h2>RESTfulなメール送信サービス＋クライアントを作ってみよう</h2>\n\n<p><a href=\"https://qiita.com/tkxlab/items/498cc821de13fe7ba2a9\">RESTful&#x306A;&#x30E1;&#x30FC;&#x30EB;&#x9001;&#x4FE1;&#x30B5;&#x30FC;&#x30D3;&#x30B9;&#xFF0B;&#x30AF;&#x30E9;&#x30A4;&#x30A2;&#x30F3;&#x30C8;&#x3092;&#x4F5C;&#x3063;&#x3066;&#x307F;&#x3088;&#x3046; - Qiita</a></p>\n\n<p>J-Mailは、使ったことないな。<br />\n個人の開発だと、メールを利用する機会がめったに無い。<br />\n存在自体は知っているんだが、利用するタイミングがない。<br />\nメール送る相手が居ないのが、最大のネックだとは思ってる。</p>\n\n<h2>TODO</h2>\n\n<ul>\n<li>ThreeTen Extraを調べる</li>\n</ul>\n\n\n<h1>全体感想</h1>\n\n<p>Coneta.jpを使う人が多いな。<br />\n流行っているのだろうか？<br />\nブログより短い内容を投稿するサービスっぽい。</p>\n",
      "contentSnippet": "Advent Calendar\nJava Advent Calendar 2020 - Qiita\nきっかけ\n周囲のエンジニアに置いていかれないよう、投稿されてる内容を把握できれば、ある程度やっていけるはず。\n感想\nJakarta EEをはじめよう！\nJakarta EEをはじめよう！ - Qiita\nパット見た感じ、Springに近い印象を受けた。\nJSFは、業務で使ったことが１度ある。\nJSPと似ていた印象。\nwebデザイナーと共同開発しにくい印象がある。\nJava8の日時APIにおける期間の重複判定\nJava8の日時APIにおける期間の重複判定 - Qiita\nコメントにあった、ThreeTen Extraのほうが気になってしまった。。。\nJavaのラムダ式やStream APIの可読性を向上させるテクニック\nJavaのラムダ式やStream APIの可読性を向上させるテクニック - Qiita\nロジックを入れないのは、同意。\nstatic import は、なるほどと思った。\n関数型インタフェースを作るってのは、少し敷居が高いような気がする。\nJavaScriptだと違和感なく作れるのだが、Javaだと、まだ戸惑うことが多い。\nStringUtils#containsAnyメソッドの注意\nStringUtils#containsAnyメソッドの注意 - Qiita\napacheのStringUtilsは、ごくたまに使う。\nだいたい、足りないと思ったら、Util落とすより自作しちゃうんだよね。。。\nProxy環境下のSpring Securityを攻略する\nProxy環境下のSpring Securityを攻略する - Qiita\n認証系とかやってると、プロキシ周りで詰まることってあるよね。。。\nJavaではないが、XSS回避のためにプロキシ自作するってなったことがあった。\n通信の、特にセキュリティ絡みは、非常に知識を要するのが辛いんだ。。。\nImageIOでJpegの品質を上げる\nconeta.jp\nデフォルトの品質レベルが低いのだろうか？\n念のためもう一度トルコ語（等）で起こる問題について整理する\n念のためもう一度トルコ語（等）で起こる問題について整理する - Qiita\nかなりややこしい問題だな。。。\n文字コードの問題は、表面化することはほとんどないけど、表面化するとハマりそう。。。\n教訓としては、文字コードはUTF-8安定って理解でＯＫ？\nカウント処理をしたい時\nConeta\n文字の出現数カウントの実装ね。\nJavaは、こういうのがやりにくい印象がある。\npythonは、それが楽にできるから、分析系で多用されているような気がする。\nInputStreamからStringへの変換\nConeta\nこの実装、たまに使う。\nBukkitプラグイン開発 - コマンド処理、最適化編\nBukkitプラグイン開発 - コマンド処理、最適化編 - Qiita\nコマンドパターンの説明ぽかったかな？\nイクラのサーバーみたいだね。\njavaでコマンドパターンはあんまり見ないけど、実装したら、そうなるよね。\nクラス図があると、理解はしやすかったかなと思う。\nSpringBootとQuickFIX/Jで爆速でFIXサーバを実装する話 - 今日からあなたもオンラインブローカー?\nSpringBootとQuickFIX/Jで爆速でFIXサーバを実装する話 - 今日からあなたもオンラインブローカー? - Qiita\nreactiveプログラミングみたいなものだろうか？\nJavaの例外処理入門\nJavaの例外処理入門 - Qiita\n内容自体は、それほど目新しいものではなかったので、サラッと読んで終わり。\n例外の話になると、毎回どっちだったか分からなくなるのが、RuntimeExceptionが検査例外か非検査例外かという個人的な悩みがある。\nJava以外は、JSをよく触るのだが、JSは、非検査例外ばかりだから、あんまり意識しないけど、Javaだとどっちだったか、たまに分からなくなる。\nJavaのオートボクシングでの注意\nConeta\nキャッシュされない値同士の比較になるから、\"==\"での結果が変わるって認識であってるかな？\nそもそも、オブジェクト同士を比較するときに\"==\"を使うのは、危険だね。\nJavaのプロが避ける「波かっこ」の駄目な使い方は規約によるので規約を読んでみよう\nJavaのプロが避ける「波かっこ」の駄目な使い方は規約によるので規約を読んでみよう - Qiita\nその人が育ってきた環境によるかな？ってのが個人的な感想。\nコーディング規約次第ですってのが、正直なところ。\nあと、脱線するけど、規約を守れって散々言われたのだが、規約が守られるような土壌を作れよって思う。\nSPA(Vue.js) + REST API構成でSpring Secirityで認証まで作った時に気を付けることや大事なこと\nSPA(Vue.js) + REST API構成でSpring Secirityで認証まで作った時に気を付けることや大事なこと - Qiita\n認証って聞くと、発狂しそうになる病なので、読むのが辛かった。。。\n【業務系】世の中に逆行するJavaのWebアプリでの画面フレームワーク選定\n【業務系】世の中に逆行するJavaのWebアプリでの画面フレームワーク選定 - Qiita\nJSFは使ったことがあるが、JSPと対して変わらない。\nVaadin/CUBA Platformも見たが、やはり、フロントサイドはHTML/CSS+JSが最適だとは思う。\nJavaコレクション操作の基礎\nJavaコレクション操作の基礎\nデータ構造を理解すれば、操作はある程度直感的に分かるんじゃないのかなってのが、自分の持論。\npythonとかは、データ構造の種類が多い印象がある。\nJavaScriptは、ゆるいデータ構造を使っている印象。\nJava の + 演算子による文字列結合は、どのように処理されているのか\nJava の + 演算子による文字列結合は、どのように処理されているのか - Qiita\n裏でそんなことしてるのかぁってのが正直な感想。\n裏で結構な量の処理をしているんだなって思った。\n今度から、Javaで文字操作するときは、「Javaさん、ありがとう」ってお礼言うようにしようと思います。\nnull「俺が俺で無くなってゆく」\nnull「俺が俺で無くなってゆく」 - Qiita\n何か厨二臭いタイトルだな。。。\nちなみに、自分は緑茶派です。\nnullの解釈仕方って感じの記事だった。\nJavaScriptで起きやすい印象。\nJava8 Optionalの逆引きレシピ\nJava8 Optionalの逆引きレシピ - Qiita\nOptionalは、便利だとは思うけど、なかなか手が出せてない。\nほとんどの場合は、ifPresentを使うような気がする。\nOptionalは使わない方がいいケースが参考になった。\nJFRとモニタリングの融合？ JEP 349: JFR Event Streamingを触ってみる\nJFRとモニタリングの融合？ JEP 349: JFR Event Streamingを触ってみる\n監視の作業をあまりしてきたことがないので、何がメリットなのか、あまり理解できていない。\n段階的に理解する Dependency Injection\n段階的に理解する Dependency Injection - Qiita\nServiceLocaterは、初めて効いた気がする。コンポーネントスキャンに使われているのだろうか？\nVSCodeで作るJava開発環境＆Spring Bootアプリケーション入門\nVSCodeで作るJava開発環境＆Spring Bootアプリケーション入門 - Qiita\n自分も、inteliJかeclipseを使っていたが、最近は、ちょっとしたコードを書く場合、vscodeで書くことが多い。\nmavenやgradleを利用する場合は、inteliJとか使うんだろうけど、簡単なプログラムであれば、vscodeでやる。\nIDEは、たしかに便利だが、早期ビルドに対応しきれていない場合、テキストエディタでやるほうが便利な場合もある。\nIDE使うけど、ちょっとしたことをやるのなら、案外vscodeでも十分なのは、Javaの早期ビルドを試すときに使ってて思う。\nRESTfulなメール送信サービス＋クライアントを作ってみよう\nRESTfulなメール送信サービス＋クライアントを作ってみよう - Qiita\nJ-Mailは、使ったことないな。\nTODO\nThreeTen Extraを調べる\n全体感想\nConeta.jpを使う人が多いな。\n流行っているのだろうか？\nブログより短い内容を投稿するサービスっぽい。",
      "guid": "hatenablog://entry/26006613659719670",
      "categories": [
        "Java",
        "プログラミング",
        "ライブラリ",
        "情報収集",
        "日記",
        "愚痴",
        "恥晒し",
        "学習"
      ],
      "isoDate": "2020-12-28T02:39:24.000Z"
    },
    {
      "title": "Javaでコンパイル時に「エンコーディングwindows-31jにマップできません」が発生",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/12/28/093623",
      "pubDate": "Mon, 28 Dec 2020 09:36:23 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>きっかけ</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> Advent Calendarのサンプルコードを実行しようと思ったら、当該事象が発生したので、調べたことメモとして、記録を残す。</p>\n\n<h1>環境</h1>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>バージョン: 1.52.0 (system setup)\nコミット: 940b5f4bb5fa47866a54529ed759d95d09ee80be\n日付: 2020-12-10T22:45:11.850Z\nElectron: 9.3.5\nChrome: 83.0.4103.122\nNode.js: 12.14.1\nV8: 8.3.110.13-electron.0\nOS: Windows_NT x64 10.0.18363</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ java -version\nopenjdk version &#34;15.0.1&#34; 2020-10-20\nOpenJDK Runtime Environment (build 15.0.1+9-18)\nOpenJDK 64-Bit Server VM (build 15.0.1+9-18, mixed mode, sharing)</pre>\n\n\n<h1>ソース</h1>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>import jdk.jfr.consumer.*;\nimport java.time.*;\n\npublic class Test {\n  public static void main(String[] args) throws InterruptedException {\n    try (var rs = new RecordingStream()) {\n        // イベントの購読を登録\n        rs.enable(&#34;jdk.CPULoad&#34;).withPeriod(Duration.ofSeconds(1));\n        rs.onEvent(&#34;jdk.CPULoad&#34;, event -&gt; {\n            System.out.println(&#34;jdk.CPULoad: &#34; + event.getFloat(&#34;machineTotal&#34;));\n        });\n        rs.startAsync();\n\n        // サーバ的な処理\n        long cnt = 0;\n        while (true) {\n            Thread.sleep(1000);\n            System.out.println(&#34;本来はここでなんかサーバの処理: &#34; + (cnt++));\n        }\n    }\n  }\n}</pre>\n\n\n<h1>事象</h1>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ javac Test.java \nTest.java:7: エラー: この文字(0x81)は、エンコーディングwindows-31jにマップできません\n        // 繧､繝吶Φ繝医?ｮ雉ｼ隱ｭ繧堤匳骭ｲ\n                  ^\nTest.java:14: エラー: この文字(0x86)は、エンコーディングwindows-31jにマップできません\n        // 繧ｵ繝ｼ繝千噪縺ｪ蜃ｦ逅?\n                       ^\nTest.java:18: エラー: この文字(0x81)は、エンコーディングwindows-31jにマップできません\n            System.out.println(&#34;譛ｬ譚･縺ｯ縺薙％縺ｧ縺ｪ繧薙°繧ｵ繝ｼ繝舌?ｮ蜃ｦ逅?: &#34; + (cnt++));\n                                                      ^\nTest.java:18: エラー: この文字(0x86)は、エンコーディングwindows-31jにマップできません\n            System.out.println(&#34;譛ｬ譚･縺ｯ縺薙％縺ｧ縺ｪ繧薙°繧ｵ繝ｼ繝舌?ｮ蜃ｦ逅?: &#34; + (cnt++));\n                                                           ^\nエラー4個</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9\">エンコード</a>の問題ってのはすぐに分かったけど、対応方法がぱっと思いつかなかった。</p>\n\n<h1>解決方法</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9\">エンコード</a>を指定する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>javac -encoding UTF-8 Scores.java</pre>\n\n\n<p>勝手に<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%F3%A5%B3%A1%BC%A5%C9\">エンコード</a>判定して<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>してくれないものだろうか。。。</p>\n\n<h1>所感</h1>\n\n<p>こういうの、かなり手間だなとは思った。</p>\n\n<h1>参考サイト</h1>\n\n<p><a href=\"https://qiita.com/HachiwareWorks/items/2b23b180d328df597fe4\">Java &#x30B3;&#x30F3;&#x30D1;&#x30A4;&#x30EB;&#x30A8;&#x30E9;&#x30FC; &#x30A8;&#x30F3;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;windows-31j&#x306B;&#x30DE;&#x30C3;&#x30D7;&#x3067;&#x304D;&#x307E;&#x305B;&#x3093; - Qiita</a></p>\n",
      "contentSnippet": "きっかけ\nJava Advent Calendarのサンプルコードを実行しようと思ったら、当該事象が発生したので、調べたことメモとして、記録を残す。\n環境\nバージョン: 1.52.0 (system setup)\nコミット: 940b5f4bb5fa47866a54529ed759d95d09ee80be\n日付: 2020-12-10T22:45:11.850Z\nElectron: 9.3.5\nChrome: 83.0.4103.122\nNode.js: 12.14.1\nV8: 8.3.110.13-electron.0\nOS: Windows_NT x64 10.0.18363\n$ java -version\nopenjdk version \"15.0.1\" 2020-10-20\nOpenJDK Runtime Environment (build 15.0.1+9-18)\nOpenJDK 64-Bit Server VM (build 15.0.1+9-18, mixed mode, sharing)\nソース\nimport jdk.jfr.consumer.*;\nimport java.time.*;\n\npublic class Test {\n  public static void main(String[] args) throws InterruptedException {\n    try (var rs = new RecordingStream()) {\n        // イベントの購読を登録\n        rs.enable(\"jdk.CPULoad\").withPeriod(Duration.ofSeconds(1));\n        rs.onEvent(\"jdk.CPULoad\", event -> {\n            System.out.println(\"jdk.CPULoad: \" + event.getFloat(\"machineTotal\"));\n        });\n        rs.startAsync();\n\n        // サーバ的な処理\n        long cnt = 0;\n        while (true) {\n            Thread.sleep(1000);\n            System.out.println(\"本来はここでなんかサーバの処理: \" + (cnt++));\n        }\n    }\n  }\n}\n事象\n$ javac Test.java \nTest.java:7: エラー: この文字(0x81)は、エンコーディングwindows-31jにマップできません\n        // 繧､繝吶Φ繝医?ｮ雉ｼ隱ｭ繧堤匳骭ｲ\n                  ^\nTest.java:14: エラー: この文字(0x86)は、エンコーディングwindows-31jにマップできません\n        // 繧ｵ繝ｼ繝千噪縺ｪ蜃ｦ逅?\n                       ^\nTest.java:18: エラー: この文字(0x81)は、エンコーディングwindows-31jにマップできません\n            System.out.println(\"譛ｬ譚･縺ｯ縺薙％縺ｧ縺ｪ繧薙°繧ｵ繝ｼ繝舌?ｮ蜃ｦ逅?: \" + (cnt++));\n                                                      ^\nTest.java:18: エラー: この文字(0x86)は、エンコーディングwindows-31jにマップできません\n            System.out.println(\"譛ｬ譚･縺ｯ縺薙％縺ｧ縺ｪ繧薙°繧ｵ繝ｼ繝舌?ｮ蜃ｦ逅?: \" + (cnt++));\n                                                           ^\nエラー4個\nエンコードの問題ってのはすぐに分かったけど、対応方法がぱっと思いつかなかった。\n解決方法\nコンパイル時にエンコードを指定する。\njavac -encoding UTF-8 Scores.java\n勝手にエンコード判定してコンパイルしてくれないものだろうか。。。\n所感\nこういうの、かなり手間だなとは思った。\n参考サイト\nJava コンパイルエラー エンコーディングwindows-31jにマップできません - Qiita",
      "guid": "hatenablog://entry/26006613670856806",
      "categories": [
        "Java",
        "恥晒し",
        "日記",
        "愚痴",
        "プログラミング"
      ],
      "isoDate": "2020-12-28T00:36:23.000Z"
    },
    {
      "title": "2020/12/07週 気づきと振り返り ４０分５００円の価値",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/12/14/003729",
      "pubDate": "Mon, 14 Dec 2020 00:37:29 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>設計書にどこまで書くのか？</h2>\n\n<p>既存の設計書にない箇所が修正対象になっているのだが、どうすればよいのだろうか？<br />\n書こうとすると、いろんなロジックが入ってるから、芋づる式に設計書にない箇所をどんどん書かないといけない気がして、ものすごく億劫なのだが。。。</p>\n\n<h2>フル仮想環境がいいわけではない</h2>\n\n<p>PC全部仮想化してあって、現場のPCはリモートアクセス用だけなのだが、いかんせん、開発しようとすると重すぎて辛い。。。<br />\n何が遅くなってるのかよくわからんのが辛いな。<br />\n少なくとも、メモリ6GBは、アカンと思うんだよね。。。<br />\n家のPCでも16GBあるというのに、開発PCがそれ以下ってのは、辞めてほしいわ。。。</p>\n\n<h2>アクセスルート画面の実装は辛い</h2>\n\n<p>いろんな画面への遷移がある画面の開発、マジで辛い。。。<br />\nIF周りでいろんな実装者と調整したりするのが面倒くさくてしょうがない。<br />\n遷移先の実装まで俺が考えさせられるようになったのも、辛い。。。</p>\n\n<p>こういう画面は、マジで余裕が欲しい。<br />\n余裕がないと、いろんなことが積み重なって、焦りと辛みが蓄積するんだよね。。。</p>\n\n<h1>その他</h1>\n\n<h2>喫<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%E3%C5%B9\">茶店</a>での勉強</h2>\n\n<p>バカにしていた口だが、いざやってみると、たしかに、集中してできた気がする。<br />\n暇つぶし道具が手元にない環境になれば、自然と勉強に専念できるとは思った。<br />\nただ、集中力が１時間も持たないんだよね。。。<br />\n40分位で、疲れる。<br />\n４０分のために５００円払えますか？が判断基準だと思う。<br />\nどうしても集中したいときは、ものすごい安い買い物だとは思う。</p>\n\n<p>学校の授業も、１時間ちかい時間を椅子に座ったままって、無理があると思うんだよね。。。<br />\n１コマ４０分くらいにするべきだと思う。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\n設計書にどこまで書くのか？\n既存の設計書にない箇所が修正対象になっているのだが、どうすればよいのだろうか？\nフル仮想環境がいいわけではない\nPC全部仮想化してあって、現場のPCはリモートアクセス用だけなのだが、いかんせん、開発しようとすると重すぎて辛い。。。\nアクセスルート画面の実装は辛い\nいろんな画面への遷移がある画面の開発、マジで辛い。。。\nこういう画面は、マジで余裕が欲しい。\nその他\n喫茶店での勉強\nバカにしていた口だが、いざやってみると、たしかに、集中してできた気がする。\n学校の授業も、１時間ちかい時間を椅子に座ったままって、無理があると思うんだよね。。。\n１コマ４０分くらいにするべきだと思う。",
      "guid": "hatenablog://entry/26006613664760258",
      "categories": [
        "ドキュメント",
        "開発環境",
        "学習",
        "プログラミング",
        "日記"
      ],
      "isoDate": "2020-12-13T15:37:29.000Z"
    },
    {
      "title": "electron実行時に`'attachShadow' on 'Element': This element does not support attachShadow`",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/11/29/173501",
      "pubDate": "Sun, 29 Nov 2020 17:35:01 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>発生に至った経緯</h1>\n\n<p>electronで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>-datagridを使おうとしていたら発生した。</p>\n\n<h1>発生時の環境</h1>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ electron -v\nv1.4.13</pre>\n\n\n<h1>発生の原因</h1>\n\n<p>electronのベースであるchromiumeがshadow domをサポートしているバージョンではなかったので、発生していた。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/canvas\">canvas</a>-datagridがshadow domを利用しているらしい。</p>\n\n<h1>対応</h1>\n\n<p>electronのバージョンを上げた。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>electron -v\nv11.0.2</pre>\n\n\n<p>そうとう古いバージョンのやつを使ってたんだな。。。</p>\n\n<h1>雑記</h1>\n\n<p>ちゃんとバージョンアップに追随してないと、余計な調査コストがかかるな～って思った。</p>\n",
      "contentSnippet": "発生に至った経緯\nelectronで、canvas-datagridを使おうとしていたら発生した。\n発生時の環境\n$ electron -v\nv1.4.13\n発生の原因\nelectronのベースであるchromiumeがshadow domをサポートしているバージョンではなかったので、発生していた。\ncanvas-datagridがshadow domを利用しているらしい。\n対応\nelectronのバージョンを上げた。\nelectron -v\nv11.0.2\nそうとう古いバージョンのやつを使ってたんだな。。。\n雑記\nちゃんとバージョンアップに追随してないと、余計な調査コストがかかるな～って思った。",
      "guid": "hatenablog://entry/26006613658339771",
      "categories": [
        "JavaScript",
        "開発環境",
        "プログラミング",
        "情報収集",
        "恥晒し",
        "思ひ出",
        "学習"
      ],
      "isoDate": "2020-11-29T08:35:01.000Z"
    },
    {
      "title": "2020/11/16週 気づきと振り返り 普通に実装してたら出会わないエラーばかりに合う１週間だった",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/11/22/222400",
      "pubDate": "Sun, 22 Nov 2020 22:24:00 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a></h2>\n\n<h3>streamを使えない現場</h3>\n\n<p>使いたくても使えない現場ってのがあるんだなって、思いました。\n配列でデータが独立して保持してたりすると、使うのが難しい。</p>\n\n<h3>データ構造の重要性</h3>\n\n<p>今の現場が、画面の項目１つ１つが独立しており、グルーピングができていない。。。<br />\n例を上げると、以下みたいな感じ</p>\n\n<pre class=\"code lang-java\" data-lang=\"java\" data-unlink><span class=\"synType\">private</span> String[] name = <span class=\"synConstant\">null</span>;\n<span class=\"synType\">private</span> String[] birthDay = <span class=\"synConstant\">null</span>;\n</pre>\n\n\n<p>本来は、nameとbirthDay はセットで設定してくるので、入れ物オブジェクト作りたいのだが、配列ってのが、また厄介さを増してる。<br />\nそのため、for文回すにしても、いろいろと面倒。<br />\nどの項目とどの項目がセットなんだっけ？って毎回考える。<br />\n配列の入れ方を間違っていると、かなり追いづらい。</p>\n\n<h3>compareToの覚え方</h3>\n\n<p>以下のサイトが参考になった。</p>\n\n<p><a href=\"https://qiita.com/yuba/items/743159618f1cffc2ea61\">compareTo &#x306E;&#x623B;&#x308A;&#x5024;&#x4ED5;&#x69D8;&#x306F;&#x30EA;&#x30D5;&#x30A1;&#x30EC;&#x30F3;&#x30B9;&#x3092;&#x898B;&#x306B;&#x884C;&#x304B;&#x306A;&#x304F;&#x3066;&#x3082;&#x4F59;&#x88D5; - Qiita</a></p>\n\n<p>毎回、どっちがマイナスだっけ？って思ってたけど、一覧化してあると分かりやすい。<br />\n右側にゼロを置けば、等符号の向きが同じになるってのが、とても分かりやすかった。</p>\n\n<p>デバックしていて、たまに混乱するから、こういう簡単な覚え方は、知っておいて損はないと思った。<br />\nコード規約に入れたいレベルで納得した。</p>\n\n<h3>メソッドサイズの制限</h3>\n\n<p>自動生成したコードのメソッドのラインが、65535バイトを超えてエラーになった。<br />\n初めてこんなエラーを見た気がする。。。</p>\n\n<p>普通に実装してたら、そんなエラーに鉢合わせしないよね。。。</p>\n\n<p><a href=\"https://www.it-swarm-ja.tech/ja/java/%E3%80%8C%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%81%8C65535%E3%83%90%E3%82%A4%E3%83%88%E3%81%AE%E5%88%B6%E9%99%90%E3%82%92%E8%B6%85%E3%81%88%E3%81%A6%E3%81%84%E3%81%BE%E3%81%99%E3%80%8D%E3%81%AE%E4%BF%AE%E6%AD%A3%E6%96%B9%E6%B3%95/1069464182/\">java &mdash; &#x300C;&#x30E1;&#x30BD;&#x30C3;&#x30C9;&#x306E;&#x30B3;&#x30FC;&#x30C9;&#x304C;65535&#x30D0;&#x30A4;&#x30C8;&#x306E;&#x5236;&#x9650;&#x3092;&#x8D85;&#x3048;&#x3066;&#x3044;&#x307E;&#x3059;&#x300D;&#x306E;&#x4FEE;&#x6B63;&#x65B9;&#x6CD5;</a></p>\n\n<p>不要な自動生成を削除するようにもっていくしかないか。。。</p>\n\n<h2>環境</h2>\n\n<h3>リモートワーク</h3>\n\n<p>リモートワークやってるけど、若干不便なことがあった。</p>\n\n<p>実装詰まったときに、軽いレビューをしてもらいたいことがあるのだが、わざわざ画面共有したり、通話環境つなげたりするのが面倒くさい。。。<br />\n簡単に相手と通話できる環境ができると楽なのだが、相手と通信確立させたりするのが面倒だと感じた。</p>\n\n<p>あと、スケジュールが遅れると、かなり焦る。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B5%A5%D3%BB%C4\">サビ残</a>するしかの思考に陥りそうになるんだよね。。。</p>\n\n<h1>愚痴</h1>\n\n<p>普段であれば、絶対にかかないようなコードを書くことを強いられている。<br />\nもっと良くなる方法を考えてると、スケジュールが間に合わないし、やることが多くありすぎて、頭のリソースが枯渇する。<br />\n結局、悪い習慣をそのまま書かざるを得ない状況にあるのは、良くないと思いつつも、やらねばならないプレッシャーが、結構キツイ。。。</p>\n\n<p>自分の能力に疑問を持つようになり、悩むことが多いような気がする。<br />\n悩んでいる時間は無駄だとは思っているが、そう簡単に割り切れないんだよね。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C8%E1%B4%D1%BC%E7%B5%C1\">悲観主義</a>的な考えが、強くなった気がする。<br />\nスケジュール遅れや、何やっても上手くいかないのが、よりいっそう、そう思わせちゃうんだよね。。。<br />\nとりあえず、オンスケに戻せれば、少しは緩和できそうだが、そこまで持つかな。。。</p>\n\n<p>あと、仕事で発破をかけるってことをやるやつが居ると思うが、やり方間違えると、人を追い詰めるだけだからね？<br />\n責任感が強ければ、下手したら自分を追い込んでダメになるケースもある気がする。<br />\nリーダー的立ち位置の人は、発破をかければいいと思ってるやつがいるけど、かけ方もよく考えるべきだと思う。</p>\n\n<p>プログラミングの基本は、グルーピングだなって思いました。<br />\nデータを扱いやすい単位にまとめられない場合、繰り返しや入出力でものすごい苦労する。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nJava\nstreamを使えない現場\n使いたくても使えない現場ってのがあるんだなって、思いました。\n配列でデータが独立して保持してたりすると、使うのが難しい。\nデータ構造の重要性\n今の現場が、画面の項目１つ１つが独立しており、グルーピングができていない。。。\nprivate String[] name = null;\nprivate String[] birthDay = null;\n\n\n\n本来は、nameとbirthDay はセットで設定してくるので、入れ物オブジェクト作りたいのだが、配列ってのが、また厄介さを増してる。\ncompareToの覚え方\n以下のサイトが参考になった。\ncompareTo の戻り値仕様はリファレンスを見に行かなくても余裕 - Qiita\n毎回、どっちがマイナスだっけ？って思ってたけど、一覧化してあると分かりやすい。\nデバックしていて、たまに混乱するから、こういう簡単な覚え方は、知っておいて損はないと思った。\nメソッドサイズの制限\n自動生成したコードのメソッドのラインが、65535バイトを超えてエラーになった。\n普通に実装してたら、そんなエラーに鉢合わせしないよね。。。\njava — 「メソッドのコードが65535バイトの制限を超えています」の修正方法\n不要な自動生成を削除するようにもっていくしかないか。。。\n環境\nリモートワーク\nリモートワークやってるけど、若干不便なことがあった。\n実装詰まったときに、軽いレビューをしてもらいたいことがあるのだが、わざわざ画面共有したり、通話環境つなげたりするのが面倒くさい。。。\nあと、スケジュールが遅れると、かなり焦る。\nサビ残するしかの思考に陥りそうになるんだよね。。。\n愚痴\n普段であれば、絶対にかかないようなコードを書くことを強いられている。\n自分の能力に疑問を持つようになり、悩むことが多いような気がする。\n悲観主義的な考えが、強くなった気がする。\nあと、仕事で発破をかけるってことをやるやつが居ると思うが、やり方間違えると、人を追い詰めるだけだからね？\nプログラミングの基本は、グルーピングだなって思いました。\nデータを扱いやすい単位にまとめられない場合、繰り返しや入出力でものすごい苦労する。",
      "guid": "hatenablog://entry/26006613651367420",
      "categories": [
        "Java",
        "チーム",
        "開発環境",
        "プログラミング",
        "情報収集",
        "日記",
        "愚痴",
        "メンタル",
        "体調管理"
      ],
      "isoDate": "2020-11-22T13:24:00.000Z"
    },
    {
      "title": "JJUG CCC 2020 Fall 参加報告",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/11/08/062455",
      "pubDate": "Sun, 08 Nov 2020 06:24:55 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>各種リンク</h1>\n\n<h2>doorkeeper</h2>\n\n<p><a href=\"https://jjug.doorkeeper.jp/events/112842\">&#x3010;&#x30AA;&#x30F3;&#x30E9;&#x30A4;&#x30F3;&#x3011; JJUG CCC 2020 Fall - &#x65E5;&#x672C;Java&#x30E6;&#x30FC;&#x30B6;&#x30FC;&#x30B0;&#x30EB;&#x30FC;&#x30D7;/Japan Java User Group | Doorkeeper</a></p>\n\n<h1>感想・まとメモ</h1>\n\n<h2>jq を使いこなして、開発効率アップ</h2>\n\n<h3>まとメモ</h3>\n\n<ul>\n<li><p>フロントとバックエンド推移</p>\n\n<ul>\n<li>前まで→サーバーで動的にHTML作成</li>\n<li>今→UIとサーバー処理で役割分担。両者の更新サイクルが違う\n\n<ol>\n<li>データの受け渡しに<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Json\">Json</a>が普及</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>を読むツールが必要になった</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>jqのメリット</p>\n\n<ul>\n<li>読み書きできる</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a>利用が便利</li>\n</ul>\n</li>\n</ul>\n\n\n<h3>感想</h3>\n\n<ul>\n<li>動画は、すでに撮影済みのやつを流してる？</li>\n<li>途中から、ゆっくり実況みたいな感じのやつが流れてたな。。。</li>\n<li>データのアクセスは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>チックでできる\n\n<ul>\n<li>jqが描かれてる言語は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/javascript\">javascript</a>なのかな？</li>\n</ul>\n</li>\n<li>フィルター周りから、ややこしくい。。。\n\n<ul>\n<li>実際に使わないと、所見で理解は難しい。</li>\n<li>あとで、調査</li>\n</ul>\n</li>\n<li>コメントがつけられる活用事例は、ちょっと厳しいな。。。</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>の編集や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8\">スクリプト</a>による生成は、jqに慣れてからじゃないと難しそうな気がする。</li>\n<li>見るツールとして利用することしか頭になかったが、シェルで編集に使ったりもできるのが、新しい発見だった。</li>\n</ul>\n\n\n<h3>雑記</h3>\n\n<p>たまに、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>ビュアーとして使っていたけど、深い階層を読むためのツールが、まだ見つけられてない。<br />\n階層が分からなくなることが多い。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/vscode\">vscode</a>で見てたりしてたけど、キツかった。jq使っても解決はしてない。使い方の問題かも知れないが。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>の深い層でも、迷わずに見れるやつはないだろうか？  <br />\n音認結果や字句解析結果が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/json\">json</a>で帰ってくるのだが、似たような結果がいくつもあるので、階層を見間違えると、間違った方向でプログラミングしちゃって、手戻りあったりするのが辛かった。</p>\n\n<h2>結果整合性ができない開発者の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>イベント活用例</h2>\n\n<h3>感想</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>駆動の話は、小難しい感じがどうしてもしてしまう。  <br />\n個人的な理解としては、コードにストーリーをもたせる認識でいる。<br />\nやることに視点を置くのではなく、話の流れができるようにコーディングするのが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3\">ドメイン</a>駆動だと思ってる。<br />\nイベントは、タラレバのケースを書くだけの認識。</p>\n\n<p>途中離脱</p>\n\n<h2>パフォーマンスのトラブルシュート入門</h2>\n\n<p>途中参加</p>\n\n<h3>まとメモ</h3>\n\n<ul>\n<li>計測結果の分析\n\n<ul>\n<li>結果の可視化</li>\n<li>正常と異常時の比較</li>\n<li>情報が足りなかったら、再計測</li>\n</ul>\n</li>\n</ul>\n\n\n<h3>感想</h3>\n\n<p>再計測の判断が難しい気がする。<br />\n情報が足りないかどうかは、自分では判断できなかった。<br />\nパフォーマンス分析は、何回かしたことがあるが、可視化が面倒なイメージ。<br />\nだから、そういう可視化のツールが流行ってるんだと思う。</p>\n\n<p>分析方法は、ログを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>で集計してやるってのが、今も変わらず主流か。<br />\n進化したのは、集計したものの表現方法かな？<br />\nどうやって見せて分析を楽にするかが焦点になるのだろうな。</p>\n\n<p>分析するために、統計の知識とかあったほうが良いのだろうか？</p>\n\n<h2>Project Reactor でノン・<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AD%A5%F3%A5%B0\">ブロッキング</a>、非同期処理を実装してみよう ！！</h2>\n\n<h3>まとメモ</h3>\n\n<ul>\n<li>mono→リソース１つに対して使う</li>\n<li>flux→複数リソースを扱う場合に使う</li>\n</ul>\n\n\n<h3>感想</h3>\n\n<p>Mono?Flux?聞いたことあるけど、よくわかってない。</p>\n\n<p>Reactive Streamsは実装じゃなくて仕様ね。</p>\n\n<p>publisherは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3\">デザインパターン</a>のobserverみたいなやつだっけ？ <br />\n前にreactiveについて調査したとき、そんな感じがした。<br />\nreactiveは、処理の方式を語ってるものが多い気がする。 <br />\n最初、実装のことだと思っていたが、概念の話って理解するのに、時間がかかった記憶がある。</p>\n\n<p>やってることは、効率的にリソース使いましょうねって感じかな？<br />\nノン<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AD%A5%F3%A5%B0\">ブロッキング</a>処理は、リソースの専有期間を極力少なくしましょうって理解でいる。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9\">クラウド</a>でリソース共有することが多くなったから、こういうのが出てきたと思う。</p>\n\n<p>pub/subは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/python\">python</a>とかJSとかで、よく見かけるワードだね。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>開発で感じたコードレビューと<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C3%B1%C2%CE%A5%C6%A5%B9%A5%C8\">単体テスト</a>の体験談</h2>\n\n<p>ツール紹介はスルー</p>\n\n<h3>メンバー編の感想</h3>\n\n<p>実装者一人の時点で危険な香りが。。。<br />\nあぁ、数字だけみて、現状が理解できてないパターンだな。<br />\n人月は、増員したら解決というわけではない。増員したときのコストを度外視するのは、炎上でよくあるパターンだと思う。<br />\n増員した全員が、同じスキルで同じ知識だったら、通用するかも知れないが、無理だろ。。。<br />\n遅延が発生したときの責任が、どこに行くんだろうな。。。<br />\nこういう場合、だいたい現場の人が過剰に責任感じると思うんだよね。。。</p>\n\n<p>これは、ビッグバンテストになる流れだな。。。</p>\n\n<p>最終的に、訴訟問題になってそう。。。</p>\n\n<h3>リーダー編の感想</h3>\n\n<p>これは、メンバーのときで感じたことを、リーダーでもやりそうだな。。。</p>\n\n<p>嫌われる勇気が足りなかったわけか。。。<br />\n断る勇気は、この業界では重要。</p>\n\n<p>規約は、リーダーが作らないとダメなのでは？<br />\nレビューする人が作らないと厳しい気がする。 <br />\nやっぱり、規約作った人がレビューするよね。</p>\n\n<p>レビュー軽減は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/findbugs\">findbugs</a>や<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/checkstyle\">checkstyle</a>使うことが多い気がする。<br />\nマクロで対応は、そうとう<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD\">正規表現</a>に詳しくないとできない気がする。</p>\n\n<p>自分は、メソッド名を付ける場合、codicを参考にすることが多い。<br />\n自分がいいと思うものより、一般的な<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%CC%BF%CC%BE\">命名</a>を優先する。<br />\n最優先は、プロジェクトの語録だけど、それ以外ならcodic。<br />\ncodicになければ、自分の経験則を信じるようにしている。<br />\n今の現場、外部とネットワークがつながらないから調べられないのがキツイんだよね。。。<br />\nここでは、その話が出てこないな。。。<br />\nさすがに、ネット使って調査できる環境か？</p>\n\n<p>フォーマットにこだわるのは、自動生成が目的だと思うけど、フォーマットを守ることが目的化していることがたまにある。<br />\n一番きついのは、フォーマットすらない記述箇所。<br />\n緩いくせに、レビューでフォーマットのことを指摘しだしてくる現場だったら、最悪だと思う。</p>\n\n<p>規約は、なるべく無くしたほうがいい。<br />\nできれば、規約外になる実装は動かないようなFWならなお良い。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B5%AC%CC%F3%B0%E3%C8%BF\">規約違反</a>は、気づくタイミングをなるべく早くする処置が必要だと思う。</p>\n\n<p>問題の先送りしないには、共感する。<br />\nプラスで、問題を早期発見する仕組みが必要だと思う。<br />\n問題に気づいた頃には、対処方法が限定されてることが多々あると思うんだよね。<br />\n時間の余裕があるときに気づける工夫が必要だと思う。</p>\n\n<h2>Head toward <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> 15 and <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> 16</h2>\n\n<h3>まとメモ</h3>\n\n<ul>\n<li>Incubator→試験モジュール</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>→試験機能</li>\n<li>Standard→標準機能</li>\n</ul>\n\n\n<p>Incubatorは、知らんかった。<br />\nだいたい、見るのは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>かStandard</p>\n\n<h3>Java15</h3>\n\n<p>自分が調べた結果のリンク張っておく</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F09%2F02%2F224311\" title=\"【Java】Java15先取り調査 JEP一覧と概要 - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/09/02/224311\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h4>JEP375</h4>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%F3%A5%C7%A5%A3%A5%F3%A5%B0\">バインディング</a>してる値は、書き換え不可か。<br />\n調査したときは、概要把握だけだったから、そこまで見てなかったな。。。<br />\nよくよく考えたら、書き換えできたら不味いよね。</p>\n\n<p>過去の調査リンクを張っておく</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F09%2F05%2F231224\" title=\"【Java】Java15先取り調査 JEP 375: Pattern Matching for instanceof (Second Preview) - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/09/05/231224\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h4>JEP384</h4>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/DTO\">DTO</a>とかに利用するのが多いかもね。\nReflectionでも変更不可か。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/jUnit\">jUnit</a>とかで自動テストする際は、作りを工夫しないと苦労しそうな気がする。</p>\n\n<h4>JEP360</h4>\n\n<p>なるほどね、網羅性の確認が<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時点でわかるわけか。<br />\n実装のメリットばかり気にしていたから、気づけなかったわ。。。</p>\n\n<h3>Java16</h3>\n\n<h4>JEP381</h4>\n\n<p>ベクトル演算向けっぽいから、内容はよく分からなかったな。。。<br />\n科学計算とかで使うのだろうか？</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> 開発者のためのバイナリ管理入門</h2>\n\n<h3>まとメモ</h3>\n\n<ul>\n<li>BinOps→バイナリ中心のCI/CDの自動化</li>\n</ul>\n\n\n<h3>感想</h3>\n\n<p>バイナリ管理は、バイナリ用の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VCS\">VCS</a>を立てれば良いのではなかろうか？<br />\nプレーンテキストと混ぜるからややこしくなる気がする。</p>\n\n<p>ブランチ管理をやってくれるって理解でいい？<br />\n使ってみないと、自分の知識レベルだと、理解が厳しい。。。</p>\n\n<h2>マイクロサービス<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>をあきらめないための、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E2%A5%CE%A5%EA%A5%B9\">モノリス</a>で始める<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>テスト</h2>\n\n<h3>感想</h3>\n\n<p>初期からマイクロサービスは無理だと思う。<br />\nいきなりマイクロで作ると、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B9%A9%BF%F4\">工数</a>が多くなり、破綻のリスクがあると思う。<br />\nまずは、リリースを安定させることが重要な気がする。</p>\n\n<p>ルールは、作るより保つほうが難しい。<br />\nここは、やはり、同じか。。。</p>\n\n<p>依存関係のテストって、どうやってやるんだ？<br />\n何を見てテストしてるんだろう？</p>\n\n<p>ArchUnitは、気になった。</p>\n\n<p>テストが失敗したときは、どうするんだろう？<br />\nテスト失敗＝違反or設計が間違ってたのどちらかだと思うが、開発者レベルだと難しい気がするが、誰かにアラート上げるのかな？</p>\n\n<p>FW作ってるところは、ArchUnit提供して欲しいなと思った。</p>\n\n<h1>TODO</h1>\n\n<ul>\n<li>ArchUnit試す</li>\n</ul>\n\n\n<h1>全体感想</h1>\n\n<p>昼休憩なしでぶっ続けなんだな。。。<br />\nちゃんとタイムテーブル見ておけば良かった。<br />\n昼飯を事前に買ってくれば良かった。。。</p>\n\n<p>オンラインになって、人数制限がないから、人気のセッションがちゃんと見れるのは良かった。<br />\nオフラインだと、どうしても部屋の制約がかかってしまうからな。。。<br />\n今回は、見たいものがちゃんと見れた。\nあと、複数セッションを同時に見れるのは、新鮮だった。<br />\n僕は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C0%BB%C6%C1%C2%C0%BB%D2\">聖徳太子</a>ではないので、複数を同時に見るのは無理だったが。。。<br />\nあとは、他人の目がないので、飲食しながら見れたり、ながら見ができるのは気楽だった。 <br />\nあと、セッションを途中で抜けたりできるのも良かった。<br />\nオフラインだと、無言の圧力で抜けにくいんだよね。。<br />\nセッションを拝聴して、なんか思ってたのと違った場合に、気軽に抜けられるのは良かった。</p>\n\n<p>音声が乱れるときがたまにあった。<br />\n字幕付きの映像だとなお良かった気がする。</p>\n\n<p>そういえば、IoTとかに関するセッションがなくなったな。<br />\n流行期は去ったのだろう。<br />\n今は、なんだろう？<br />\nパフォーマンス系が多かった印象がある。<br />\n今年は、インフラ周りが多いなって思った。<br />\n役割分担が進んだ結果なのかも知れない。</p>\n",
      "contentSnippet": "各種リンク\ndoorkeeper\n【オンライン】 JJUG CCC 2020 Fall - 日本Javaユーザーグループ/Japan Java User Group | Doorkeeper\n感想・まとメモ\njq を使いこなして、開発効率アップ\nまとメモ\nフロントとバックエンド推移\n前まで→サーバーで動的にHTML作成\n今→UIとサーバー処理で役割分担。両者の更新サイクルが違う\n\n\nデータの受け渡しにJsonが普及\njsonを読むツールが必要になった\njqのメリット\n読み書きできる\nコマンドライン利用が便利\n感想\n動画は、すでに撮影済みのやつを流してる？\n途中から、ゆっくり実況みたいな感じのやつが流れてたな。。。\nデータのアクセスは、javascriptチックでできる\n\n\njqが描かれてる言語は、javascriptなのかな？\nフィルター周りから、ややこしくい。。。\n\n\n実際に使わないと、所見で理解は難しい。\nあとで、調査\nコメントがつけられる活用事例は、ちょっと厳しいな。。。\njsonの編集やスクリプトによる生成は、jqに慣れてからじゃないと難しそうな気がする。\n見るツールとして利用することしか頭になかったが、シェルで編集に使ったりもできるのが、新しい発見だった。\n雑記\nたまに、jsonビュアーとして使っていたけど、深い階層を読むためのツールが、まだ見つけられてない。\nvscodeで見てたりしてたけど、キツかった。jq使っても解決はしてない。使い方の問題かも知れないが。。。\njsonの深い層でも、迷わずに見れるやつはないだろうか？  \njsonで帰ってくるのだが、似たような結果がいくつもあるので、階層を見間違えると、間違った方向でプログラミングしちゃって、手戻りあったりするのが辛かった。\n結果整合性ができない開発者のドメインイベント活用例\n感想\nドメイン駆動の話は、小難しい感じがどうしてもしてしまう。  \nドメイン駆動だと思ってる。\n途中離脱\nパフォーマンスのトラブルシュート入門\n途中参加\nまとメモ\n計測結果の分析\n\n\n結果の可視化\n正常と異常時の比較\n情報が足りなかったら、再計測\n感想\n再計測の判断が難しい気がする。\n分析方法は、ログを正規表現で集計してやるってのが、今も変わらず主流か。\n分析するために、統計の知識とかあったほうが良いのだろうか？\nProject Reactor でノン・ブロッキング、非同期処理を実装してみよう ！！\nまとメモ\nmono→リソース１つに対して使う\nflux→複数リソースを扱う場合に使う\n感想\nMono?Flux?聞いたことあるけど、よくわかってない。\nReactive Streamsは実装じゃなくて仕様ね。\npublisherは、デザインパターンのobserverみたいなやつだっけ？ \nやってることは、効率的にリソース使いましょうねって感じかな？\nブロッキング処理は、リソースの専有期間を極力少なくしましょうって理解でいる。\nクラウドでリソース共有することが多くなったから、こういうのが出てきたと思う。\npub/subは、pythonとかJSとかで、よく見かけるワードだね。\nJava開発で感じたコードレビューと単体テストの体験談\nツール紹介はスルー\nメンバー編の感想\n実装者一人の時点で危険な香りが。。。\nこれは、ビッグバンテストになる流れだな。。。\n最終的に、訴訟問題になってそう。。。\nリーダー編の感想\nこれは、メンバーのときで感じたことを、リーダーでもやりそうだな。。。\n嫌われる勇気が足りなかったわけか。。。\n規約は、リーダーが作らないとダメなのでは？\nレビュー軽減は、findbugsやcheckstyle使うことが多い気がする。\n正規表現に詳しくないとできない気がする。\n自分は、メソッド名を付ける場合、codicを参考にすることが多い。\n命名を優先する。\nフォーマットにこだわるのは、自動生成が目的だと思うけど、フォーマットを守ることが目的化していることがたまにある。\n規約は、なるべく無くしたほうがいい。\n規約違反は、気づくタイミングをなるべく早くする処置が必要だと思う。\n問題の先送りしないには、共感する。\nHead toward Java 15 and Java 16\nまとメモ\nIncubator→試験モジュール\nPreview→試験機能\nStandard→標準機能\nIncubatorは、知らんかった。\nPreviewかStandard\nJava15\n自分が調べた結果のリンク張っておく\nsuzaku-tec.hatenadiary.jp\nJEP375\nバインディングしてる値は、書き換え不可か。\n過去の調査リンクを張っておく\nsuzaku-tec.hatenadiary.jp\nJEP384\nDTOとかに利用するのが多いかもね。\nReflectionでも変更不可か。。。\njUnitとかで自動テストする際は、作りを工夫しないと苦労しそうな気がする。\nJEP360\nなるほどね、網羅性の確認がコンパイル時点でわかるわけか。\nJava16\nJEP381\nベクトル演算向けっぽいから、内容はよく分からなかったな。。。\nJava 開発者のためのバイナリ管理入門\nまとメモ\nBinOps→バイナリ中心のCI/CDの自動化\n感想\nバイナリ管理は、バイナリ用のVCSを立てれば良いのではなかろうか？\nブランチ管理をやってくれるって理解でいい？\nマイクロサービスアーキテクチャをあきらめないための、モノリスで始めるアーキテクチャテスト\n感想\n初期からマイクロサービスは無理だと思う。\n工数が多くなり、破綻のリスクがあると思う。\nルールは、作るより保つほうが難しい。\n依存関係のテストって、どうやってやるんだ？\nArchUnitは、気になった。\nテストが失敗したときは、どうするんだろう？\nFW作ってるところは、ArchUnit提供して欲しいなと思った。\nTODO\nArchUnit試す\n全体感想\n昼休憩なしでぶっ続けなんだな。。。\nオンラインになって、人数制限がないから、人気のセッションがちゃんと見れるのは良かった。\n聖徳太子ではないので、複数を同時に見るのは無理だったが。。。\n音声が乱れるときがたまにあった。\nそういえば、IoTとかに関するセッションがなくなったな。\n流行期は去ったのだろう。\n今は、なんだろう？\nパフォーマンス系が多かった印象がある。\n今年は、インフラ周りが多いなって思った。\n役割分担が進んだ結果なのかも知れない。",
      "guid": "hatenablog://entry/26006613649842441",
      "categories": [
        "チーム",
        "情報収集",
        "学習",
        "メンタル",
        "ライブラリ",
        "プログラミング",
        "Java",
        "デザインパターン",
        "分析",
        "パフォーマンス",
        "性能",
        "日記",
        "開発環境"
      ],
      "isoDate": "2020-11-07T21:24:55.000Z"
    },
    {
      "title": "2020/10/19週 気づきと振り返り 文字見て頭痛が起きるのは初めて",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/10/28/110517",
      "pubDate": "Wed, 28 Oct 2020 11:05:17 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<ul class=\"table-of-contents\">\n    <li><a href=\"#業務こなしての問題気づき\">業務こなしての問題・気づき</a><ul>\n            <li><a href=\"#設計書関連\">設計書関連</a><ul>\n                    <li><a href=\"#項番\">項番</a></li>\n                    <li><a href=\"#ID管理\">ID管理</a></li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li><a href=\"#その他\">その他</a><ul>\n            <li><a href=\"#なぜなぜ分析\">なぜなぜ分析</a></li>\n            <li><a href=\"#はじめての動画投稿\">はじめての動画投稿</a></li>\n            <li><a href=\"#インポスター症候群\">インポスター症候群</a></li>\n        </ul>\n    </li>\n</ul>\n\n<h1 id=\"業務こなしての問題気づき\">業務こなしての問題・気づき</h1>\n\n<h2 id=\"設計書関連\">設計書関連</h2>\n\n<h3 id=\"項番\">項番</h3>\n\n<p>案件対応で修正する際、項番ズレるの、どうしたらいいの？</p>\n\n<p>すごい見落とすのがつらい。。。<br />\n視力落とす訓練をしているようだ。</p>\n\n<h3 id=\"ID管理\">ID管理</h3>\n\n<p>極力やめたほうがいい。<br />\nID管理しだすと、ドキュメント量が増えるし、採番管理とかの必要性が出てきたり、簡易ミスが発生しやすかったりする。</p>\n\n<p>意味のない文字や数字は、ものすごい間違いやすい。<br />\n現在進行系で痛感してるけど、大量に見てると、頭が痛くなるレベルで脳に負荷がかかってると思うんだよね。</p>\n\n<p>ID管理のコストは、高いことを認識するべきだと思う。</p>\n\n<h1 id=\"その他\">その他</h1>\n\n<h2 id=\"なぜなぜ分析\">なぜなぜ分析</h2>\n\n<p>問題を発生した当人への<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D2%A5%A2%A5%EA\">ヒアリ</a>ングは、しないほうがいいのではないかと感じる。<br />\n普通に考えたら、詰問してるようにしか見えないんだよね。。。<br />\n「責めてるんじゃない」って言われても、外部から見ると、詰問しているようにしか見えない。</p>\n\n<p>当人も、問題を起こしたくて起こしたわけではないと思うんだよね。<br />\n実体験だが、なぜ失敗したか聞かれても、「分からねぇよ」ぐらいしか回答がない。<br />\nそれを正直に言うとキレられるし、どうしろって言うのだろうか。。。<br />\n今のところ、適当にそれらしい理由つけて回答するようにしている。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C8%A5%E8%A5%BF\">トヨタ</a>のモノマネを安直にしようとした結果、当人を追い詰めてるような気がしてならない。<br />\n組織文化は、簡単に根付くものではないので、安易に他社でやっていることを真似るのは、ダメだと思う。</p>\n\n<p>まずは、実態を正しく把握するほうが優先な気がする。<br />\nそれができていないのに、他社の施策を真似ても、失敗するでしょうね。。。</p>\n\n<h2 id=\"はじめての動画投稿\">はじめての動画投稿</h2>\n\n<p>ゲームのゆっくり実況を作ったのだが、なかなか面白いね。<br />\nYoutuber目指す子どもが一定数いるのが分かる気がする。</p>\n\n<p>編集、構成を考えるのが、個人的に楽しかった。<br />\n現実が上手くいかないから、こういうので表現するのが楽しいと感じたのかも知れない。</p>\n\n<p>自分で作った動画見て、自分で笑っているのを自覚したのだが、結構なナルシストではないかと思い、恐怖を覚えた。。。</p>\n\n<p>作っていた思ったが、マシンパワーが足りない気がする。。。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Core%20i5\">Core i5</a>だからだろうか？動画の作成に結構、時間がかかった。<br />\n７・８年前くらいに買ったやつで、メモリは増強したのだが、CPUは変えてないんだよね。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SSD\">SSD</a>も着けたいし、USBのポート数増やしたいとかもある。<br />\n冬のボーナスで、少し改造してみようかな？</p>\n\n<h2 id=\"インポスター症候群\">インポスター症候群</h2>\n\n<p>インポスター症候群という自覚はしたのだが、なかなか立ち直るのが難しい。。。</p>\n\n<p>どうしても、小さな失敗を過剰に後悔してしまう。<br />\n分かっていても、なかなか変えられない。<br />\n心の持ちようだけで変えるのは、無理があるのかもな。。。<br />\nやっぱり、環境を変えるしかないのだろうか？<br />\n今の御時世、なかなか現場は変えられないんだよね。。。<br />\n今年いっぱいで一区切り付くから、それまで持つかだな。。。</p>\n\n<p>調べてまとめた内容のページへのリンクを載せておく。<br />\n同じ悩みを抱えてる人の手助けができればいいなと思う。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F10%2F15%2F010056\" title=\"インポスター症候群の調査とまとめ - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/10/15/010056\">suzaku-tec.hatenadiary.jp</a></cite></p>\n",
      "contentSnippet": "業務こなしての問題・気づき\n設計書関連\n項番\nID管理\nその他\nなぜなぜ分析\nはじめての動画投稿\nインポスター症候群\n業務こなしての問題・気づき\n設計書関連\n項番\n案件対応で修正する際、項番ズレるの、どうしたらいいの？\nすごい見落とすのがつらい。。。\nID管理\n極力やめたほうがいい。\n意味のない文字や数字は、ものすごい間違いやすい。\nID管理のコストは、高いことを認識するべきだと思う。\nその他\nなぜなぜ分析\n問題を発生した当人へのヒアリングは、しないほうがいいのではないかと感じる。\n当人も、問題を起こしたくて起こしたわけではないと思うんだよね。\nトヨタのモノマネを安直にしようとした結果、当人を追い詰めてるような気がしてならない。\nまずは、実態を正しく把握するほうが優先な気がする。\nはじめての動画投稿\nゲームのゆっくり実況を作ったのだが、なかなか面白いね。\n編集、構成を考えるのが、個人的に楽しかった。\n自分で作った動画見て、自分で笑っているのを自覚したのだが、結構なナルシストではないかと思い、恐怖を覚えた。。。\n作っていた思ったが、マシンパワーが足りない気がする。。。\nCore i5だからだろうか？動画の作成に結構、時間がかかった。\nSSDも着けたいし、USBのポート数増やしたいとかもある。\nインポスター症候群\nインポスター症候群という自覚はしたのだが、なかなか立ち直るのが難しい。。。\nどうしても、小さな失敗を過剰に後悔してしまう。\n調べてまとめた内容のページへのリンクを載せておく。\nsuzaku-tec.hatenadiary.jp",
      "guid": "hatenablog://entry/26006613625312614",
      "categories": [
        "ドキュメント",
        "恥晒し",
        "思ひ出",
        "分析",
        "学習",
        "日記",
        "メンタル",
        "開発環境",
        "メモ"
      ],
      "isoDate": "2020-10-28T02:05:17.000Z"
    },
    {
      "title": "インポスター症候群の調査とまとめ",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/10/15/010056",
      "pubDate": "Thu, 15 Oct 2020 01:00:56 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>きっかけ</h1>\n\n<p>自分がインポスター症候群の可能性が高そうだと気づいたので、いろいろ調べたようと思った。</p>\n\n<h1>インポスター症候群とは</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/wiki\">wiki</a>引用</p>\n\n<blockquote><p>インポスター症候群（インポスターしょうこうぐん、英: Impostor syndrome、インポスター・シンド<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%ED%A1%BC%A5%E0\">ローム</a>）は、自分の達成を内面的に肯定できず、自分は詐欺師であると感じる傾向であり、一般的には、社会的に成功した人たちの中に多く見られる。ペテン師症候群（ペテンししょうこうぐん）、もしくはインポスター体験（インポスターたいけん、impostor experience）、詐欺師症候群（さぎししょうこうぐん、fraud syndrome）とも呼ばれる。</p></blockquote>\n\n<h2>個人的解釈</h2>\n\n<p>他のサイトの内容を見て、統合的に察すると、「自分の能力や実績を認められない傾向、成功ではなく失敗の方に関心が向かう」もののようだ。<br />\n詐欺師症候群って和名は、その症状がある人に追い打ちをかけるような感じがするのだが、直訳しただけなのかな？<br />\nこの和名を考えた人は、センス無いと思いました。</p>\n\n<p>日本人が陥りやすいのかと思ったが、研究の発症は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%E1%A5%EA\">アメリ</a>カらしい。<br />\n日本人だと、チーム戦として仕事を考えた際に、他人の成果でも自分のせいかとして考える思考があるから、研究対象にならなかったのだと予想。<br />\n最近は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B8%C4%BF%CD%BC%E7%B5%C1\">個人主義</a>が強くなってきたら、この症状になる人が増えたのではないかと思われる。</p>\n\n<h1>インポスター症候群の特徴</h1>\n\n<ol>\n<li>自信がない</li>\n<li>周りの評価の過大評価に恐れる（自信の能力を過小評価している）</li>\n<li>自分の実力が無いと思っている</li>\n<li>実績を受け入れられない</li>\n</ol>\n\n\n<p>ヤバい。。。<br />\nほとんど思い当たる節がある。。。<br />\n自信なんてない。逆に、どうやったら自信がつくのか教えて欲しいくらい。<br />\n過大評価というか、他人の評価を素直に受け入れられないんだよね。。。<br />\n褒められても、それは俺を煽てて操るつもりでは？って思ってしまう。<br />\n実績を受け入れられないのも、分かる。誰でもできるだろって思ってしまうのよね。。。</p>\n\n<h1>対策方法</h1>\n\n<p>サイトを横断的に見ての対策方法のサマリ</p>\n\n<h2>聡明な人々の近くにいる</h2>\n\n<p>知恵があるだけでなく、人格者であるってのがポイント。<br />\n知識不足を補うことに対して、劣等感が生まれにくいはず。</p>\n\n<h2>全知全能などいない</h2>\n\n<p>すごい開発者に見える人は、実はそんなにすごくないことはザラにある。<br />\n実績があるのは、実績を重ねられるような環境が作られているからかも知れない。</p>\n\n<p>非の打ちどころのない人であろうと努力することで、生産性を低下させ、創造性も低下することもある。<br />\n完璧を求めすぎて完璧から遠ざかることはよくあるので、あまり気負いすぎてはいけない。</p>\n\n<h2>実績を記録に残す</h2>\n\n<p>日記をつけたりして、客観的に実績が見えるようにする。<br />\nそうすることで、実績を受け入れられないことをなくし、自信を取り戻す。</p>\n\n<h2>一流から学ぶ</h2>\n\n<p>一流の人のルーチンを真似る。<br />\n結果が出ているのだから、真似れば何らかの効果があるはず。</p>\n\n<h1>俺が考えた対策方法</h1>\n\n<p>何かを作るしかない。<br />\nちゃんと目に見えるものが出来てしまえば、自然と自信に繋がり、他社の評価を受け入れられるのではないかと思う。<br />\nエンジニアであれば、特に、ね。<br />\n芸術家とか、クリエイターなら、モノを作るしか解消方法がないと思う。</p>\n\n<p>何かを作りきるまで辛抱強くいられるかが、克服の難関な気がする。</p>\n\n<h1>関連リンク</h1>\n\n<p><a href=\"https://www.lifehacker.jp/2014/10/141005impostor_syndrome.html\">&#x30A4;&#x30F3;&#x30DD;&#x30B9;&#x30BF;&#x30FC;&#x75C7;&#x5019;&#x7FA4;&#x3092;&#x514B;&#x670D;&#x3059;&#x308B;13&#x306E;&#x65B9;&#x6CD5; | &#x30E9;&#x30A4;&#x30D5;&#x30CF;&#x30C3;&#x30AB;&#x30FC;&#xFF3B;&#x65E5;&#x672C;&#x7248;&#xFF3D;</a></p>\n\n<p><a href=\"https://blog.ipswitch.com/jp/how-to-cure-your-imposter-syndrome\">&#x30A4;&#x30F3;&#x30DD;&#x30B9;&#x30BF;&#x30FC;&#x75C7;&#x5019;&#x7FA4;&#x3092;&#x514B;&#x670D;&#x3059;&#x308B;&#x65B9;&#x6CD5;</a></p>\n\n<p><a href=\"https://note.com/kamatari/n/nd1ac50c007c1\">&#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x306E;&#x6DF7;&#x4E71;&#x3068;&#x6210;&#x9577;&#x306B;&#x3064;&#x3044;&#x3066;&#xFF5C;Kamata Masahiro&#xFF5C;note</a></p>\n\n<p><a href=\"https://qiita.com/acro5piano/items/c4f2835a8e001e8335a8\">Impostor Syndrome&#xFF08;&#x8A50;&#x6B3A;&#x5E2B;&#x75C7;&#x5019;&#x7FA4;&#xFF09;&#x3068;Qiita&#x306B;&#x3064;&#x3044;&#x3066; - Qiita</a></p>\n\n<p><a href=\"https://www.webprofessional.jp/how-to-become-a-better-developer-by-coding-less/\">&#x3082;&#x3063;&#x3068;&#x512A;&#x308C;&#x305F;&#x958B;&#x767A;&#x8005;&#x306B;&#x306A;&#x308A;&#x305F;&#x3051;&#x308C;&#x3070;&#x3001;&#x3044;&#x307E;&#x3059;&#x3050;&#x30B3;&#x30FC;&#x30C7;&#x30A3;&#x30F3;&#x30B0;&#x3092;&#x3084;&#x3081;&#x306A;&#x3055;&#x3044; &ndash; WPJ</a></p>\n",
      "contentSnippet": "きっかけ\n自分がインポスター症候群の可能性が高そうだと気づいたので、いろいろ調べたようと思った。\nインポスター症候群とは\nwiki引用\nインポスター症候群（インポスターしょうこうぐん、英: Impostor syndrome、インポスター・シンドローム）は、自分の達成を内面的に肯定できず、自分は詐欺師であると感じる傾向であり、一般的には、社会的に成功した人たちの中に多く見られる。ペテン師症候群（ペテンししょうこうぐん）、もしくはインポスター体験（インポスターたいけん、impostor experience）、詐欺師症候群（さぎししょうこうぐん、fraud syndrome）とも呼ばれる。\n\n\n個人的解釈\n他のサイトの内容を見て、統合的に察すると、「自分の能力や実績を認められない傾向、成功ではなく失敗の方に関心が向かう」もののようだ。\n日本人が陥りやすいのかと思ったが、研究の発症はアメリカらしい。\n個人主義が強くなってきたら、この症状になる人が増えたのではないかと思われる。\nインポスター症候群の特徴\n自信がない\n周りの評価の過大評価に恐れる（自信の能力を過小評価している）\n自分の実力が無いと思っている\n実績を受け入れられない\nヤバい。。。\n対策方法\nサイトを横断的に見ての対策方法のサマリ\n聡明な人々の近くにいる\n知恵があるだけでなく、人格者であるってのがポイント。\n全知全能などいない\nすごい開発者に見える人は、実はそんなにすごくないことはザラにある。\n非の打ちどころのない人であろうと努力することで、生産性を低下させ、創造性も低下することもある。\n実績を記録に残す\n日記をつけたりして、客観的に実績が見えるようにする。\n一流から学ぶ\n一流の人のルーチンを真似る。\n俺が考えた対策方法\n何かを作るしかない。\n何かを作りきるまで辛抱強くいられるかが、克服の難関な気がする。\n関連リンク\nインポスター症候群を克服する13の方法 | ライフハッカー［日本版］\nインポスター症候群を克服する方法\nエンジニアの混乱と成長について｜Kamata Masahiro｜note\nImpostor Syndrome（詐欺師症候群）とQiitaについて - Qiita\nもっと優れた開発者になりたければ、いますぐコーディングをやめなさい – WPJ",
      "guid": "hatenablog://entry/26006613640558966",
      "categories": [
        "メンタル",
        "情報収集"
      ],
      "isoDate": "2020-10-14T16:00:56.000Z"
    },
    {
      "title": "2020/10/05週 気づきと振り返り 初心に返る",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/10/13/182147",
      "pubDate": "Tue, 13 Oct 2020 18:21:47 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>ドキュメント</h2>\n\n<h3>ファイルサーバー管理はやめるべき</h3>\n\n<p>ファイルサーバーにファイルを直置きして編集するのはやめるべき。</p>\n\n<h4>やってて不便だと思ったことを列挙</h4>\n\n<ul>\n<li>複数人同時編集した場合、ファイル破損のリスクが高い\n\n<ul>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Excel\">Excel</a>とかだと特に</li>\n<li><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VM\">VM</a>環境からファイルサーバーアクセスしている場合は、更にその危険性が上がる\n\n<ul>\n<li>意図しないファイルロックがかかったりして、作業が滞る</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>読み取り専用とかにして意図しない編集を避けようとすると、今度は編集した内容を保存し忘れる。。。\n\n<ul>\n<li>僕が何度かやらかして、酷く怒られましたわ。。。</li>\n</ul>\n</li>\n<li>編集の競合で待ちが発生する。</li>\n</ul>\n\n\n<h4>打開方法</h4>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VCS\">VCS</a>でドキュメント管理する。<br />\nこれ以上の方法は、今のところ、思いつかない。</p>\n\n<p>ファイルサーバー管理で、リスクの順位は下記のとおりだと思ってる。\n1. ファイル消失\n2. ファイル破損\n3. 更新忘れ\n4. 競合による待ち</p>\n\n<p>1, 2 は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VCS\">VCS</a>管理なら起きないはず。<br />\n起きたとしても、問題はローカル内に閉じているはずだから、影響範囲を小さくできると思う。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VCS\">VCS</a>の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>格納しているサーバーが飛んだというのもあるけど、それはファイルサーバーでも同じ。<br />\nそもそも、そのケースは起きづらいと思う。<br />\n3, 4 リスクはあるが、回避可能なので、そこまで大きな問題はないと思う。<br />\n更新忘れは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VCS\">VCS</a>だとコミット忘れとかだと思うので、日常的に確認する作業に含まれるため、多発はしづらいと思う。</p>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VCS\">VCS</a>とかで管理しない場合、やることが多かったり、注意することが増える気がするんだよね。<br />\nそれで負荷かかって、いろいろ忘れて問題になると思う。<br />\n環境を変えることでなんとかできるものを、個人の責任になることが多いのが日本のＩＴ現場の現状だと思う。<br />\n個人の責任にするのはいいけど、同時に環境を変えることで効率化できないか考えないとダメではなかろうかと思う。</p>\n\n<h1>雑記</h1>\n\n<p>最近、技術動向追えてないな。。。</p>\n\n<p>あんまり関心のない<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF\">システム開発</a>系のことばかり書いてしまう。。。</p>\n\n<p>WEB-DBとかを購読してるから、たまには、雑誌の中から小ネタ探して調査してもいいかもね。<br />\n昔はそうしてた気がする。。。</p>\n\n<p>なんか、最近、モヤモヤすることが続いてしまった。<br />\n精神的に弱っているせいか、尖ったことを書いてしまったこともあった気がする。<br />\n初心に返って、ちゃんとしたスキルを身につけるための行動をしていくように心がけよう。</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nドキュメント\nファイルサーバー管理はやめるべき\nファイルサーバーにファイルを直置きして編集するのはやめるべき。\nやってて不便だと思ったことを列挙\n複数人同時編集した場合、ファイル破損のリスクが高い\n\n\nExcelとかだと特に\nVM環境からファイルサーバーアクセスしている場合は、更にその危険性が上がる\n\n\n意図しないファイルロックがかかったりして、作業が滞る\n読み取り専用とかにして意図しない編集を避けようとすると、今度は編集した内容を保存し忘れる。。。\n\n\n僕が何度かやらかして、酷く怒られましたわ。。。\n編集の競合で待ちが発生する。\n打開方法\nVCSでドキュメント管理する。\nファイルサーバー管理で、リスクの順位は下記のとおりだと思ってる。\n1. ファイル消失\n2. ファイル破損\n3. 更新忘れ\n4. 競合による待ち\n1, 2 は、VCS管理なら起きないはず。\nVCSのリポジトリ格納しているサーバーが飛んだというのもあるけど、それはファイルサーバーでも同じ。\nVCSだとコミット忘れとかだと思うので、日常的に確認する作業に含まれるため、多発はしづらいと思う。\nVCSとかで管理しない場合、やることが多かったり、注意することが増える気がするんだよね。\n雑記\n最近、技術動向追えてないな。。。\nあんまり関心のないシステム開発系のことばかり書いてしまう。。。\nWEB-DBとかを購読してるから、たまには、雑誌の中から小ネタ探して調査してもいいかもね。\nなんか、最近、モヤモヤすることが続いてしまった。\n精神的に弱っているせいか、尖ったことを書いてしまったこともあった気がする。\n初心に返って、ちゃんとしたスキルを身につけるための行動をしていくように心がけよう。",
      "guid": "hatenablog://entry/26006613640244346",
      "categories": [
        "ドキュメント",
        "愚痴",
        "日記",
        "思ひ出",
        "メンタル"
      ],
      "isoDate": "2020-10-13T09:21:47.000Z"
    },
    {
      "title": "2020/09/21週 気づきと振り返り デザインは偉大",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/10/06/085056",
      "pubDate": "Tue, 06 Oct 2020 08:50:56 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>レビュー</h2>\n\n<h3>指摘が多いからって罵倒していいわけじゃないよね？</h3>\n\n<p>今やっているドキュメントが、死ぬほど読みづらい上に、何か一つを修正すると連動して複数の箇所の修正が必要になる。<br />\n芋づる式に修正箇所が増えてて、レビュー時にも修正漏れとか大量に指摘されるのだが、だからって、「あほ」とか罵倒していいわけないと思うのだが、俺が違うのか？</p>\n\n<p>海より広い俺の心も、ここらが我慢の限界だと思ったよ。。。<br />\n※これの元ネタ、知っている人とは仲良くなれそう。</p>\n\n<p>こういうリーダーには成りたくないと思いましたわ。<br />\nそれに、指摘事項の意味が分からないときに、すごく聴きに行きづらい。<br />\nすでに、俺はこの人と会話したいと思わない。<br />\nあと、あんたのレビューが通ったら、エンドユーザーのところに行くのだが、いいの？って感じた。<br />\nその指摘を設計書にコメントで書く神経が分からない。<br />\n消し忘れたりしたらどうするんだろうって思った。</p>\n\n<p>尋常なないくらいハゲになりそうな予感がしました。</p>\n\n<h2>デザイン</h2>\n\n<p>最近、強く思うのだが、UI/UXって、むちゃくちゃ重要だなって思う。</p>\n\n<p>今、改修している画面が、項目をてんこ盛りしている画面で、ドキュメントは分かりづらい・画面が汚くて操作しづらくて、辛い。<br />\nなんと言えば伝わるだろうか。。。<br />\nなんか、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC\">プログラマー</a>が考えた画面って感じの画面。<br />\n伝わるかな？<br />\nもう、隙間なく入力項目が配置されている感じ。</p>\n\n<p>良いUI/UXは、読みやすいドキュメントを生み、メンテしやすい画面になると感じる。<br />\n今まで<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF\">システム開発</a>してきたけど、デザイン会社に画面デザインを依頼していたところは、比較的、残業は少なかった気がする。<br />\n逆に、システム会社（<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SIer\">SIer</a>とか）が作るような画面は、項目をてんこ盛りにするので、かなり辛い。<br />\n何か条件が変わると、画面のどこかが変わるとか、項目が多すぎて変化が分からないってことがある。<br />\n視力悪化のためのストレス試験を受けている感じすらする。</p>\n\n<p>長期的に見て、デザイン会社にちゃんと発注するほうが、コスト安くなる気がする。<br />\nデザイン会社にもよるのだろうが、いままでの経験から考えると、そういう結論になる。</p>\n\n<p>この考え、ユーザー側に理解してもらえるのか、かなり疑問。<br />\n目先のコストを安く済ませようとして、長期的に損をするパターンがありそう。</p>\n\n<h2><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%EC%BE%DA\">東証</a>の会見</h2>\n\n<p>見てたけど、記者のレベル低すぎないか？<br />\n嫌味だけ言ってきたやつとか、頭おかしいんじゃねーの？って思った。<br />\nあと、すでに回答されている内容を引き出す質問をする意味が分からん。<br />\nその質問したら、前と同じこと言うよね？って思ったのだが、違うのだろうか？</p>\n\n<p>質問してる記者は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF\">システム開発</a>とかに携わったことがない。。？<br />\n定時点の意味がわからないって感じの質問を聞いたときは、「まじかよ。。。」って思った。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%EC%BE%DA\">東証</a>の回答者は、かなり親切に対応していると感じた。</p>\n\n<p>なんか、質問聞いてたら、そもそも株取引したことないんじゃないの？って感じの記者もいたな。。<br />\n最後の方は、もうシステム関係ないじゃんって思ったのだが、記者の人は何を聞きに来たのだろうか？<br />\nそれ聞いてどうすんの？って感じの質問が多すぎ。</p>\n\n<p>「ステータスが難しい言い方」ってのが、すごくジワる。<br />\n俺も、回答する側だと、そういうかも。<br />\nだって、記者の人たち、システムの考え方とか、全然分からなそうだったからな。</p>\n\n<p>改めて確認が多すぎるな。。。<br />\n本当に記者なの？<br />\n同じような質問を何回するんだ？</p>\n\n<p>「横文字使わず優しく教えて下さい」って言ってたのを聞いたときは、さすがに吹いたな。。。<br />\nそれ、聞いたことをそのまま流すつもりだろ。。。<br />\n聞いた記者は、フェイルオーバーとか、ディスクとかも分からないのだろうな。<br />\n記者なら情報を咀嚼して、分かりやすく伝えるのが仕事だと思うのだが、それを放棄してる？<br />\n伝言ゲームでいいのなら、この会見に来なくて良かったのでは？って思った。<br />\n呆れると同時に、腹立たしさを感じる。<br />\nこんなのにも対応しなきゃいけないから、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C5%EC%BE%DA\">東証</a>の会見をしていた人たちには同情するよ。</p>\n\n<p>これは、もしかしたら、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%B3%AB%C8%AF\">システム開発</a>の上流工程で同じようなことが起こってる？？<br />\nユーザ側が不勉強すぎて、話がまとまらず、しわ寄せが俺たちのところに来ているとかないよね？<br />\n急に怖くなってきたわ。。。</p>\n\n<h1>雑記</h1>\n\n<p>もう、疲れたよ。。。<br />\n毎日かけられる会議の精神負荷、視力悪化のためのドキュメント、すべてがストレスを与えてくる。<br />\nストレス社会でどうやって生き抜くか、なかなか答えがでない。<br />\nもう、クラゲになって、流れに身を任せて末永く生きたい気分。<br />\nこのポエム、もしかして病んでる？？</p>\n\n<p>動物なら癒やしてくれるだろうか？</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nレビュー\n指摘が多いからって罵倒していいわけじゃないよね？\n今やっているドキュメントが、死ぬほど読みづらい上に、何か一つを修正すると連動して複数の箇所の修正が必要になる。\n海より広い俺の心も、ここらが我慢の限界だと思ったよ。。。\nこういうリーダーには成りたくないと思いましたわ。\n尋常なないくらいハゲになりそうな予感がしました。\nデザイン\n最近、強く思うのだが、UI/UXって、むちゃくちゃ重要だなって思う。\n今、改修している画面が、項目をてんこ盛りしている画面で、ドキュメントは分かりづらい・画面が汚くて操作しづらくて、辛い。\nプログラマーが考えた画面って感じの画面。\n良いUI/UXは、読みやすいドキュメントを生み、メンテしやすい画面になると感じる。\nシステム開発してきたけど、デザイン会社に画面デザインを依頼していたところは、比較的、残業は少なかった気がする。\nSIerとか）が作るような画面は、項目をてんこ盛りにするので、かなり辛い。\n長期的に見て、デザイン会社にちゃんと発注するほうが、コスト安くなる気がする。\nこの考え、ユーザー側に理解してもらえるのか、かなり疑問。\n東証の会見\n見てたけど、記者のレベル低すぎないか？\n質問してる記者は、システム開発とかに携わったことがない。。？\n東証の回答者は、かなり親切に対応していると感じた。\nなんか、質問聞いてたら、そもそも株取引したことないんじゃないの？って感じの記者もいたな。。\n「ステータスが難しい言い方」ってのが、すごくジワる。\n改めて確認が多すぎるな。。。\n「横文字使わず優しく教えて下さい」って言ってたのを聞いたときは、さすがに吹いたな。。。\n東証の会見をしていた人たちには同情するよ。\nこれは、もしかしたら、システム開発の上流工程で同じようなことが起こってる？？\n雑記\nもう、疲れたよ。。。\n動物なら癒やしてくれるだろうか？",
      "guid": "hatenablog://entry/26006613634701914",
      "categories": [
        "メンタル",
        "チーム",
        "愚痴",
        "ドキュメント",
        "UI/UX",
        "日記"
      ],
      "isoDate": "2020-10-05T23:50:56.000Z"
    },
    {
      "title": "2020/09/21週 気づきと振り返り フォルダ構成は大切",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/09/27/224751",
      "pubDate": "Sun, 27 Sep 2020 22:47:51 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>設計・ドキュメント</h2>\n\n<h3>ファイルを無駄に増やすな！！怒！！</h3>\n\n<p>なんか無駄にファイルが分割されているせいで、レビュー時に指摘されてイラッとするのだが。。。<br />\nファイルが少なくて、近くにあるのなら気づくけど、大量にある上に、場所が離れているという。。。<br />\nそれに、各ファイルの説明もないし、気づけって言う方が無理だろ。。。</p>\n\n<p>なんか、それでスゲー嫌味っぽく言われて、腹立たしい。</p>\n\n<p>あと、フォルダ構成も最悪だった。<br />\n大枠からだんだんと範囲が特定されるようなフォルダ構成が基本だと思うのだが、そうなってないんだよね。。。。<br />\n全然別のフォルダ下に全く同じフォルダ構成があるから、たまに分からなくなる。<br />\nこれは、フォルダの迷路でも作っているのか？って思う。</p>\n\n<p>フォルダ構成って、意外と大切だと思う。</p>\n\n<h1>雑記</h1>\n\n<p>最近、精神的に追い込まれてる気がする。。。<br />\n何やっても上手くいかないんじゃないか？って常に心の中で思ってしまうんだよね。。。</p>\n\n<p>温泉街に旅行に行っていたが、精神的な疲れは取れなかったよ。。。<br />\n月曜から仕事だと思うと、結構、憂鬱。<br />\nこれを解消する方法は、ないのだろうか？</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\n設計・ドキュメント\nファイルを無駄に増やすな！！怒！！\nなんか無駄にファイルが分割されているせいで、レビュー時に指摘されてイラッとするのだが。。。\nなんか、それでスゲー嫌味っぽく言われて、腹立たしい。\nあと、フォルダ構成も最悪だった。\nフォルダ構成って、意外と大切だと思う。\n雑記\n最近、精神的に追い込まれてる気がする。。。\n温泉街に旅行に行っていたが、精神的な疲れは取れなかったよ。。。\n月曜から仕事だと思うと、結構、憂鬱。\nこれを解消する方法は、ないのだろうか？",
      "guid": "hatenablog://entry/26006613632066325",
      "categories": [
        "愚痴",
        "ドキュメント",
        "メンタル"
      ],
      "isoDate": "2020-09-27T13:47:51.000Z"
    },
    {
      "title": "2020/07/27週 気づきと振り返り 精神崩壊してない俺はカミーユ以上",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/09/19/010331",
      "pubDate": "Sat, 19 Sep 2020 01:03:31 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>業務こなしての問題・気づき</h1>\n\n<h2>設計・ドキュメント</h2>\n\n<h3>印刷時のヘッダー・フッターにこだわる</h3>\n\n<p>エクセルのヘッダー・フッターって、そんなに重要か？<br />\nレビュー出した際に、そこの部分のダメ出しをされたのだが、まさか、最終的に紙に出して管理しているのだろうか？</p>\n\n<p>紙で管理するのはいいけど、情報の扱いが難しくなるから、絶対にやめたほうがいいと思う。<br />\n紙１枚でも紛失したら、情報漏えいだし、シュレッダーかけないのはNGになるだろうね。<br />\nこっそり持ち出しもしやすいってのもある。<br />\n無駄に労力かける割には、セキュリティリスクは減ってない。むしろ増えてる。<br />\nペーパーレス化して欲しいのだが、力関係が面倒くさい。<br />\n日本の仕事場って、なんで政治的な要因が絡んでくるのが多いんだ？</p>\n\n<p>仕様以外のところでビクビクしながらドキュメント直すの、正直しんどいのだが。。。</p>\n\n<h3>そこまで書く？</h3>\n\n<p>ウォータフォールで開発しているのだが、概要・要件フェーズで、詳細な処理内容の記述を求められているのだが、そこまでする必要あるんですかね？</p>\n\n<p>むちゃくちゃ細かく書いているせいで、DB変更が甚大じゃないレベルで影響があるのだが。。。<br />\n概要だと、まだＤＢ周りがブレるのだが、そのブレの影響をモロに食らって死にそう。。。</p>\n\n<p>ケツは決まってて、やることがだるま式に増えるのは、マジで精神的にキツイ。<br />\n俺じゃなかったら、精神崩壊してると思うよ？</p>\n\n<h3>セルフチェック</h3>\n\n<p>５～６個くらいならわかるんだけど、２０個以上をセルフチェックさせるのは、無理がある。</p>\n\n<p>しかも、書いてあることは、基本的に仕様に関わらないことだし。</p>\n\n<p>どうでもいいところにこだわるの、マジでやめて欲しいわ。。。<br />\nレビューで何か指摘しなきゃっていう強迫観念でも抱えているのだろうか？<br />\nあら捜しで、どうでもいいところが指摘され、それがセルフチェックに入り、開発者の負担をドンドン増やしている認識がないのだろうという理解を最近するようになった。<br />\nこれは、どう考えても負の連鎖だろ。。。<br />\nいくらやっても、あら捜しがある以上、タスクが減ることはないという。。。<br />\n現代版の拷問ではなかろうかとすら思えてくる。</p>\n\n<p>もう、終わりが見えなくて辛いわぁ。。。</p>\n\n<h3>総括</h3>\n\n<p>硬い現場ほど、どうでもいいところにこだわる印象がある。<br />\n「それって、必要なん？」って指摘されてて思ってるけど、いざ言うと、ルールだからの一点張りだからな。。。<br />\nそのルール見直せやって思う。</p>\n\n<p>これで精神崩壊起こしてない俺は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%DF%A1%BC%A5%E6\">カミーユ</a>より強いと思っていいだろうか？<br />\n今風だと、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%DF%A5%EA%A5%A2\">エミリア</a>より強いと思っていいだろうか？</p>\n\n<h2>Java15</h2>\n\n<p>リリースされましたな。<br />\n９月のリリースは、俺の誕生日と近いから、否が応でも年齢を意識しちゃうんだよね。<br />\nそういうシビアなお年頃なの。</p>\n\n<p>リリース前にまとめた記事を列挙しておく。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F09%2F02%2F223834\" title=\"【Java】Java15先取り調査 環境構築編 - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/09/02/223834\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F09%2F02%2F224311\" title=\"【Java】Java15先取り調査 JEP一覧と概要 - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/09/02/224311\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F09%2F05%2F224624\" title=\" 【Java】Java15先取り調査 JEP 360: Sealed Classes (Preview) - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/09/05/224624\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F09%2F05%2F231224\" title=\"【Java】Java15先取り調査 JEP 375: Pattern Matching for instanceof (Second Preview) - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/09/05/231224\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h2>直近の目標</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%BE%F0%CA%F3%BD%E8%CD%FD%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3\">情報処理技術者試験</a>でＤＢ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B9%A5%DA%A5%B7%A5%E3\">スペシャ</a>リストを受けるのだが、受かる気がしない。。。。<br />\n業務で精神ズタボロにされてるのに、試験の勉強なんかする気起きねぇよ。。。<br />\n現実逃避のために、だいたい<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3\">ポケモン</a>のランクマやってる。<br />\n最近、安定して４桁台にいけるようになった。やる時間がとれてれば、たぶん３桁行けるんじゃなかろうか？</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\n設計・ドキュメント\n印刷時のヘッダー・フッターにこだわる\nエクセルのヘッダー・フッターって、そんなに重要か？\n紙で管理するのはいいけど、情報の扱いが難しくなるから、絶対にやめたほうがいいと思う。\n仕様以外のところでビクビクしながらドキュメント直すの、正直しんどいのだが。。。\nそこまで書く？\nウォータフォールで開発しているのだが、概要・要件フェーズで、詳細な処理内容の記述を求められているのだが、そこまでする必要あるんですかね？\nむちゃくちゃ細かく書いているせいで、DB変更が甚大じゃないレベルで影響があるのだが。。。\nケツは決まってて、やることがだるま式に増えるのは、マジで精神的にキツイ。\nセルフチェック\n５～６個くらいならわかるんだけど、２０個以上をセルフチェックさせるのは、無理がある。\nしかも、書いてあることは、基本的に仕様に関わらないことだし。\nどうでもいいところにこだわるの、マジでやめて欲しいわ。。。\nもう、終わりが見えなくて辛いわぁ。。。\n総括\n硬い現場ほど、どうでもいいところにこだわる印象がある。\nこれで精神崩壊起こしてない俺は、カミーユより強いと思っていいだろうか？\nエミリアより強いと思っていいだろうか？\nJava15\nリリースされましたな。\nリリース前にまとめた記事を列挙しておく。\nsuzaku-tec.hatenadiary.jp\nsuzaku-tec.hatenadiary.jp\nsuzaku-tec.hatenadiary.jp\nsuzaku-tec.hatenadiary.jp\n直近の目標\n情報処理技術者試験でＤＢスペシャリストを受けるのだが、受かる気がしない。。。。\nポケモンのランクマやってる。\n最近、安定して４桁台にいけるようになった。やる時間がとれてれば、たぶん３桁行けるんじゃなかろうか？",
      "guid": "hatenablog://entry/26006613629562556",
      "categories": [
        "メンタル",
        "思ひ出",
        "愚痴",
        "日記",
        "ドキュメント",
        "セキュリティ",
        "Java",
        "学習"
      ],
      "isoDate": "2020-09-18T16:03:31.000Z"
    },
    {
      "title": "【Java】Java15先取り調査 JEP 375: Pattern Matching for instanceof (Second Preview)",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/09/05/231224",
      "pubDate": "Sat, 05 Sep 2020 23:12:24 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>JEP</h1>\n\n<p><a href=\"https://openjdk.java.net/jeps/375\">JEP 375: Pattern Matching for instanceof (Second Preview)</a></p>\n\n<h1>内容</h1>\n\n<p>大元であるJEP305との違いがよく分からんかった。。。<br />\n第二プレビューみたいな感じに捉えたけど、あってるのかな？<br />\n英語は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google%CB%DD%CC%F5\">Google翻訳</a>に一任しているから、あってるか、若干不安がある。。。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F02%2F16%2F102648\" title=\"Java14事前調査 JEP 305: Pattern Matching for instanceof (Preview) - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/02/16/102648\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h1>追加調査</h1>\n\n<p>さすがに、これだけだと中身なさすぎるので、以前調べはしたけど、記載してなかった内容を書いておく</p>\n\n<h2>ブロック外でキャストした値を参照できるか？</h2>\n\n<p>とりあえず、テストコード<br />\nやってることは、オブジェクト型にStringを突っ込んで、それをinstanceofで判定＆キャストしている。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>public class JEP375 {\n  \n  public static void main(String[] args) {\n    Object obj = &#34;JEP375&#34;;\n    \n    if (obj instanceof String s) {\n      // (a)\n      System.out.println(s);\n    } else {\n      // (b)\n      System.out.println(s);\n    }\n  }\n}</pre>\n\n\n<p>たぶん、(b)で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>エラーになると思う。<br />\nそう思った理由は、参照できちゃ不味い箇所だから。</p>\n\n<p>そして、緊張の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>！</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$  javac --enable-preview -source 15 JEP375.java \nJEP375.java:11: エラー: シンボルを見つけられません\n      System.out.println(s);</pre>\n\n\n<p>恥をさらさずに助かった。。。<br />\nやはり、参照範囲は、ifのブロック内のみで、elseは対象外だったね。<br />\nこの参照範囲になっていることで、安全にアクセスできるというわけですね。</p>\n\n<h1>感想</h1>\n\n<p>はやく入れて欲しい。<br />\n実装しているときに、意外と出くわす問題なので、この記述ができるようになるのは、読む方も実装する方も楽だと思う。<br />\n特に、基盤とかＦＷ作っている人は、キャストのために変数作ったりするケースは多いんじゃないかな？</p>\n\n<p>変数追加するだけってのを、軽視している人が意外と多いんだよね。 <br />\n作る側は、そうだろうけど、読む方は、意図を理解するのに苦戦する。<br />\nあったほうが可読性上がるケースもあるから、一概には言えないけど、できることなら、変数はなるべく作らないほうがいい。</p>\n\n<p>リーダブルコードに、なんか書いてあった気がする。<br />\n読んでるときにものすごい納得したのだが、どう書いてあったのか思い出せない。。。<br />\nたまに、読み返してみようかな？</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2016%2F07%2F18%2F233647\" title=\"【書評】リーダブルコード - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2016/07/18/233647\">suzaku-tec.hatenadiary.jp</a></cite></p>\n",
      "contentSnippet": "JEP\nJEP 375: Pattern Matching for instanceof (Second Preview)\n内容\n大元であるJEP305との違いがよく分からんかった。。。\nGoogle翻訳に一任しているから、あってるか、若干不安がある。。。\nsuzaku-tec.hatenadiary.jp\n追加調査\nさすがに、これだけだと中身なさすぎるので、以前調べはしたけど、記載してなかった内容を書いておく\nブロック外でキャストした値を参照できるか？\nとりあえず、テストコード\npublic class JEP375 {\n  \n  public static void main(String[] args) {\n    Object obj = \"JEP375\";\n    \n    if (obj instanceof String s) {\n      // (a)\n      System.out.println(s);\n    } else {\n      // (b)\n      System.out.println(s);\n    }\n  }\n}\nたぶん、(b)でコンパイルエラーになると思う。\nそして、緊張のコンパイル！\n$  javac --enable-preview -source 15 JEP375.java \nJEP375.java:11: エラー: シンボルを見つけられません\n      System.out.println(s);\n恥をさらさずに助かった。。。\n感想\nはやく入れて欲しい。\n変数追加するだけってのを、軽視している人が意外と多いんだよね。 \nリーダブルコードに、なんか書いてあった気がする。\nsuzaku-tec.hatenadiary.jp",
      "guid": "hatenablog://entry/26006613624259612",
      "categories": [
        "プログラミング",
        "Java",
        "学習",
        "情報収集"
      ],
      "isoDate": "2020-09-05T14:12:24.000Z"
    },
    {
      "title": " 【Java】Java15先取り調査 JEP 360: Sealed Classes (Preview)",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/09/05/224624",
      "pubDate": "Sat, 05 Sep 2020 22:46:24 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>JEP</h1>\n\n<p><a href=\"https://openjdk.java.net/jeps/360\">JEP 360: Sealed Classes (Preview)</a></p>\n\n<h1>内容</h1>\n\n<p>簡単に言うと、継承先を限定することができるクラスやインタフェースを作れるらしい。</p>\n\n<p>これができる背景には、目的にそぐわない継承やインタフェースの実装が乱立していた事実があるのかもしれない。※個人の予想です。</p>\n\n<p>コード的には、下記のような記載になる。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sealed class Shape permits Circle, Rectangle, Square { }</pre>\n\n\n<p>目新しい違いは、sealedとpermits。<br />\nsealedで、今回の機能を使うことを宣言している。<br />\nそして、継承を許可するクラスは、permitsで宣言。<br />\n例の内容だと、<code>Circle, Rectangle, Square</code>が継承を許可されたことになる。</p>\n\n<h1>調査</h1>\n\n<p>まずは、載ってるサンプルを試す。</p>\n\n<pre class=\"code JEP360.java\" data-lang=\"JEP360.java\" data-unlink>sealed class Shape permits Circle, Rectangle, Square { }\n\nclass Circle    extends Shape { }\nclass Rectangle extends Shape { }\nclass Square    extends Shape { }</pre>\n\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>ファイル作ったので、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/preview\">preview</a>版なので、<code>--enable-preview</code>をつける。<br />\n※本当は<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>しようとしたら指摘されて気づいた。。。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ javac --enable-preview -source 15 JEP360.java \nJEP360.java:3: エラー: sealed、non-sealedまたはfinal修飾子が必要です\nclass Circle    extends Shape { }\n^\nJEP360.java:4: エラー: sealed、non-sealedまたはfinal修飾子が必要です\nclass Rectangle extends Shape { }\n^\nJEP360.java:5: エラー: sealed、non-sealedまたはfinal修飾子が必要です\nclass Square    extends Shape { }</pre>\n\n\n<p>なんか、final句つけないとダメらしい。。。<br />\nつまり、１世代しか生き残れない親クラスってわけか。<br />\n継承できる先を指定しているので、たしかに、そうだなって、思った。</p>\n\n<p>final句つけて、再<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a></p>\n\n<pre class=\"code JEP360.java \" data-lang=\"JEP360.java \" data-unlink>sealed class Shape permits Circle, Rectangle, Square { }\n\nfinal class Circle    extends Shape { }\nfinal class Rectangle extends Shape { }\nfinal class Square    extends Shape { }</pre>\n\n\n\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ javac --enable-preview -source 15 JEP360.java </pre>\n\n\n<p>通った。。。<br />\nでも、動作を確認できないから、動作確認ようのクラスを追加しないとダメだね。。。</p>\n\n<p>とりあえず作ったサンプルコード！</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sealed class Shape permits Circle, Rectangle, Square { }\n\nfinal class Circle    extends Shape {\n  public int center() {\n    return 0;\n  }\n}\nfinal class Rectangle extends Shape {\n  public int length() {\n    return 1;\n  }\n}\nfinal class Square    extends Shape {\n  public int side() {\n    return 2;\n  }\n}\n\npublic class JEP360 {\n  public static void main(String[] args) {\n    Shape s = new Circle();\n    System.out.println(JEP360.getCenter(s));\n  }\n  \n  public static int getCenter(Shape shape) {\n    if (shape instanceof Circle c) {\n      return c.center();\n    } else if (shape instanceof Rectangle r) {\n        return r.length();\n    } else if (shape instanceof Square s) {\n        return s.side();\n    }\n    \n    return -1;\n  }\n}</pre>\n\n\n<p>そんでもって実行。<br />\n期待値としては、Circleクラスを渡しているので、0が返ってきて欲しい。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ javac --enable-preview -source 15 JEP360.java \n$ java --enable-preview JEP360\n0</pre>\n\n\n<p>ちゃんと返ってきたね。</p>\n\n<h2>指定以外のクラスで継承するとどうなるのか？</h2>\n\n<p>とりあえずサンプルコード</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sealed class Shape permits Circle, Rectangle, Square { }\n\nfinal class Circle    extends Shape {\n  public int center() {\n    return 0;\n  }\n}\nfinal class Rectangle extends Shape {\n  public int length() {\n    return 1;\n  }\n}\nfinal class Square    extends Shape {\n  public int side() {\n    return 2;\n  }\n}\n\nfinal class Test extends Shape {\n  \n}</pre>\n\n\n<p>あらたに<code>Test</code>というクラスを追加した。<br />\nこのクラスは、Shapeを継承しているけど、Shape側のpermitsには含まれていない。</p>\n\n<p>たぶん、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時にエラーで弾かれると思う。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ javac --enable-preview -source 15 JEP360.java \nJEP360.java:19: エラー: クラスはシール・クラスShapeを拡張できません\nfinal class Test extends Shape {\n      ^</pre>\n\n\n<p>当たり！！<br />\nやっぱり、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB\">コンパイル</a>時に弾かれるよね。<br />\n正解したから、何かご褒美が欲しい。</p>\n\n<h2>permitsに存在しないクラスを指定するとどうなるのか？</h2>\n\n<p>とりあえず、サンプルコード</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sealed class Shape permits Circle, Rectangle, Square, Unknown { }\n\nfinal class Circle    extends Shape {\n  public int center() {\n    return 0;\n  }\n}\nfinal class Rectangle extends Shape {\n  public int length() {\n    return 1;\n  }\n}\nfinal class Square    extends Shape {\n  public int side() {\n    return 2;\n  }\n}</pre>\n\n\n<p>Unknown が存在しないクラス。<br />\nその他は定義済み。</p>\n\n<p>期待値としては、そのままビルド通っていいのでは？って思ってる。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ javac --enable-preview -source 15 JEP360.java \nJEP360.java:1: エラー: シンボルを見つけられません\nsealed class Shape permits Circle, Rectangle, Square, Unknown { }\n                                                      ^\n  シンボル: クラス Unknown\nJEP360.java:1: エラー: 無効なpermits句\nsealed class Shape permits Circle, Rectangle, Square, Unknown { }\n                           ^\n  (スーパータイプUnknownへの参照が不正です)</pre>\n\n\n<p>なんだと。。。<br />\nビルド時にクラスの存在も確認しているのか。。。</p>\n\n<h1>感想</h1>\n\n<p>クラスをグルーピングできるようになるって理解でよいだろうか？<br />\n使う側で不用意な拡張とかされないようになるから、ＦＷ側を安全に使うようになる理解でいるが、どうだろう？</p>\n\n<p>若干、疑問に思っているのは、オープン・クローズドの原則と相反する気がするのだが、気のせいだろうか？<br />\nなぜ入ったのか、経緯をよく理解できてないせいか、どうにも腑に落ちない。</p>\n\n<p>今年はイベントがほとんどないから、理解があっているのか確かめる場が無いのが痛い。。。</p>\n",
      "contentSnippet": "JEP\nJEP 360: Sealed Classes (Preview)\n内容\n簡単に言うと、継承先を限定することができるクラスやインタフェースを作れるらしい。\nこれができる背景には、目的にそぐわない継承やインタフェースの実装が乱立していた事実があるのかもしれない。※個人の予想です。\nコード的には、下記のような記載になる。\nsealed class Shape permits Circle, Rectangle, Square { }\n目新しい違いは、sealedとpermits。\nCircle, Rectangle, Squareが継承を許可されたことになる。\n調査\nまずは、載ってるサンプルを試す。\nsealed class Shape permits Circle, Rectangle, Square { }\n\nclass Circle    extends Shape { }\nclass Rectangle extends Shape { }\nclass Square    extends Shape { }\njavaファイル作ったので、コンパイル。\npreview版なので、--enable-previewをつける。\nコンパイルしようとしたら指摘されて気づいた。。。\n$ javac --enable-preview -source 15 JEP360.java \nJEP360.java:3: エラー: sealed、non-sealedまたはfinal修飾子が必要です\nclass Circle    extends Shape { }\n^\nJEP360.java:4: エラー: sealed、non-sealedまたはfinal修飾子が必要です\nclass Rectangle extends Shape { }\n^\nJEP360.java:5: エラー: sealed、non-sealedまたはfinal修飾子が必要です\nclass Square    extends Shape { }\nなんか、final句つけないとダメらしい。。。\nfinal句つけて、再コンパイル\nsealed class Shape permits Circle, Rectangle, Square { }\n\nfinal class Circle    extends Shape { }\nfinal class Rectangle extends Shape { }\nfinal class Square    extends Shape { }\n$ javac --enable-preview -source 15 JEP360.java \n通った。。。\nとりあえず作ったサンプルコード！\nsealed class Shape permits Circle, Rectangle, Square { }\n\nfinal class Circle    extends Shape {\n  public int center() {\n    return 0;\n  }\n}\nfinal class Rectangle extends Shape {\n  public int length() {\n    return 1;\n  }\n}\nfinal class Square    extends Shape {\n  public int side() {\n    return 2;\n  }\n}\n\npublic class JEP360 {\n  public static void main(String[] args) {\n    Shape s = new Circle();\n    System.out.println(JEP360.getCenter(s));\n  }\n  \n  public static int getCenter(Shape shape) {\n    if (shape instanceof Circle c) {\n      return c.center();\n    } else if (shape instanceof Rectangle r) {\n        return r.length();\n    } else if (shape instanceof Square s) {\n        return s.side();\n    }\n    \n    return -1;\n  }\n}\nそんでもって実行。\n$ javac --enable-preview -source 15 JEP360.java \n$ java --enable-preview JEP360\n0\nちゃんと返ってきたね。\n指定以外のクラスで継承するとどうなるのか？\nとりあえずサンプルコード\nsealed class Shape permits Circle, Rectangle, Square { }\n\nfinal class Circle    extends Shape {\n  public int center() {\n    return 0;\n  }\n}\nfinal class Rectangle extends Shape {\n  public int length() {\n    return 1;\n  }\n}\nfinal class Square    extends Shape {\n  public int side() {\n    return 2;\n  }\n}\n\nfinal class Test extends Shape {\n  \n}\nあらたにTestというクラスを追加した。\nたぶん、コンパイル時にエラーで弾かれると思う。\n$ javac --enable-preview -source 15 JEP360.java \nJEP360.java:19: エラー: クラスはシール・クラスShapeを拡張できません\nfinal class Test extends Shape {\n      ^\n当たり！！\nコンパイル時に弾かれるよね。\npermitsに存在しないクラスを指定するとどうなるのか？\nとりあえず、サンプルコード\nsealed class Shape permits Circle, Rectangle, Square, Unknown { }\n\nfinal class Circle    extends Shape {\n  public int center() {\n    return 0;\n  }\n}\nfinal class Rectangle extends Shape {\n  public int length() {\n    return 1;\n  }\n}\nfinal class Square    extends Shape {\n  public int side() {\n    return 2;\n  }\n}\nUnknown が存在しないクラス。\n期待値としては、そのままビルド通っていいのでは？って思ってる。\n$ javac --enable-preview -source 15 JEP360.java \nJEP360.java:1: エラー: シンボルを見つけられません\nsealed class Shape permits Circle, Rectangle, Square, Unknown { }\n                                                      ^\n  シンボル: クラス Unknown\nJEP360.java:1: エラー: 無効なpermits句\nsealed class Shape permits Circle, Rectangle, Square, Unknown { }\n                           ^\n  (スーパータイプUnknownへの参照が不正です)\nなんだと。。。\n感想\nクラスをグルーピングできるようになるって理解でよいだろうか？\n若干、疑問に思っているのは、オープン・クローズドの原則と相反する気がするのだが、気のせいだろうか？\n今年はイベントがほとんどないから、理解があっているのか確かめる場が無いのが痛い。。。",
      "guid": "hatenablog://entry/26006613623514998",
      "categories": [
        "Java",
        "プログラミング",
        "学習",
        "情報収集"
      ],
      "isoDate": "2020-09-05T13:46:24.000Z"
    },
    {
      "title": "【Java】Java15先取り調査 JEP一覧と概要",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/09/02/224311",
      "pubDate": "Wed, 02 Sep 2020 22:43:11 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>一覧</h1>\n\n<ul>\n<li>339: Edwards-Curve Digital Signature Algorithm (EdDSA)</li>\n<li>360: Sealed Classes (<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>)</li>\n<li>371: Hidden Classes</li>\n<li>372: Remove the Nashorn <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> Engine</li>\n<li>373: Reimplement the Legacy DatagramSocket <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></li>\n<li>374: Disable and Deprecate Biased Locking</li>\n<li>375: Pattern Matching for instanceof (Second <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>)</li>\n<li>377: ZGC: A Scalable Low-Latency Garbage Collector</li>\n<li>378: Text Blocks</li>\n<li>379: Shenandoah: A Low-Pause-Time Garbage Collector</li>\n<li>381: Remove the <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Solaris\">Solaris</a> and <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SPARC\">SPARC</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ports\">Ports</a></li>\n<li>383: Foreign-Memory <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Access\">Access</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a> (Second Incubator)</li>\n<li>384: Records (Second <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>)</li>\n<li>385: Deprecate <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a> Activation for Removal</li>\n</ul>\n\n\n<p>結構多いな。。。</p>\n\n<h1>各JEPのサマリ翻訳</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Google%CB%DD%CC%F5\">Google翻訳</a>先生、出番です！</p>\n\n<h2>339: Edwards-Curve Digital Signature Algorithm (EdDSA)</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>-8032に記載されている、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%C9\">エド</a>ワーズ曲線デジタル署名<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0\">アルゴリズム</a>を使用した暗号化署名を実装する。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/339\">JEP 339: Edwards-Curve Digital Signature Algorithm (EdDSA)</a></p>\n\n<h3>参考リンク</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RFC\">RFC</a>-8032について、分かりやすそうな翻訳サイトがあったのでリンク貼っておく。\n<a href=\"https://hazm.at/mox/security/public-key/elliptic-curve/rfc8032/index.html\">RFC&#x7FFB;&#x8A33;: Edwards-Curve Digital Signature Algorithm (EdDSA) - MOXBOX</a></p>\n\n<h3>雑記</h3>\n\n<p>一瞬、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%CF%A5%AC%A5%EC%A5%F3\">ハガレン</a>？って思ってしまいました。<br />\nよく考えたら、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%C9\">エド</a>ワードの綴って、<code>Edward</code>だから、sが多いね。。。</p>\n\n<h2>360: Sealed Classes (<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>)</h2>\n\n<p>密着したクラスとインタフェースを<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>言語に提供する。<br />\n密着したクラスとインタフェースは、拡張や実装を他クラスに制限することができる。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/360\">JEP 360: Sealed Classes (Preview)</a></p>\n\n<h3>雑記</h3>\n\n<p>つまり、どういうことだってばよ？<br />\nあとで、詳しく調査</p>\n\n<h2>371: Hidden Classes</h2>\n\n<p>他のクラスの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%C8%A5%B3%A1%BC%A5%C9\">バイトコード</a>から直接使用できないクラスである隠しクラスを導入します。 非表示のクラスは、実行時にクラスを生成し、リフレクションを介してそれらを間接的に使用する<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF\">フレームワーク</a>による使用を目的としています。 隠しクラスは、アクセス制御ネストのメンバーとして定義でき、他のクラスとは無関係にアンロードできます。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/371\">JEP 371: Hidden Classes</a></p>\n\n<h3>雑記</h3>\n\n<p>翻訳をそのまま貼り付けた。。。<br />\nなんとなくだが、通常ではアクセスできないクラス昨日を提供するみたいだね。<br />\nPrivateな内部クラスとは、違ったやつなのかな？<br />\nどういうシーンで必要になるのか、まだ理解できてない。</p>\n\n<h2>372: Remove the Nashorn <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a> Engine</h2>\n\n<p>Nashorn の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JavaScript\">JavaScript</a>エンジン、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>、jjsツールを削除する。<br />\nこれらは、Java11でアナウンスしているので削除する。</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fopenjdk.java.net%2Fjeps%2F372\" title=\"JEP 372: Remove the Nashorn JavaScript Engine\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><a href=\"https://openjdk.java.net/jeps/372\">JEP 372: Remove the Nashorn JavaScript Engine</a></p>\n\n<h3>雑記</h3>\n\n<p>さすがに、これはタイトルだけで分かった。</p>\n\n<h2>373: Reimplement the Legacy DatagramSocket <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a></h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>.net.DatagramSocket、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>.net.MulticastSocket <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>の実装を、保守および<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%D0%A5%C3%A5%B0\">デバッグ</a>が容易で、よりシンプルでより最新の実装に置き換える。 新しい実装は、現在Project Loomで検討されている仮想スレッドでの作業に簡単にさせる。<br />\nレガシーソケット<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>をすでに再実装したJEP 353の続きです。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/373\">JEP 373: Reimplement the Legacy DatagramSocket API</a></p>\n\n<h3>雑記</h3>\n\n<p>内部の動きだけ変える感じかな？<br />\n外部の振る舞いは変えないだろうから、使う側としては概要だけ知ってれば良さそう。</p>\n\n<h2>374: Disable and Deprecate Biased Locking</h2>\n\n<p>デフォルトのバイアスロックを無効にし、関連するすべての<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3\">コマンドライン</a>オプションを廃止します。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/374\">JEP 374: Disable and Deprecate Biased Locking</a></p>\n\n<h3>雑記</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/java\">java</a>コマンドのオプションかな？<br />\nあんまり、コマンド叩いたりしないから、ここらへんの知識は疎い。。。</p>\n\n<h2>375: Pattern Matching for instanceof (Second <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>)</h2>\n\n<p>instanceof<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2\">演算子</a>のパターンマッチングで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>を拡張する。<br />\nプログラム内の一般的なロジックである条件付き抽出をより簡潔かつ安全に表現できる。<br />\nこれは、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JDK\">JDK</a> 15のプレビュー言語機能です。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/375\">JEP 375: Pattern Matching for instanceof (Second Preview)</a></p>\n\n<h3>雑記</h3>\n\n<p>来たな、パターンマッチの対応が。<br />\nプレビューだけど、適用されれば使えると思うので、早めにキャッチアップしておきたい。</p>\n\n<h2>377: ZGC: A Scalable Low-Latency Garbage Collector</h2>\n\n<p>Z Garbage Collectorを試験的な機能から製品の機能に変更します。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/377\">JEP 377: ZGC: A Scalable Low-Latency Garbage Collector (Production)</a></p>\n\n<h3>雑記</h3>\n\n<p>たしか、オ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>ルが開発した<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GC\">GC</a>だっけ？<br />\n停止時間をかなり短くしたような話を聞いたような気がする。</p>\n\n<h2>378: Text Blocks</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>言語にテキストブロックを追加します。 テキストブロックは複数行の文字列<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%C6%A5%E9%A5%EB\">リテラル</a>であり、ほとんどの<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9\">エス</a>ケープシーケンスの必要性を回避し、予測可能な方法で文字列を自動的にフォーマットし、必要に応じて開発者がフォーマットを制御できるようにします。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/378\">JEP 378: Text Blocks</a></p>\n\n<h3>雑記</h3>\n\n<p>ここら辺は、予習済みだから、サマリだけで内容は分かる。\n過去調べたリンクを貼っておく</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2019%2F09%2F01%2F193336\" title=\"Java13リリース前の予習（Text Blocks深堀） - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2019/09/01/193336\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F02%2F16%2F104719\" title=\"Java14事前調査まとめ(言語・JVM系) - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/02/16/104719\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<p>利用用途は、たぶん、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SQL\">SQL</a>のベタ書きが多いんじゃないかと思う。<br />\nあとは、テンプレート的なものを作りたいとか。</p>\n\n<h2>379: Shenandoah: A Low-Pause-Time Garbage Collector</h2>\n\n<p>Shenandoahガベージコレクターを実験的な機能から製品の機能に変更します。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/379\">JEP 379: Shenandoah: A Low-Pause-Time Garbage Collector (Production)</a></p>\n\n<h3>雑記</h3>\n\n<p>何か聞いた気がするのだが、どんなやつだったか忘れた。<br />\n<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/GC\">GC</a>周りは、あんまり気にしたことがないから、頭に入ってこないんだよね。。。</p>\n\n<h2>381: Remove the <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Solaris\">Solaris</a> and <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SPARC\">SPARC</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Ports\">Ports</a></h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9\">ソースコード</a>を削除し、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Solaris\">Solaris</a> / <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SPARC\">SPARC</a>、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Solaris\">Solaris</a> / x64、および<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Linux\">Linux</a> / <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/SPARC\">SPARC</a>ポートのサポートを構築します。 これらのポートは、将来のリリースで削除することを明確に意図して、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/JDK\">JDK</a> 14で非推奨になりました。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/381\">JEP 381: Remove the Solaris and SPARC Ports</a></p>\n\n<h3>雑記</h3>\n\n<p>たしかに非推奨になったのは見た気がする。<br />\n当時は、使ってなかったので、ふ～ん程度に考えていた。<br />\n今回、deplicateになったやつが削除されるjepが多いな。</p>\n\n<h2>383: Foreign-Memory <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Access\">Access</a> <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a> (Second Incubator)</h2>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>プログラムが<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>ヒープ外の外部メモリに安全かつ効率的にアクセスできるようにする<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/API\">API</a>を導入します。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/383\">JEP 383: Foreign-Memory Access API (Second Incubator)</a></p>\n\n<h3>雑記</h3>\n\n<p>概要だけだとよく分からんな。。。<br />\nあんまり、メモリを気にしない種族にとっては、スルーしちゃう内容かも。</p>\n\n<h2>384: Records (Second <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Preview\">Preview</a>)</h2>\n\n<p>不変データの透過的なキャリアとして機能するクラスであるレコードを使用して、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC\">プログラミング言語</a>を拡張します。 レコードは、名目上のタプルと考えることができます。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/384\">JEP 384: Records (Second Preview)</a></p>\n\n<h3>雑記</h3>\n\n<p>first <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/preview\">preview</a>のときに調べたな。<br />\n継続して調べるつもり</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2020%2F02%2F16%2F101118\" title=\" Java14事前調査 JEP 359: Records (Preview) - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2020/02/16/101118\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h2>385: Deprecate <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a> Activation for Removal</h2>\n\n<p>今後の削除のために<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%C6%A5%A3%A5%D9%A1%BC%A5%B7%A5%E7%A5%F3\">アクティベーション</a>メ<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%AB%A5%CB\">カニ</a>ズムを非推奨にします。 <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%C6%A5%A3%A5%D9%A1%BC%A5%B7%A5%E7%A5%F3\">アクティベーション</a>は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a> 8以降オプションであった<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a>の廃止された部分です。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a>の他の部分は廃止されません。</p>\n\n<p><a href=\"https://openjdk.java.net/jeps/385\">JEP 385: Deprecate RMI Activation for Removal</a></p>\n\n<h3>雑記</h3>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/RMI\">RMI</a><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%C6%A5%A3%A5%D9%A1%BC%A5%B7%A5%E7%A5%F3\">アクティベーション</a>なんて、存在すら知らなかった恥男がここに居ます。</p>\n\n<h2>全体通して</h2>\n\n<p>deprecateになったやつが、なんやかんやで残るのが常だったけど、ちゃんと削除されるんだな。<br />\n計画的にdeprecateを排除する必要があり、最新バージョンを使わなくても内容は追わないとダメだね。</p>\n\n<p>deprecateの綴りを記事途中で間違えている気がしないでもない。</p>\n\n<p>開発者としてキャッチアップしておかないといけないのは、JEP360, JEP375, JEP378, JEP384あたりだろうか？<br />\n今回リリースされるJEPが、かなり多い気がする。</p>\n",
      "contentSnippet": "一覧\n339: Edwards-Curve Digital Signature Algorithm (EdDSA)\n360: Sealed Classes (Preview)\n371: Hidden Classes\n372: Remove the Nashorn JavaScript Engine\n373: Reimplement the Legacy DatagramSocket API\n374: Disable and Deprecate Biased Locking\n375: Pattern Matching for instanceof (Second Preview)\n377: ZGC: A Scalable Low-Latency Garbage Collector\n378: Text Blocks\n379: Shenandoah: A Low-Pause-Time Garbage Collector\n381: Remove the Solaris and SPARC Ports\n383: Foreign-Memory Access API (Second Incubator)\n384: Records (Second Preview)\n385: Deprecate RMI Activation for Removal\n結構多いな。。。\n各JEPのサマリ翻訳\nGoogle翻訳先生、出番です！\n339: Edwards-Curve Digital Signature Algorithm (EdDSA)\nRFC-8032に記載されている、エドワーズ曲線デジタル署名アルゴリズムを使用した暗号化署名を実装する。\nJEP 339: Edwards-Curve Digital Signature Algorithm (EdDSA)\n参考リンク\nRFC-8032について、分かりやすそうな翻訳サイトがあったのでリンク貼っておく。\nRFC翻訳: Edwards-Curve Digital Signature Algorithm (EdDSA) - MOXBOX\n雑記\n一瞬、ハガレン？って思ってしまいました。\nエドワードの綴って、Edwardだから、sが多いね。。。\n360: Sealed Classes (Preview)\n密着したクラスとインタフェースをJava言語に提供する。\nJEP 360: Sealed Classes (Preview)\n雑記\nつまり、どういうことだってばよ？\n371: Hidden Classes\n他のクラスのバイトコードから直接使用できないクラスである隠しクラスを導入します。 非表示のクラスは、実行時にクラスを生成し、リフレクションを介してそれらを間接的に使用するフレームワークによる使用を目的としています。 隠しクラスは、アクセス制御ネストのメンバーとして定義でき、他のクラスとは無関係にアンロードできます。\nJEP 371: Hidden Classes\n雑記\n翻訳をそのまま貼り付けた。。。\n372: Remove the Nashorn JavaScript Engine\nNashorn のJavaScriptエンジン、API、jjsツールを削除する。\nJEP 372: Remove the Nashorn JavaScript Engine\n雑記\nさすがに、これはタイトルだけで分かった。\n373: Reimplement the Legacy DatagramSocket API\njava.net.DatagramSocket、java.net.MulticastSocket APIの実装を、保守およびデバッグが容易で、よりシンプルでより最新の実装に置き換える。 新しい実装は、現在Project Loomで検討されている仮想スレッドでの作業に簡単にさせる。\nAPIをすでに再実装したJEP 353の続きです。\nJEP 373: Reimplement the Legacy DatagramSocket API\n雑記\n内部の動きだけ変える感じかな？\n374: Disable and Deprecate Biased Locking\nデフォルトのバイアスロックを無効にし、関連するすべてのコマンドラインオプションを廃止します。\nJEP 374: Disable and Deprecate Biased Locking\n雑記\njavaコマンドのオプションかな？\n375: Pattern Matching for instanceof (Second Preview)\ninstanceof演算子のパターンマッチングで、Javaプログラミング言語を拡張する。\nJDK 15のプレビュー言語機能です。\nJEP 375: Pattern Matching for instanceof (Second Preview)\n雑記\n来たな、パターンマッチの対応が。\n377: ZGC: A Scalable Low-Latency Garbage Collector\nZ Garbage Collectorを試験的な機能から製品の機能に変更します。\nJEP 377: ZGC: A Scalable Low-Latency Garbage Collector (Production)\n雑記\nたしか、オラクルが開発したGCだっけ？\n378: Text Blocks\nJava言語にテキストブロックを追加します。 テキストブロックは複数行の文字列リテラルであり、ほとんどのエスケープシーケンスの必要性を回避し、予測可能な方法で文字列を自動的にフォーマットし、必要に応じて開発者がフォーマットを制御できるようにします。\nJEP 378: Text Blocks\n雑記\nここら辺は、予習済みだから、サマリだけで内容は分かる。\n過去調べたリンクを貼っておく\nsuzaku-tec.hatenadiary.jp\nsuzaku-tec.hatenadiary.jp\n利用用途は、たぶん、SQLのベタ書きが多いんじゃないかと思う。\n379: Shenandoah: A Low-Pause-Time Garbage Collector\nShenandoahガベージコレクターを実験的な機能から製品の機能に変更します。\nJEP 379: Shenandoah: A Low-Pause-Time Garbage Collector (Production)\n雑記\n何か聞いた気がするのだが、どんなやつだったか忘れた。\nGC周りは、あんまり気にしたことがないから、頭に入ってこないんだよね。。。\n381: Remove the Solaris and SPARC Ports\nソースコードを削除し、Solaris / SPARC、Solaris / x64、およびLinux / SPARCポートのサポートを構築します。 これらのポートは、将来のリリースで削除することを明確に意図して、JDK 14で非推奨になりました。\nJEP 381: Remove the Solaris and SPARC Ports\n雑記\nたしかに非推奨になったのは見た気がする。\n383: Foreign-Memory Access API (Second Incubator)\nJavaプログラムがJavaヒープ外の外部メモリに安全かつ効率的にアクセスできるようにするAPIを導入します。\nJEP 383: Foreign-Memory Access API (Second Incubator)\n雑記\n概要だけだとよく分からんな。。。\n384: Records (Second Preview)\n不変データの透過的なキャリアとして機能するクラスであるレコードを使用して、Javaプログラミング言語を拡張します。 レコードは、名目上のタプルと考えることができます。\nJEP 384: Records (Second Preview)\n雑記\nfirst previewのときに調べたな。\nsuzaku-tec.hatenadiary.jp\n385: Deprecate RMI Activation for Removal\n今後の削除のためにRMIアクティベーションメカニズムを非推奨にします。 RMIアクティベーションは、Java 8以降オプションであったRMIの廃止された部分です。RMIの他の部分は廃止されません。\nJEP 385: Deprecate RMI Activation for Removal\n雑記\nRMIアクティベーションなんて、存在すら知らなかった恥男がここに居ます。\n全体通して\ndeprecateになったやつが、なんやかんやで残るのが常だったけど、ちゃんと削除されるんだな。\ndeprecateの綴りを記事途中で間違えている気がしないでもない。\n開発者としてキャッチアップしておかないといけないのは、JEP360, JEP375, JEP378, JEP384あたりだろうか？\n今回リリースされるJEPが、かなり多い気がする。",
      "guid": "hatenablog://entry/26006613622283786",
      "categories": [
        "Java",
        "情報収集",
        "恥晒し",
        "プログラミング",
        "学習"
      ],
      "isoDate": "2020-09-02T13:43:11.000Z"
    },
    {
      "title": "【Java】Java15先取り調査 環境構築編",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/09/02/223834",
      "pubDate": "Wed, 02 Sep 2020 22:38:34 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<h1>検証環境</h1>\n\n<p><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Visual%20Studio%20Code\">Visual Studio Code</a>のバージョン情報そのまま貼り付け。<br />\nたぶん、情報としては足りているはず。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>バージョン: 1.48.2 (system setup)\nコミット: a0479759d6e9ea56afa657e454193f72aef85bd0\n日付: 2020-08-25T10:13:11.295Z\nElectron: 7.3.2\nChrome: 78.0.3904.130\nNode.js: 12.8.1\nV8: 7.8.279.23-electron.0\nOS: Windows_NT x64 10.0.18362</pre>\n\n\n<h1>環境構築</h1>\n\n<p>sdkmanがインストール済みで話を進める。<br />\nsdkmanのインストールやら使い方は、過去の記事参照</p>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsuzaku-tec.hatenadiary.jp%2Fentry%2F2018%2F12%2F08%2F115159\" title=\"SDKMAN調査・まとめ - エンターテイメント！！\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://suzaku-tec.hatenadiary.jp/entry/2018/12/08/115159\">suzaku-tec.hatenadiary.jp</a></cite></p>\n\n<h2>Java15のインストール</h2>\n\n<p>まずは、インストールするバージョン情報を確認する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sdk list java</pre>\n\n\n<p>すると、Java15として下記の情報が出てきた。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink> Java.net      |     | 16.ea.13     | open    |            | 16.ea.13-open\n               |     | 15.ea.36     | open    |            | 15.ea.36-open\n               | &gt;&gt;&gt; | 14.ea.36     | open    | local only | 14.ea.36-open\n               |     | 14.ea.24     | open    | local only | 14.ea.24-open\n               |     | 14.0.2       | open    |            | 14.0.2-open\n               |     | 13.0.2       | open    |            | 13.0.2-open\n               |     | 12.0.2       | open    |            | 12.0.2-open\n               |     | 11.0.8       | open    |            | 11.0.8-open</pre>\n\n\n<p>もう、Java16のeary build公開されてるんだ。。。<br />\n今、欲しいのは、Java15なので、下記のコマンドで<code>15.ea.36</code>をインストール。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sdk install java 15.ea.36-open</pre>\n\n\n<p>少し時間を置くと、下記のようにインストールしたやつをデフォルトにするか聞かれる。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>Do you want java 15.ea.36-open to be set as default? (Y/n):</pre>\n\n\n<p>これ、<code>Y</code>を押したはずなんだが、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のバージョン確認しても変更されてない。。。<br />\n理由を探ってもいいけど、面倒くさいので、下記のコマンドで、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a>のバージョン変更する。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ sdk use java 15.ea.36</pre>\n\n\n<p>念のため、バージョン確認。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ java -version\nopenjdk version &#34;15&#34; 2020-09-15\nOpenJDK Runtime Environment (build 15+36-1562)\nOpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)\n\n$ javac -version\njavac 15</pre>\n\n\n<p>ちゃんと変わってるね！<br />\n環境構築は、細かく状況を確認していかないと、ズレが発生したときに原因が特定しづらいから、気をつけるようにしてる。</p>\n\n<p>以上、環境構築は終了。</p>\n",
      "contentSnippet": "検証環境\nVisual Studio Codeのバージョン情報そのまま貼り付け。\nバージョン: 1.48.2 (system setup)\nコミット: a0479759d6e9ea56afa657e454193f72aef85bd0\n日付: 2020-08-25T10:13:11.295Z\nElectron: 7.3.2\nChrome: 78.0.3904.130\nNode.js: 12.8.1\nV8: 7.8.279.23-electron.0\nOS: Windows_NT x64 10.0.18362\n環境構築\nsdkmanがインストール済みで話を進める。\nsuzaku-tec.hatenadiary.jp\nJava15のインストール\nまずは、インストールするバージョン情報を確認する。\n$ sdk list java\nすると、Java15として下記の情報が出てきた。\n Java.net      |     | 16.ea.13     | open    |            | 16.ea.13-open\n               |     | 15.ea.36     | open    |            | 15.ea.36-open\n               | >>> | 14.ea.36     | open    | local only | 14.ea.36-open\n               |     | 14.ea.24     | open    | local only | 14.ea.24-open\n               |     | 14.0.2       | open    |            | 14.0.2-open\n               |     | 13.0.2       | open    |            | 13.0.2-open\n               |     | 12.0.2       | open    |            | 12.0.2-open\n               |     | 11.0.8       | open    |            | 11.0.8-open\nもう、Java16のeary build公開されてるんだ。。。\n15.ea.36をインストール。\nsdk install java 15.ea.36-open\n少し時間を置くと、下記のようにインストールしたやつをデフォルトにするか聞かれる。\nDo you want java 15.ea.36-open to be set as default? (Y/n):\nこれ、Yを押したはずなんだが、Javaのバージョン確認しても変更されてない。。。\nJavaのバージョン変更する。\n$ sdk use java 15.ea.36\n念のため、バージョン確認。\n$ java -version\nopenjdk version \"15\" 2020-09-15\nOpenJDK Runtime Environment (build 15+36-1562)\nOpenJDK 64-Bit Server VM (build 15+36-1562, mixed mode, sharing)\n\n$ javac -version\njavac 15\nちゃんと変わってるね！\n以上、環境構築は終了。",
      "guid": "hatenablog://entry/26006613622279144",
      "categories": [
        "Java",
        "開発環境",
        "ライブラリ",
        "情報収集"
      ],
      "isoDate": "2020-09-02T13:38:34.000Z"
    },
    {
      "title": "2020/07/27週 気づきと振り返り 熱中症で倒れる前に在宅勤務",
      "link": "https://suzaku-tec.hatenadiary.jp/entry/2020/08/24/234531",
      "pubDate": "Mon, 24 Aug 2020 23:45:31 +0900",
      "enclosure": {
        "url": "https://cdn.blog.st-hatena.com/images/theme/og-image-1500.png",
        "type": "image/png",
        "length": "0"
      },
      "content": "<ul class=\"table-of-contents\">\n    <li><a href=\"#業務こなしての問題気づき\">業務こなしての問題・気づき</a><ul>\n            <li><a href=\"#Java\">Java</a><ul>\n                    <li><a href=\"#継承の多用\">継承の多用</a></li>\n                    <li><a href=\"#メソッドの結果が戻りにない\">メソッドの結果が戻りにない</a></li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li><a href=\"#その他雑記\">その他雑記</a><ul>\n            <li><a href=\"#在宅勤務サイコー\">在宅勤務サイコー</a></li>\n            <li><a href=\"#メガネが\">メガネが・・・</a></li>\n        </ul>\n    </li>\n</ul>\n\n<h1 id=\"業務こなしての問題気づき\">業務こなしての問題・気づき</h1>\n\n<h2 id=\"Java\"><a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Java\">Java</a></h2>\n\n<h3 id=\"継承の多用\">継承の多用</h3>\n\n<p>何重にも継承しているクラスを見た。。。</p>\n\n<p>継承の多用は、制約まみれになりそうだなって感じた。<br />\n継承先をたどっていくと、継承元で必要ない変数がどんどん出てきて、目を覆いたくなった。。。<br />\nまた、変数が多いせいで、どこで何をしているのか、よく分からないって感じだった。。。</p>\n\n<p>初期の<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3\">アーキテクチャ</a>構想が、ものすごく重要だってことを、見てて感じた。</p>\n\n<h3 id=\"メソッドの結果が戻りにない\">メソッドの結果が戻りにない</h3>\n\n<p>メソッドの出力結果が、ローカル変数に入っている。。。<br />\nメソッドがクラスに強依存しているのが、処理を追ううえで、辛すぎる。。。</p>\n\n<p>どこで何が設定されるのか分からないのが辛たん。。。</p>\n\n<h1 id=\"その他雑記\">その他雑記</h1>\n\n<h2 id=\"在宅勤務サイコー\">在宅勤務サイコー</h2>\n\n<p>出社がないのが最高！<br />\nマスク着用してないと、ガチで責められる現場だった。<br />\nマスクつけて出社は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%C7%AE%C3%E6%BE%C9\">熱中症</a>で死にそうだった。<br />\nそれがなくなるのは、かなり楽。<br />\nマスクつけて出社してたころは、午前中、かなり辛かったから、逆に効率は悪かったと思う。</p>\n\n<p>暑さが無くなるまでは、在宅勤務したい。</p>\n\n<h2 id=\"メガネが\">メガネが・・・</h2>\n\n<p>メガネがメガネケースにない。。。<br />\nたまにやってしまう。<br />\nケースだけ持ってきて、メガネを忘れるという罠を。</p>\n\n<p>いまは、予備のメガネを常備しているから、業務に支障はでないけど、昔、眼鏡がなくて、ガチで効率が悪かったことがあった。</p>\n\n<p>メガネって、忘れるのが痛い。<br />\nコンタクトの人は、つけ忘れることがあるのだろうか？</p>\n",
      "contentSnippet": "業務こなしての問題・気づき\nJava\n継承の多用\nメソッドの結果が戻りにない\nその他雑記\n在宅勤務サイコー\nメガネが・・・\n業務こなしての問題・気づき\nJava\n継承の多用\n何重にも継承しているクラスを見た。。。\n継承の多用は、制約まみれになりそうだなって感じた。\n初期のアーキテクチャ構想が、ものすごく重要だってことを、見てて感じた。\nメソッドの結果が戻りにない\nメソッドの出力結果が、ローカル変数に入っている。。。\nどこで何が設定されるのか分からないのが辛たん。。。\nその他雑記\n在宅勤務サイコー\n出社がないのが最高！\n熱中症で死にそうだった。\n暑さが無くなるまでは、在宅勤務したい。\nメガネが・・・\nメガネがメガネケースにない。。。\nいまは、予備のメガネを常備しているから、業務に支障はでないけど、昔、眼鏡がなくて、ガチで効率が悪かったことがあった。\nメガネって、忘れるのが痛い。\nコンタクトの人は、つけ忘れることがあるのだろうか？",
      "guid": "hatenablog://entry/26006613619444405",
      "categories": [
        "Java",
        "プログラミング",
        "愚痴",
        "思ひ出",
        "体調管理",
        "アーキテクチャ"
      ],
      "isoDate": "2020-08-24T14:45:31.000Z"
    }
  ],
  "title": "エンターテイメント！！",
  "description": "遊戯王好きのJavaエンジニアのブログ。バーニングソウルを会得する特訓中。",
  "generator": "Hatena::Blog",
  "link": "https://suzaku-tec.hatenadiary.jp/",
  "lastBuildDate": "Sun, 23 May 2021 22:07:50 +0900",
  "docs": "http://blogs.law.harvard.edu/tech/rss"
}